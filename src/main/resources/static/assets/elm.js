(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}

function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$element = _Browser_element;
var $mdgriffith$elm_ui$Element$Desktop = {$: 'Desktop'};
var $author$project$State$AppState$LoginPage = {$: 'LoginPage'};
var $author$project$State$UserState$NotLogged = {$: 'NotLogged'};
var $mdgriffith$elm_ui$Element$Portrait = {$: 'Portrait'};
var $author$project$Data$Schedule$UTC = function (a) {
	return {$: 'UTC', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$View$Theme$darkCharcoal = A3($mdgriffith$elm_ui$Element$rgb255, 46, 52, 54);
var $author$project$View$Theme$darkGrey = A3($mdgriffith$elm_ui$Element$rgb255, 186, 189, 182);
var $author$project$View$Theme$darkOrange = A3($mdgriffith$elm_ui$Element$rgb255, 206, 92, 0);
var $author$project$View$Theme$grey = A3($mdgriffith$elm_ui$Element$rgb255, 211, 215, 207);
var $author$project$View$Theme$lightBlue = A3($mdgriffith$elm_ui$Element$rgb255, 114, 159, 207);
var $author$project$View$Theme$lightCharcoal = A3($mdgriffith$elm_ui$Element$rgb255, 136, 138, 133);
var $author$project$View$Theme$lightOrange = A3($mdgriffith$elm_ui$Element$rgb255, 252, 175, 62);
var $author$project$View$Theme$lightPurple = A3($mdgriffith$elm_ui$Element$rgb255, 173, 127, 168);
var $author$project$View$Theme$white = A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255);
var $author$project$View$Theme$darkModeTheme = {
	alertColor: $author$project$View$Theme$darkOrange,
	appBackground: $author$project$View$Theme$darkCharcoal,
	appForeground: $author$project$View$Theme$white,
	appTitleForeground: $author$project$View$Theme$darkOrange,
	background: $author$project$View$Theme$lightCharcoal,
	disabled: A3($mdgriffith$elm_ui$Element$rgb255, 85, 87, 83),
	disabledButton: $author$project$View$Theme$grey,
	disabledTabForeground: $author$project$View$Theme$lightCharcoal,
	enabledButton: $author$project$View$Theme$darkOrange,
	errorForeground: A3($mdgriffith$elm_ui$Element$rgb255, 164, 25, 0),
	flaggedForeground: $author$project$View$Theme$darkGrey,
	foreground: $author$project$View$Theme$darkCharcoal,
	hashtagForeground: $author$project$View$Theme$lightPurple,
	linkForeground: $author$project$View$Theme$lightBlue,
	partnerBackground: $author$project$View$Theme$lightOrange,
	partnerForeground: $author$project$View$Theme$darkCharcoal,
	progressColor: $author$project$View$Theme$darkOrange,
	remainingProgressColor: $author$project$View$Theme$lightCharcoal,
	tabForeground: $author$project$View$Theme$darkOrange,
	textFieldBackground: $author$project$View$Theme$darkCharcoal,
	textFieldForeground: $author$project$View$Theme$lightBlue,
	textFieldPlaceHolder: $author$project$View$Theme$lightBlue,
	userLinkForeground: $author$project$View$Theme$lightBlue
};
var $author$project$View$UIStyle$desktop = {
	defaultFontSize: 10,
	extraLarge: _Utils_Tuple2(96, 96),
	large: _Utils_Tuple2(48, 48),
	normal: _Utils_Tuple2(24, 24),
	small: _Utils_Tuple2(16, 16),
	theme: $author$project$View$Theme$darkModeTheme,
	tiny: _Utils_Tuple2(12, 12)
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $author$project$State$Cache$empty = {challenges: $elm$core$Dict$empty, conversations: $elm$core$Dict$empty, events: $elm$core$Dict$empty, flaggedMessages: $elm$core$Dict$empty, followers: $elm$core$Set$empty, followingHashtags: $elm$core$Set$empty, followingUsers: $elm$core$Set$empty, hashtagTrend: $elm$core$Maybe$Nothing, likeCount: $elm$core$Dict$empty, liked: $elm$core$Set$empty, partners: $elm$core$Dict$empty, partnerships: $elm$core$Dict$empty, pinned: $elm$core$Set$empty, polls: $elm$core$Dict$empty, posts: $elm$core$Dict$empty, scores: $elm$core$Dict$empty, tips: $elm$core$Dict$empty, users: $elm$core$Dict$empty};
var $author$project$State$ChallengeState$OnGoingTab = {$: 'OnGoingTab'};
var $author$project$State$PageCache$empty = {cache: $elm$core$Dict$empty, loading: $elm$core$Maybe$Nothing, noMoreData: false};
var $author$project$Data$Page$Page = function (a) {
	return {$: 'Page', a: a};
};
var $author$project$Data$Page$first = $author$project$Data$Page$Page(1);
var $author$project$State$ChallengeState$empty = {currentPage: $author$project$Data$Page$first, currentTab: $author$project$State$ChallengeState$OnGoingTab, postCache: $author$project$State$PageCache$empty};
var $author$project$State$EventDetailsState$EventDetailsTab = {$: 'EventDetailsTab'};
var $author$project$State$EventDetailsState$empty = {currentPage: $author$project$Data$Page$first, currentTab: $author$project$State$EventDetailsState$EventDetailsTab, userCache: $author$project$State$PageCache$empty};
var $author$project$State$EventState$IncomingEventTab = {$: 'IncomingEventTab'};
var $author$project$State$EventState$empty = {currentPage: $author$project$Data$Page$first, currentTab: $author$project$State$EventState$IncomingEventTab, postCache: $author$project$State$PageCache$empty};
var $author$project$State$FeedState$empty = {currentPage: $author$project$Data$Page$first, newPostsAvailable: false, postCache: $author$project$State$PageCache$empty};
var $author$project$State$FormState$Daily = {$: 'Daily'};
var $author$project$State$FormState$Followers = {$: 'Followers'};
var $author$project$State$FormState$emptyChallengeWizard = {
	audience: $author$project$State$FormState$Followers,
	content: $elm$core$Maybe$Nothing,
	end: $elm$core$Maybe$Nothing,
	posting: false,
	reportPeriod: $author$project$State$FormState$Daily,
	start: $elm$core$Maybe$Nothing,
	successMeasure: {maxFailure: 0, maxPartial: 0, maxSkip: 0},
	title: $elm$core$Maybe$Nothing
};
var $author$project$State$FormState$LocatedOnline = {$: 'LocatedOnline'};
var $author$project$State$FormState$emptyEventWizard = {description: $elm$core$Maybe$Nothing, end: $elm$core$Maybe$Nothing, location: $elm$core$Maybe$Nothing, maxParticipants: 10, posting: false, selectedLocationType: $author$project$State$FormState$LocatedOnline, start: $elm$core$Maybe$Nothing};
var $author$project$State$FormState$emptyFreeTextWizard = {content: $elm$core$Maybe$Nothing, posting: false, sources: _List_Nil, title: $elm$core$Maybe$Nothing};
var $author$project$State$FormState$emptyPollWizard = {options: $elm$core$Maybe$Nothing, posting: false, question: $elm$core$Maybe$Nothing};
var $author$project$State$FormState$FillingNewRegistration = {$: 'FillingNewRegistration'};
var $author$project$State$FormState$emptyRegistrationForm = {checkingPseudo: $elm$core$Maybe$Nothing, email: $elm$core$Maybe$Nothing, error: $elm$core$Maybe$Nothing, introduction: $elm$core$Maybe$Nothing, password: $elm$core$Maybe$Nothing, passwordVerification: $elm$core$Maybe$Nothing, pseudo: $elm$core$Maybe$Nothing, serverValidatedPseudo: $elm$core$Maybe$Nothing, submissionState: $author$project$State$FormState$FillingNewRegistration, verification: $elm$core$Maybe$Nothing};
var $author$project$State$FormState$emptyRepostWizard = {posting: false, repost: $elm$core$Maybe$Nothing};
var $author$project$State$FormState$emptyTipWizard = {content: $elm$core$Maybe$Nothing, posting: false, sources: _List_Nil};
var $author$project$State$FormState$empty = {newChallengeWizard: $author$project$State$FormState$emptyChallengeWizard, newEventWizard: $author$project$State$FormState$emptyEventWizard, newFreeTextWizard: $author$project$State$FormState$emptyFreeTextWizard, newPollWizard: $author$project$State$FormState$emptyPollWizard, newRepostWizard: $author$project$State$FormState$emptyRepostWizard, newTipWizard: $author$project$State$FormState$emptyTipWizard, registrationForm: $author$project$State$FormState$emptyRegistrationForm};
var $author$project$State$NotificationState$UnreadTab = {$: 'UnreadTab'};
var $author$project$State$NotificationState$empty = {currentPage: $author$project$Data$Page$first, currentTab: $author$project$State$NotificationState$UnreadTab, latest: $author$project$State$PageCache$empty, unread: false};
var $author$project$State$PinnedState$empty = {currentPage: $author$project$Data$Page$first, postCache: $author$project$State$PageCache$empty};
var $author$project$State$SearchState$EmptySearch = {$: 'EmptySearch'};
var $author$project$State$SearchState$empty = {currentPage: $author$project$Data$Page$first, field: '', filter: $author$project$State$SearchState$EmptySearch, history: _List_Nil, postCache: $author$project$State$PageCache$empty, userCache: $author$project$State$PageCache$empty};
var $author$project$State$WallState$empty = {currentPage: $author$project$Data$Page$first, postCache: $author$project$State$PageCache$empty, user: $elm$core$Maybe$Nothing};
var $author$project$State$AppState$empty = {
	cache: $author$project$State$Cache$empty,
	challenge: $author$project$State$ChallengeState$empty,
	device: {_class: $mdgriffith$elm_ui$Element$Desktop, orientation: $mdgriffith$elm_ui$Element$Portrait},
	display: $author$project$State$AppState$LoginPage,
	event: $author$project$State$EventState$empty,
	eventDetails: $author$project$State$EventDetailsState$empty,
	feed: $author$project$State$FeedState$empty,
	forms: $author$project$State$FormState$empty,
	notifications: $author$project$State$NotificationState$empty,
	pinned: $author$project$State$PinnedState$empty,
	previous: _List_Nil,
	search: $author$project$State$SearchState$empty,
	timestamp: $author$project$Data$Schedule$UTC(0),
	uiStyle: $author$project$View$UIStyle$desktop,
	user: $author$project$State$UserState$NotLogged,
	wall: $author$project$State$WallState$empty,
	windowSize: {height: 0, width: 0}
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Main$initState = function (_v0) {
	return _Utils_Tuple2($author$project$State$AppState$empty, $elm$core$Platform$Cmd$none);
};
var $author$project$Update$Msg$SetWindowSize = F2(
	function (a, b) {
		return {$: 'SetWindowSize', a: a, b: b};
	});
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$Main$subscriptions = function (_v0) {
	return $elm$browser$Browser$Events$onResize(
		F2(
			function (width, height) {
				return A2($author$project$Update$Msg$SetWindowSize, width, height);
			}));
};
var $author$project$Data$Challenge$Accepted = {$: 'Accepted'};
var $author$project$Update$Msg$Back = {$: 'Back'};
var $author$project$Update$Msg$CheckFeed = {$: 'CheckFeed'};
var $author$project$Update$Msg$CheckNotifications = {$: 'CheckNotifications'};
var $author$project$Update$Msg$CheckPseudoAvailability = function (a) {
	return {$: 'CheckPseudoAvailability', a: a};
};
var $author$project$Update$Msg$DisplayPage = function (a) {
	return {$: 'DisplayPage', a: a};
};
var $author$project$State$AppState$EventDetailsPage = function (a) {
	return {$: 'EventDetailsPage', a: a};
};
var $author$project$State$AppState$FeedPage = {$: 'FeedPage'};
var $author$project$Update$Msg$IdentifyDevice = function (a) {
	return {$: 'IdentifyDevice', a: a};
};
var $author$project$State$UserState$LoggedIn = function (a) {
	return {$: 'LoggedIn', a: a};
};
var $author$project$State$AppState$LoggedOffPage = {$: 'LoggedOffPage'};
var $author$project$State$UserState$LoggingIn = function (a) {
	return {$: 'LoggingIn', a: a};
};
var $author$project$State$AppState$LoginFailedPage = function (a) {
	return {$: 'LoginFailedPage', a: a};
};
var $author$project$State$AppState$NewPostPage = {$: 'NewPostPage'};
var $author$project$State$AppState$NotificationPage = {$: 'NotificationPage'};
var $author$project$State$AppState$PinnedPostPage = {$: 'PinnedPostPage'};
var $author$project$Update$Msg$RefreshEventDetails = function (a) {
	return {$: 'RefreshEventDetails', a: a};
};
var $author$project$Update$Msg$RefreshHashtagTrend = function (a) {
	return {$: 'RefreshHashtagTrend', a: a};
};
var $author$project$State$AppState$RegistrationPage = {$: 'RegistrationPage'};
var $author$project$Data$Challenge$Rejected = {$: 'Rejected'};
var $author$project$State$AppState$SearchPage = {$: 'SearchPage'};
var $author$project$State$AppState$UserPage = function (a) {
	return {$: 'UserPage', a: a};
};
var $author$project$State$AppState$WallPage = {$: 'WallPage'};
var $author$project$State$AppState$WizardRepostPage = {$: 'WizardRepostPage'};
var $author$project$Update$Msg$HttpChallengeAccepted = function (a) {
	return {$: 'HttpChallengeAccepted', a: a};
};
var $elm$url$Url$Builder$toQueryPair = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return key + ('=' + value);
};
var $elm$url$Url$Builder$toQuery = function (parameters) {
	if (!parameters.b) {
		return '';
	} else {
		return '?' + A2(
			$elm$core$String$join,
			'&',
			A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters));
	}
};
var $elm$url$Url$Builder$absolute = F2(
	function (pathSegments, parameters) {
		return '/' + (A2($elm$core$String$join, '/', pathSegments) + $elm$url$Url$Builder$toQuery(parameters));
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $danyx23$elm_uuid$Uuid$toString = function (_v0) {
	var internalString = _v0.a;
	return internalString;
};
var $author$project$Data$Token$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$Query$QueryUtils$authHeader = function (userInfo) {
	return A2(
		$elm$http$Http$header,
		'Authorization',
		$author$project$Data$Token$toString(userInfo.token));
};
var $author$project$Query$QueryUtils$baseUrl = 'http://green-generation.herokuapp.com';
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $author$project$Query$Json$DecoderUtils$handleJsonResponse = F2(
	function (decoder, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'BadStatus_':
				var statusCode = response.a.statusCode;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(statusCode));
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			default:
				var body = response.b;
				var _v1 = A2($elm$json$Json$Decode$decodeString, decoder, body);
				if (_v1.$ === 'Err') {
					return $elm$core$Result$Err(
						$elm$http$Http$BadBody(body));
				} else {
					var result = _v1.a;
					return $elm$core$Result$Ok(result);
				}
		}
	});
var $elm$http$Http$stringResolver = A2(_Http_expect, '', $elm$core$Basics$identity);
var $author$project$Query$Json$DecoderUtils$jsonResolver = A2($elm$core$Basics$composeL, $elm$http$Http$stringResolver, $author$project$Query$Json$DecoderUtils$handleJsonResponse);
var $elm$core$Task$fail = _Scheduler_fail;
var $elm$http$Http$resultToTask = function (result) {
	if (result.$ === 'Ok') {
		var a = result.a;
		return $elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return $elm$core$Task$fail(x);
	}
};
var $elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		$elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: false, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Data$Challenge$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$Query$Json$DecoderUtils$unitDecoder = $elm$json$Json$Decode$succeed(_Utils_Tuple0);
var $author$project$Query$Challenge$acceptChallenge = F3(
	function (cache, user, challengeId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengeAccepted,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'accept',
									$author$project$Data$Challenge$toString(challengeId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Update$Msg$HttpEventParticipationAccepted = function (a) {
	return {$: 'HttpEventParticipationAccepted', a: a};
};
var $elm$url$Url$Builder$QueryParameter = F2(
	function (a, b) {
		return {$: 'QueryParameter', a: a, b: b};
	});
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $elm$url$Url$Builder$string = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$url$Url$percentEncode(value));
	});
var $author$project$Data$Event$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$Data$User$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$Query$Event$acceptParticipation = F4(
	function (cache, user, eventId, participantId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventParticipationAccepted,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					return eventId;
				},
				$elm$http$Http$task(
					{
						body: $elm$http$Http$emptyBody,
						headers: _List_fromArray(
							[
								$author$project$Query$QueryUtils$authHeader(user)
							]),
						method: 'POST',
						resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
						timeout: $elm$core$Maybe$Nothing,
						url: _Utils_ap(
							$author$project$Query$QueryUtils$baseUrl,
							A2(
								$elm$url$Url$Builder$absolute,
								_List_fromArray(
									['event', 'participation', 'accept']),
								_List_fromArray(
									[
										A2(
										$elm$url$Url$Builder$string,
										'event-id',
										$author$project$Data$Event$toString(eventId)),
										A2(
										$elm$url$Url$Builder$string,
										'participant-id',
										$author$project$Data$User$toString(participantId))
									])))
					})));
	});
var $author$project$State$FormState$ValidationCodeFailed = {$: 'ValidationCodeFailed'};
var $author$project$State$FormState$changeRegistrationState = F2(
	function (submissionState, formState) {
		var registrationForm = formState.registrationForm;
		return _Utils_update(
			formState,
			{
				registrationForm: _Utils_update(
					registrationForm,
					{submissionState: submissionState})
			});
	});
var $author$project$State$FormState$accountVerificationFailed = $author$project$State$FormState$changeRegistrationState($author$project$State$FormState$ValidationCodeFailed);
var $author$project$State$FormState$RegistrationSuccessful = {$: 'RegistrationSuccessful'};
var $author$project$State$FormState$accountVerified = $author$project$State$FormState$changeRegistrationState($author$project$State$FormState$RegistrationSuccessful);
var $author$project$State$Cache$emptyChallengeEntry = {challenge: $elm$core$Maybe$Nothing, outcomeStatus: $elm$core$Maybe$Nothing, reportDates: _List_Nil, statistics: $elm$core$Maybe$Nothing, status: $elm$core$Maybe$Nothing, stepReports: _List_Nil, summary: $elm$core$Maybe$Nothing};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$State$Cache$addChallengeOutcomeStatus = F3(
	function (cache, id, status) {
		var cacheId = $author$project$Data$Challenge$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyChallengeEntry,
			A2($elm$core$Dict$get, cacheId, cache.challenges));
		var updated = _Utils_update(
			entry,
			{
				outcomeStatus: $elm$core$Maybe$Just(status)
			});
		return _Utils_update(
			cache,
			{
				challenges: A3($elm$core$Dict$insert, cacheId, updated, cache.challenges)
			});
	});
var $author$project$State$Cache$emptyConversationCacheEntry = {comment: $elm$core$Maybe$Nothing, flagged: $elm$core$Set$empty, messageCount: 0, messages: _List_Nil, opened: false, postId: $elm$core$Maybe$Nothing};
var $author$project$Utils$MaybeUtils$maybeString = function (str) {
	return $elm$core$String$isEmpty(str) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(str);
};
var $author$project$Data$Post$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$State$Cache$addComment = F3(
	function (cache, id, comment) {
		var cacheId = $author$project$Data$Post$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyConversationCacheEntry,
			A2($elm$core$Dict$get, cacheId, cache.conversations));
		var updated = _Utils_update(
			entry,
			{
				comment: $author$project$Utils$MaybeUtils$maybeString(comment)
			});
		return _Utils_update(
			cache,
			{
				conversations: A3($elm$core$Dict$insert, cacheId, updated, cache.conversations)
			});
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $author$project$Data$Schedule$milliseconds = function (_v0) {
	var ms = _v0.a;
	return ms;
};
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$Basics$not = _Basics_not;
var $author$project$Utils$ListUtils$unique = function (xs) {
	if (!xs.b) {
		return _List_Nil;
	} else {
		var y = xs.a;
		var ys = xs.b;
		return A2(
			$elm$core$List$cons,
			y,
			$author$project$Utils$ListUtils$unique(
				A2(
					$elm$core$List$filter,
					function (x) {
						return !_Utils_eq(x, y);
					},
					ys)));
	}
};
var $author$project$State$Cache$addConversationMessages = F3(
	function (cache, id, messages) {
		var cacheId = $author$project$Data$Post$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyConversationCacheEntry,
			A2($elm$core$Dict$get, cacheId, cache.conversations));
		var added = A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.timestamp;
				},
				A2($elm$core$Basics$composeR, $author$project$Data$Schedule$milliseconds, $elm$core$Basics$negate)),
			$author$project$Utils$ListUtils$unique(
				_Utils_ap(entry.messages, messages)));
		var updated = _Utils_update(
			entry,
			{messages: added});
		return _Utils_update(
			cache,
			{
				conversations: A3($elm$core$Dict$insert, cacheId, updated, cache.conversations)
			});
	});
var $author$project$State$Cache$emptyEventEntry = {cancelled: $elm$core$Maybe$Nothing, event: $elm$core$Maybe$Nothing, participants: $elm$core$Maybe$Nothing, participating: $elm$core$Maybe$Nothing, postId: $elm$core$Maybe$Nothing, requested: $elm$core$Maybe$Nothing};
var $author$project$State$Cache$addEventCancelledStatus = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Event$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyEventEntry,
			A2($elm$core$Dict$get, cacheId, cache.events));
		var updated = _Utils_update(
			entry,
			{
				cancelled: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				events: A3($elm$core$Dict$insert, cacheId, updated, cache.events)
			});
	});
var $author$project$State$Cache$addEventParticipationRequestStatus = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Event$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyEventEntry,
			A2($elm$core$Dict$get, cacheId, cache.events));
		var updated = _Utils_update(
			entry,
			{
				requested: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				events: A3($elm$core$Dict$insert, cacheId, updated, cache.events)
			});
	});
var $author$project$State$Cache$addEventParticipationStatus = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Event$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyEventEntry,
			A2($elm$core$Dict$get, cacheId, cache.events));
		var updated = _Utils_update(
			entry,
			{
				participating: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				events: A3($elm$core$Dict$insert, cacheId, updated, cache.events)
			});
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $author$project$Data$Hashtag$toString = function (_v0) {
	var ht = _v0.a;
	return ht;
};
var $author$project$State$Cache$addFollowingHashtag = F2(
	function (cache, hashtag) {
		return _Utils_update(
			cache,
			{
				followingHashtags: A2(
					$elm$core$Set$insert,
					$author$project$Data$Hashtag$toString(hashtag),
					cache.followingHashtags)
			});
	});
var $author$project$State$Cache$addFollowingUser = F2(
	function (cache, user) {
		return _Utils_update(
			cache,
			{
				followingUsers: A2(
					$elm$core$Set$insert,
					$author$project$Data$User$toString(user),
					cache.followingUsers)
			});
	});
var $author$project$State$Cache$increment = function (counter) {
	if (counter.$ === 'Just') {
		var n = counter.a;
		return $elm$core$Maybe$Just(n + 1);
	} else {
		return $elm$core$Maybe$Just(1);
	}
};
var $author$project$State$Cache$addLike = F2(
	function (cache, postId) {
		return _Utils_update(
			cache,
			{
				likeCount: A3(
					$elm$core$Dict$update,
					$author$project$Data$Post$toString(postId),
					$author$project$State$Cache$increment,
					cache.likeCount),
				liked: A2(
					$elm$core$Set$insert,
					$author$project$Data$Post$toString(postId),
					cache.liked)
			});
	});
var $author$project$State$Cache$addPinned = F2(
	function (cache, postId) {
		return _Utils_update(
			cache,
			{
				pinned: A2(
					$elm$core$Set$insert,
					$author$project$Data$Post$toString(postId),
					cache.pinned)
			});
	});
var $author$project$State$Cache$addUser = F3(
	function (cache, id, content) {
		return _Utils_update(
			cache,
			{
				users: A3(
					$elm$core$Dict$insert,
					$author$project$Data$User$toString(id),
					content,
					cache.users)
			});
	});
var $author$project$Update$Logic$allOf = F2(
	function (commands, state) {
		return _Utils_Tuple2(
			state,
			$elm$core$Platform$Cmd$batch(commands));
	});
var $author$project$Update$Msg$HttpPollAnswered = function (a) {
	return {$: 'HttpPollAnswered', a: a};
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Data$Poll$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$Query$Poll$answerPoll = F3(
	function (user, pollId, optionIndex) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'poll',
								'answer',
								$author$project$Data$Poll$toString(pollId),
								$elm$core$String$fromInt(optionIndex)
							]),
						_List_Nil))
			});
	});
var $author$project$State$Cache$getPoll = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.poll;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Poll$toString(id),
				cache.polls));
	});
var $elm$core$Debug$log = _Debug_log;
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Data$Poll$optionIndex = F2(
	function (poll, option) {
		return A2(
			$elm$core$Maybe$map,
			function (_v1) {
				var index = _v1.a;
				return index + 1;
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var opt = _v0.b;
						return _Utils_eq(opt, option);
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (index, opt) {
								return _Utils_Tuple2(index, opt);
							}),
						poll.options))));
	});
var $author$project$Query$Poll$answerPollOption = F4(
	function (cache, user, pollId, option) {
		var maybeIndex = A2(
			$elm$core$Maybe$andThen,
			function (poll) {
				return A2($author$project$Data$Poll$optionIndex, poll, option);
			},
			A2($author$project$State$Cache$getPoll, cache, pollId));
		if (maybeIndex.$ === 'Just') {
			var index = maybeIndex.a;
			return A2(
				$elm$core$Task$attempt,
				$author$project$Update$Msg$HttpPollAnswered,
				A3($author$project$Query$Poll$answerPoll, user, pollId, index));
		} else {
			return A2(
				$elm$core$Debug$log,
				'Couldn\'t retrieve Option index for Poll with id' + $author$project$Data$Poll$toString(pollId),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$State$SearchState$AllPostTypes = {$: 'AllPostTypes'};
var $author$project$State$SearchState$ByHashtag = F2(
	function (a, b) {
		return {$: 'ByHashtag', a: a, b: b};
	});
var $author$project$State$SearchState$ByUserPrefix = function (a) {
	return {$: 'ByUserPrefix', a: a};
};
var $author$project$Data$Hashtag$Hashtag = function (a) {
	return {$: 'Hashtag', a: a};
};
var $elm$core$String$trim = _String_trim;
var $author$project$State$SearchState$isOneUserPseudoPrefix = function (str) {
	return A2(
		$elm$core$String$startsWith,
		'@',
		$elm$core$String$trim(str)) && ($elm$core$List$length(
		A2($elm$core$String$split, ' ', str)) === 1);
};
var $author$project$State$SearchState$toSearchFilter = function (str) {
	return ($elm$core$String$trim(str) === '') ? $author$project$State$SearchState$EmptySearch : ($author$project$State$SearchState$isOneUserPseudoPrefix(str) ? $author$project$State$SearchState$ByUserPrefix(
		A2(
			$elm$core$String$dropLeft,
			1,
			$elm$core$String$trim(str))) : function (x) {
		return A2($author$project$State$SearchState$ByHashtag, x, $author$project$State$SearchState$AllPostTypes);
	}(
		A2(
			$elm$core$List$map,
			$author$project$Data$Hashtag$Hashtag,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
					$elm$core$String$trim),
				A2($elm$core$String$split, ' ', str)))));
};
var $author$project$State$SearchState$applyInput = function (state) {
	return _Utils_update(
		state,
		{
			currentPage: $author$project$Data$Page$first,
			field: '',
			filter: $author$project$State$SearchState$toSearchFilter(state.field),
			history: A2($elm$core$List$cons, state.filter, state.history),
			postCache: $author$project$State$PageCache$empty,
			userCache: $author$project$State$PageCache$empty
		});
};
var $author$project$Update$Msg$HttpEventCancelled = function (a) {
	return {$: 'HttpEventCancelled', a: a};
};
var $author$project$Query$Event$cancelEvent = F3(
	function (cache, user, eventId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventCancelled,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					return eventId;
				},
				$elm$http$Http$task(
					{
						body: $elm$http$Http$emptyBody,
						headers: _List_fromArray(
							[
								$author$project$Query$QueryUtils$authHeader(user)
							]),
						method: 'POST',
						resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
						timeout: $elm$core$Maybe$Nothing,
						url: _Utils_ap(
							$author$project$Query$QueryUtils$baseUrl,
							A2(
								$elm$url$Url$Builder$absolute,
								_List_fromArray(
									['event', 'cancel']),
								_List_fromArray(
									[
										A2(
										$elm$url$Url$Builder$string,
										'event-id',
										$author$project$Data$Event$toString(eventId))
									])))
					})));
	});
var $author$project$Update$Msg$HttpEventParticipationRequestCancelled = function (a) {
	return {$: 'HttpEventParticipationRequestCancelled', a: a};
};
var $author$project$Query$Event$cancelParticipation = F3(
	function (cache, user, eventId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventParticipationRequestCancelled,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					return eventId;
				},
				$elm$http$Http$task(
					{
						body: $elm$http$Http$emptyBody,
						headers: _List_fromArray(
							[
								$author$project$Query$QueryUtils$authHeader(user)
							]),
						method: 'POST',
						resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
						timeout: $elm$core$Maybe$Nothing,
						url: _Utils_ap(
							$author$project$Query$QueryUtils$baseUrl,
							A2(
								$elm$url$Url$Builder$absolute,
								_List_fromArray(
									['event', 'participation', 'cancel']),
								_List_fromArray(
									[
										A2(
										$elm$url$Url$Builder$string,
										'event-id',
										$author$project$Data$Event$toString(eventId))
									])))
					})));
	});
var $author$project$State$SearchState$ByAuthor = F2(
	function (a, b) {
		return {$: 'ByAuthor', a: a, b: b};
	});
var $author$project$State$SearchState$changePostTypeFilter = F2(
	function (state, postType) {
		var newFilter = function () {
			var _v0 = state.filter;
			switch (_v0.$) {
				case 'ByHashtag':
					var hashtags = _v0.a;
					return A2($author$project$State$SearchState$ByHashtag, hashtags, postType);
				case 'ByAuthor':
					var userId = _v0.a;
					return A2($author$project$State$SearchState$ByAuthor, userId, postType);
				default:
					var unchanged = _v0;
					return unchanged;
			}
		}();
		return _Utils_update(
			state,
			{currentPage: $author$project$Data$Page$first, filter: newFilter, postCache: $author$project$State$PageCache$empty, userCache: $author$project$State$PageCache$empty});
	});
var $author$project$State$ChallengeState$changeTab = F2(
	function (tab, state) {
		return _Utils_update(
			state,
			{currentPage: $author$project$Data$Page$first, currentTab: tab, postCache: $author$project$State$PageCache$empty});
	});
var $author$project$State$EventDetailsState$changeTab = F2(
	function (tab, state) {
		return _Utils_update(
			state,
			{currentPage: $author$project$Data$Page$first, currentTab: tab, userCache: $author$project$State$PageCache$empty});
	});
var $author$project$State$EventState$changeTab = F2(
	function (tab, state) {
		return _Utils_update(
			state,
			{currentPage: $author$project$Data$Page$first, currentTab: tab, postCache: $author$project$State$PageCache$empty});
	});
var $author$project$State$NotificationState$changeTab = F2(
	function (tab, state) {
		return _Utils_update(
			state,
			{currentPage: $author$project$Data$Page$first, currentTab: tab, latest: $author$project$State$PageCache$empty, unread: false});
	});
var $author$project$Update$Msg$HttpPseudoAvailabilityChecked = function (a) {
	return {$: 'HttpPseudoAvailabilityChecked', a: a};
};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Query$Registration$checkPseudoAvailability = function (pseudo) {
	return A2(
		$elm$core$Task$attempt,
		$author$project$Update$Msg$HttpPseudoAvailabilityChecked,
		A2(
			$elm$core$Task$map,
			function (checked) {
				return _Utils_Tuple2(pseudo, checked);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_Nil,
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['registration', 'check-availability', 'pseudo', pseudo]),
							_List_Nil))
				})));
};
var $author$project$State$FormState$checkingPseudoAvailability = function (formState) {
	var registrationForm = formState.registrationForm;
	return _Utils_update(
		formState,
		{
			registrationForm: _Utils_update(
				registrationForm,
				{
					checkingPseudo: $elm$core$Maybe$Just(true),
					serverValidatedPseudo: $elm$core$Maybe$Nothing
				})
		});
};
var $mdgriffith$elm_ui$Element$BigDesktop = {$: 'BigDesktop'};
var $mdgriffith$elm_ui$Element$Landscape = {$: 'Landscape'};
var $mdgriffith$elm_ui$Element$Phone = {$: 'Phone'};
var $mdgriffith$elm_ui$Element$Tablet = {$: 'Tablet'};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Element$classifyDevice = function (window) {
	return {
		_class: function () {
			var shortSide = A2($elm$core$Basics$min, window.width, window.height);
			var longSide = A2($elm$core$Basics$max, window.width, window.height);
			return (shortSide < 600) ? $mdgriffith$elm_ui$Element$Phone : ((longSide <= 1200) ? $mdgriffith$elm_ui$Element$Tablet : (((longSide > 1200) && (longSide <= 1920)) ? $mdgriffith$elm_ui$Element$Desktop : $mdgriffith$elm_ui$Element$BigDesktop));
		}(),
		orientation: (_Utils_cmp(window.width, window.height) < 0) ? $mdgriffith$elm_ui$Element$Portrait : $mdgriffith$elm_ui$Element$Landscape
	};
};
var $author$project$State$FormState$clearNewChallengeWizardState = function (formState) {
	return _Utils_update(
		formState,
		{newChallengeWizard: $author$project$State$FormState$emptyChallengeWizard});
};
var $author$project$State$FormState$clearNewEventWizardState = function (formState) {
	return _Utils_update(
		formState,
		{newEventWizard: $author$project$State$FormState$emptyEventWizard});
};
var $author$project$State$FormState$clearNewFreeTextWizardState = function (formState) {
	return _Utils_update(
		formState,
		{newFreeTextWizard: $author$project$State$FormState$emptyFreeTextWizard});
};
var $author$project$State$FormState$clearNewPollWizardState = function (formState) {
	return _Utils_update(
		formState,
		{newPollWizard: $author$project$State$FormState$emptyPollWizard});
};
var $author$project$State$FormState$clearNewRepostWizardState = function (formState) {
	return _Utils_update(
		formState,
		{newRepostWizard: $author$project$State$FormState$emptyRepostWizard});
};
var $author$project$State$FormState$clearNewTipWizardState = function (formState) {
	return _Utils_update(
		formState,
		{newTipWizard: $author$project$State$FormState$emptyTipWizard});
};
var $author$project$Update$Logic$cmd = F2(
	function (command, state) {
		return _Utils_Tuple2(state, command);
	});
var $author$project$Update$Msg$NoOp = {$: 'NoOp'};
var $author$project$Update$Msg$SetCurrentTime = function (a) {
	return {$: 'SetCurrentTime', a: a};
};
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$Query$Clock$currentTime = A2(
	$elm$core$Task$attempt,
	function (x) {
		if (x.$ === 'Ok') {
			var tmstp = x.a;
			return $author$project$Update$Msg$SetCurrentTime(tmstp);
		} else {
			return $author$project$Update$Msg$NoOp;
		}
	},
	A2(
		$elm$core$Task$map,
		$author$project$Data$Schedule$UTC,
		A2($elm$core$Task$map, $elm$time$Time$posixToMillis, $elm$time$Time$now)));
var $author$project$Query$QueryUtils$errorToString = function (error) {
	switch (error.$) {
		case 'BadUrl':
			var url = error.a;
			return 'URL \'' + (url + '\' was invalid');
		case 'Timeout':
			return 'Timeout';
		case 'NetworkError':
			return 'Unable to reach the server';
		case 'BadStatus':
			if (error.a === 500) {
				return 'Internal error';
			} else {
				return 'Unknown error';
			}
		default:
			var err = error.a;
			return err;
	}
};
var $author$project$Update$Logic$feedDelay = 30000.0;
var $author$project$Update$Msg$HttpConversationPageFetched = function (a) {
	return {$: 'HttpConversationPageFetched', a: a};
};
var $author$project$State$Cache$emptyFlaggedMessageEntry = {flagged: false, flaggedByUser: false};
var $author$project$Data$Conversation$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$State$Cache$setFlagged = F3(
	function (cache, id, flag) {
		var cacheId = $author$project$Data$Conversation$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyFlaggedMessageEntry,
			A2($elm$core$Dict$get, cacheId, cache.flaggedMessages));
		var updated = _Utils_update(
			entry,
			{flagged: flag});
		return _Utils_update(
			cache,
			{
				flaggedMessages: A3($elm$core$Dict$insert, cacheId, updated, cache.flaggedMessages)
			});
	});
var $author$project$Query$Conversation$fetchMessageAndCacheFlagged = F3(
	function (cache, user, messageId) {
		return A2(
			$elm$core$Task$map,
			A2($author$project$State$Cache$setFlagged, cache, messageId),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'conversation',
									'message',
									'is-flagged',
									$author$project$Data$Conversation$toString(messageId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Utils$DictUtils$merge = F3(
	function (mergefn, dict1, dict2) {
		var k2 = $elm$core$Dict$keys(dict2);
		var k1 = $elm$core$Dict$keys(dict1);
		var keys = $author$project$Utils$ListUtils$unique(
			_Utils_ap(k1, k2));
		var f = F2(
			function (key, acc) {
				var _v0 = _Utils_Tuple2(
					A2($elm$core$Dict$get, key, dict1),
					A2($elm$core$Dict$get, key, dict2));
				if (_v0.a.$ === 'Nothing') {
					if (_v0.b.$ === 'Nothing') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return acc;
					} else {
						var _v4 = _v0.a;
						var v = _v0.b.a;
						return A3($elm$core$Dict$insert, key, v, acc);
					}
				} else {
					if (_v0.b.$ === 'Nothing') {
						var v = _v0.a.a;
						var _v3 = _v0.b;
						return A3($elm$core$Dict$insert, key, v, acc);
					} else {
						var v1 = _v0.a.a;
						var v2 = _v0.b.a;
						return A3(
							$elm$core$Dict$insert,
							key,
							A2(mergefn, v1, v2),
							acc);
					}
				}
			});
		return A3($elm$core$List$foldl, f, $elm$core$Dict$empty, keys);
	});
var $author$project$State$Cache$mergeList = F2(
	function (a, b) {
		var _v0 = _Utils_Tuple2(a, b);
		if (!_v0.a.b) {
			return b;
		} else {
			if (!_v0.b.b) {
				return a;
			} else {
				return a;
			}
		}
	});
var $author$project$State$Cache$mergeMaybe = F2(
	function (a, b) {
		var _v0 = _Utils_Tuple2(a, b);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'Nothing') {
				var x = _v0.a.a;
				var _v1 = _v0.b;
				return $elm$core$Maybe$Just(x);
			} else {
				var x = _v0.a.a;
				return $elm$core$Maybe$Just(x);
			}
		} else {
			if (_v0.b.$ === 'Just') {
				var _v2 = _v0.a;
				var x = _v0.b.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var _v3 = _v0.a;
				var _v4 = _v0.b;
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $author$project$State$Cache$mergeChallengeCacheEntries = F2(
	function (a, b) {
		return {
			challenge: A2($author$project$State$Cache$mergeMaybe, a.challenge, b.challenge),
			outcomeStatus: A2($author$project$State$Cache$mergeMaybe, a.outcomeStatus, b.outcomeStatus),
			reportDates: A2($author$project$State$Cache$mergeList, a.reportDates, b.reportDates),
			statistics: A2($author$project$State$Cache$mergeMaybe, a.statistics, b.statistics),
			status: A2($author$project$State$Cache$mergeMaybe, a.status, b.status),
			stepReports: A2($author$project$State$Cache$mergeList, a.stepReports, b.stepReports),
			summary: A2($author$project$State$Cache$mergeMaybe, a.summary, b.summary)
		};
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$union, dict1, dict2));
	});
var $author$project$State$Cache$mergeConversationCacheEntries = F2(
	function (a, b) {
		return {
			comment: A2($author$project$State$Cache$mergeMaybe, a.comment, b.comment),
			flagged: A2($elm$core$Set$union, a.flagged, b.flagged),
			messageCount: A2($elm$core$Basics$max, a.messageCount, b.messageCount),
			messages: A2($author$project$State$Cache$mergeList, a.messages, b.messages),
			opened: a.opened || b.opened,
			postId: A2($author$project$State$Cache$mergeMaybe, a.postId, b.postId)
		};
	});
var $author$project$State$Cache$mergeEventCacheEntries = F2(
	function (a, b) {
		return {
			cancelled: A2($author$project$State$Cache$mergeMaybe, a.cancelled, b.cancelled),
			event: A2($author$project$State$Cache$mergeMaybe, a.event, b.event),
			participants: A2($author$project$State$Cache$mergeMaybe, a.participants, b.participants),
			participating: A2($author$project$State$Cache$mergeMaybe, a.participating, b.participating),
			postId: A2($author$project$State$Cache$mergeMaybe, a.postId, b.postId),
			requested: A2($author$project$State$Cache$mergeMaybe, a.requested, b.requested)
		};
	});
var $author$project$State$Cache$mergeFlaggedEntries = F2(
	function (a, b) {
		return {flagged: a.flagged || b.flagged, flaggedByUser: a.flaggedByUser || b.flaggedByUser};
	});
var $author$project$State$Cache$mergeLikeCounts = F2(
	function (a, b) {
		var maxValue = function (key) {
			return A2(
				$elm$core$Basics$max,
				A2(
					$elm$core$Maybe$withDefault,
					0,
					A2($elm$core$Dict$get, key, a)),
				A2(
					$elm$core$Maybe$withDefault,
					0,
					A2($elm$core$Dict$get, key, b)));
		};
		var keys = _Utils_ap(
			$elm$core$Dict$keys(a),
			$elm$core$Dict$keys(b));
		return A3(
			$elm$core$List$foldl,
			F2(
				function (key, acc) {
					return A3(
						$elm$core$Dict$insert,
						key,
						maxValue(key),
						acc);
				}),
			$elm$core$Dict$empty,
			keys);
	});
var $author$project$State$Cache$mergePollCacheEntries = F2(
	function (a, b) {
		return {
			answered: A2($author$project$State$Cache$mergeMaybe, a.answered, b.answered),
			poll: A2($author$project$State$Cache$mergeMaybe, a.poll, b.poll),
			stats: A2($author$project$State$Cache$mergeMaybe, a.stats, b.stats)
		};
	});
var $author$project$Utils$MaybeUtils$orElse = F2(
	function (fallback, src) {
		if (src.$ === 'Nothing') {
			return fallback;
		} else {
			var x = src.a;
			return src;
		}
	});
var $author$project$State$Cache$merge = F2(
	function (a, b) {
		return {
			challenges: A3($author$project$Utils$DictUtils$merge, $author$project$State$Cache$mergeChallengeCacheEntries, a.challenges, b.challenges),
			conversations: A3($author$project$Utils$DictUtils$merge, $author$project$State$Cache$mergeConversationCacheEntries, a.conversations, b.conversations),
			events: A3($author$project$Utils$DictUtils$merge, $author$project$State$Cache$mergeEventCacheEntries, a.events, b.events),
			flaggedMessages: A3($author$project$Utils$DictUtils$merge, $author$project$State$Cache$mergeFlaggedEntries, a.flaggedMessages, b.flaggedMessages),
			followers: A2($elm$core$Set$union, a.followers, b.followers),
			followingHashtags: A2($elm$core$Set$union, a.followingHashtags, b.followingHashtags),
			followingUsers: A2($elm$core$Set$union, a.followingUsers, b.followingUsers),
			hashtagTrend: A2($author$project$Utils$MaybeUtils$orElse, b.hashtagTrend, a.hashtagTrend),
			likeCount: A2($author$project$State$Cache$mergeLikeCounts, a.likeCount, b.likeCount),
			liked: A2($elm$core$Set$union, a.liked, b.liked),
			partners: A2($elm$core$Dict$union, a.partners, b.partners),
			partnerships: A2($elm$core$Dict$union, a.partnerships, b.partnerships),
			pinned: A2($elm$core$Set$union, a.pinned, b.pinned),
			polls: A3($author$project$Utils$DictUtils$merge, $author$project$State$Cache$mergePollCacheEntries, a.polls, b.polls),
			posts: A2($elm$core$Dict$union, a.posts, b.posts),
			scores: A2($elm$core$Dict$union, a.scores, b.scores),
			tips: A2($elm$core$Dict$union, a.tips, b.tips),
			users: A2($elm$core$Dict$union, a.users, b.users)
		};
	});
var $author$project$Query$Conversation$fetchAndCacheAllMessagesFlagged = F3(
	function (cache, user, messages) {
		return A2(
			$elm$core$Task$andThen,
			function (xs) {
				return $elm$core$Task$succeed(
					A3($elm$core$List$foldl, $author$project$State$Cache$merge, cache, xs));
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					function (msg) {
						return A3($author$project$Query$Conversation$fetchMessageAndCacheFlagged, cache, user, msg.id);
					},
					messages)));
	});
var $author$project$State$Cache$setFlaggedByUser = F3(
	function (cache, id, flag) {
		var cacheId = $author$project$Data$Conversation$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyFlaggedMessageEntry,
			A2($elm$core$Dict$get, cacheId, cache.flaggedMessages));
		var updated = _Utils_update(
			entry,
			{flagged: entry.flagged || flag, flaggedByUser: flag});
		return _Utils_update(
			cache,
			{
				flaggedMessages: A3($elm$core$Dict$insert, cacheId, updated, cache.flaggedMessages)
			});
	});
var $author$project$Query$Conversation$fetchMessageAndCacheFlaggedByUser = F3(
	function (cache, user, messageId) {
		return A2(
			$elm$core$Task$map,
			A2($author$project$State$Cache$setFlaggedByUser, cache, messageId),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'conversation',
									'has',
									'user',
									'flagged',
									$author$project$Data$Conversation$toString(messageId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$Conversation$fetchAndCacheAllMessagesFlaggedByUser = F3(
	function (cache, user, messages) {
		return A2(
			$elm$core$Task$andThen,
			function (xs) {
				return $elm$core$Task$succeed(
					A3($elm$core$List$foldl, $author$project$State$Cache$merge, cache, xs));
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					function (msg) {
						return A3($author$project$Query$Conversation$fetchMessageAndCacheFlaggedByUser, cache, user, msg.id);
					},
					messages)));
	});
var $author$project$State$UserState$UserInfo = F6(
	function (id, pseudo, introduction, enabled, since, token) {
		return {enabled: enabled, id: id, introduction: introduction, pseudo: pseudo, since: since, token: token};
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Query$Json$UserDecoder$decodePseudo = A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$string);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$Query$Json$DecoderUtils$decodeTimestamp = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$elm$json$Json$Decode$int,
	$elm$json$Json$Decode$succeed($author$project$Data$Schedule$UTC));
var $author$project$Data$User$UserId = function (a) {
	return {$: 'UserId', a: a};
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $danyx23$elm_uuid$Uuid$Uuid = function (a) {
	return {$: 'Uuid', a: a};
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$contains = _Regex_contains;
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $danyx23$elm_uuid$Uuid$Barebones$uuidRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^[0-9A-Fa-f]{8,8}-[0-9A-Fa-f]{4,4}-[1-5][0-9A-Fa-f]{3,3}-[8-9A-Ba-b][0-9A-Fa-f]{3,3}-[0-9A-Fa-f]{12,12}$'));
var $danyx23$elm_uuid$Uuid$Barebones$isValidUuid = function (uuidAsString) {
	return A2($elm$regex$Regex$contains, $danyx23$elm_uuid$Uuid$Barebones$uuidRegex, uuidAsString);
};
var $elm$core$String$toLower = _String_toLower;
var $danyx23$elm_uuid$Uuid$fromString = function (text) {
	return $danyx23$elm_uuid$Uuid$Barebones$isValidUuid(text) ? $elm$core$Maybe$Just(
		$danyx23$elm_uuid$Uuid$Uuid(
			$elm$core$String$toLower(text))) : $elm$core$Maybe$Nothing;
};
var $danyx23$elm_uuid$Uuid$decoder = A2(
	$elm$json$Json$Decode$andThen,
	function (string) {
		var _v0 = $danyx23$elm_uuid$Uuid$fromString(string);
		if (_v0.$ === 'Just') {
			var uuid = _v0.a;
			return $elm$json$Json$Decode$succeed(uuid);
		} else {
			return $elm$json$Json$Decode$fail('Not a valid UUID');
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Query$Json$DecoderUtils$decodeUuid = A2($elm$json$Json$Decode$field, 'uuid', $danyx23$elm_uuid$Uuid$decoder);
var $author$project$Query$Json$DecoderUtils$decodeUserId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$User$UserId));
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded = A2($elm$core$Basics$composeR, $elm$json$Json$Decode$succeed, $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom);
var $author$project$Query$Json$UserDecoder$decodeUserProfile = function (token) {
	return A2(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
		token,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'since',
			$author$project$Query$Json$DecoderUtils$decodeTimestamp,
			A2(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
				true,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'intro',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'pseudo',
						$author$project$Query$Json$UserDecoder$decodePseudo,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'id',
							$author$project$Query$Json$DecoderUtils$decodeUserId,
							$elm$json$Json$Decode$succeed($author$project$State$UserState$UserInfo)))))));
};
var $author$project$Query$CacheQueryUtils$fetchAndCacheUserInfo = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addUser, cache, res.id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$author$project$Query$Json$UserDecoder$decodeUserProfile(user.token)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'user',
									'profile',
									$author$project$Data$User$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Data$Conversation$usersFromMessages = function (messages) {
	return $author$project$Utils$ListUtils$unique(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.author;
			},
			messages));
};
var $author$project$Query$Conversation$fetchAndCacheAllUsersFromMessages = F3(
	function (cache, user, messages) {
		return A2(
			$elm$core$Task$andThen,
			function (xs) {
				return $elm$core$Task$succeed(
					A3($elm$core$List$foldl, $author$project$State$Cache$merge, cache, xs));
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					function (id) {
						return A3($author$project$Query$CacheQueryUtils$fetchAndCacheUserInfo, cache, user, id);
					},
					$author$project$Data$Conversation$usersFromMessages(messages))));
	});
var $author$project$Data$Conversation$Message = F4(
	function (id, author, timestamp, content) {
		return {author: author, content: content, id: id, timestamp: timestamp};
	});
var $author$project$Data$Conversation$MessageId = function (a) {
	return {$: 'MessageId', a: a};
};
var $author$project$Query$Json$ConversationDecoder$decodeMessageId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Conversation$MessageId));
var $author$project$Query$Json$ConversationDecoder$decodeMessage = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'content',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'timestamp',
		$author$project$Query$Json$DecoderUtils$decodeTimestamp,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'user',
			$author$project$Query$Json$DecoderUtils$decodeUserId,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'id',
				$author$project$Query$Json$ConversationDecoder$decodeMessageId,
				$elm$json$Json$Decode$succeed($author$project$Data$Conversation$Message)))));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$Query$Json$ConversationDecoder$decodeMessages = $elm$json$Json$Decode$list($author$project$Query$Json$ConversationDecoder$decodeMessage);
var $author$project$Data$Page$number = function (_v0) {
	var n = _v0.a;
	return n;
};
var $author$project$Query$Conversation$fetchConversationPage = F3(
	function (user, postId, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$ConversationDecoder$decodeMessages),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'conversation',
								'for-post',
								$author$project$Data$Post$toString(postId),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$TaskUtils$thread = F2(
	function (a, task) {
		return A2(
			$elm$core$Task$map,
			function (b) {
				return _Utils_Tuple2(b, a);
			},
			task);
	});
var $author$project$Query$Conversation$fetchAndCacheConversation = F4(
	function (cache, user, postId, page) {
		return A2(
			$elm$core$Task$map,
			function (_v2) {
				var cache3 = _v2.a;
				var messages = _v2.b;
				return _Utils_Tuple2(
					cache3,
					{messages: messages, page: page, postId: postId});
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					var cache2 = _v1.a;
					var messages = _v1.b;
					return A2(
						$author$project$Query$TaskUtils$thread,
						messages,
						A3($author$project$Query$Conversation$fetchAndCacheAllMessagesFlaggedByUser, cache2, user, messages));
				},
				A2(
					$elm$core$Task$andThen,
					function (_v0) {
						var cache1 = _v0.a;
						var messages = _v0.b;
						return A2(
							$author$project$Query$TaskUtils$thread,
							messages,
							A3($author$project$Query$Conversation$fetchAndCacheAllMessagesFlagged, cache1, user, messages));
					},
					A2(
						$elm$core$Task$andThen,
						function (messages) {
							return A2(
								$author$project$Query$TaskUtils$thread,
								messages,
								A3($author$project$Query$Conversation$fetchAndCacheAllUsersFromMessages, cache, user, messages));
						},
						A3($author$project$Query$Conversation$fetchConversationPage, user, postId, page)))));
	});
var $author$project$Query$Conversation$fetchConversation = F4(
	function (cache, user, postId, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpConversationPageFetched,
			A4($author$project$Query$Conversation$fetchAndCacheConversation, cache, user, postId, page));
	});
var $author$project$Update$Msg$HttpEventParticipantsFetched = function (a) {
	return {$: 'HttpEventParticipantsFetched', a: a};
};
var $author$project$State$EventDetailsState$ParticipantsTab = {$: 'ParticipantsTab'};
var $author$project$Query$CacheQueryUtils$fetchAndCacheAllUsers = F3(
	function (cache, user, userIds) {
		return A2(
			$elm$core$Task$andThen,
			function (xs) {
				return $elm$core$Task$succeed(
					A3($elm$core$List$foldl, $author$project$State$Cache$merge, cache, xs));
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					function (userId) {
						return A3($author$project$Query$CacheQueryUtils$fetchAndCacheUserInfo, cache, user, userId);
					},
					userIds)));
	});
var $author$project$Query$Event$fetchParticipants = F3(
	function (user, eventId, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$DecoderUtils$decodeUserId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'event',
								'participation',
								'participants',
								$author$project$Data$Event$toString(eventId),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Event$fetchAllParticipants = F4(
	function (cache, user, eventId, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventParticipantsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventDetailsState$ParticipantsTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$CacheQueryUtils$fetchAndCacheAllUsers, cache, user, ids));
					},
					A3($author$project$Query$Event$fetchParticipants, user, eventId, page))));
	});
var $author$project$Update$Msg$HttpEventPendingRequestsFetched = function (a) {
	return {$: 'HttpEventPendingRequestsFetched', a: a};
};
var $author$project$State$EventDetailsState$PendingRequestsTab = {$: 'PendingRequestsTab'};
var $author$project$Query$Event$fetchPendingRequests = F3(
	function (user, eventId, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$DecoderUtils$decodeUserId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'event',
								'participation',
								'requests',
								$author$project$Data$Event$toString(eventId),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Event$fetchAllPendingRequests = F4(
	function (cache, user, eventId, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventPendingRequestsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventDetailsState$PendingRequestsTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$CacheQueryUtils$fetchAndCacheAllUsers, cache, user, ids));
					},
					A3($author$project$Query$Event$fetchPendingRequests, user, eventId, page))));
	});
var $author$project$Data$Post$PostId = function (a) {
	return {$: 'PostId', a: a};
};
var $author$project$Query$Json$PostDecoder$decodePostId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Post$PostId));
var $author$project$Query$Event$fetchEventPost = F2(
	function (user, id) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$PostDecoder$decodePostId),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'post',
								'by-content',
								'event',
								$author$project$Data$Event$toString(id)
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Event$fetchEventConversation = F4(
	function (cache, user, eventId, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpConversationPageFetched,
			A2(
				$elm$core$Task$andThen,
				function (postId) {
					return A4($author$project$Query$Conversation$fetchAndCacheConversation, cache, user, postId, page);
				},
				A2($author$project$Query$Event$fetchEventPost, user, eventId)));
	});
var $author$project$Update$Msg$HttpEventDetailsFetched = function (a) {
	return {$: 'HttpEventDetailsFetched', a: a};
};
var $author$project$State$Cache$addEvent = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Event$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyEventEntry,
			A2($elm$core$Dict$get, cacheId, cache.events));
		var updated = _Utils_update(
			entry,
			{
				event: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				events: A3($elm$core$Dict$insert, cacheId, updated, cache.events)
			});
	});
var $author$project$Data$Event$Event = F6(
	function (id, owner, description, maxParticipants, schedule, location) {
		return {description: description, id: id, location: location, maxParticipants: maxParticipants, owner: owner, schedule: schedule};
	});
var $author$project$Data$Event$EventId = function (a) {
	return {$: 'EventId', a: a};
};
var $author$project$Query$Json$EventDecoder$decodeEventId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Event$EventId));
var $author$project$Data$Location$GeoLocation = F2(
	function (a, b) {
		return {$: 'GeoLocation', a: a, b: b};
	});
var $author$project$Data$Location$Latitude = function (a) {
	return {$: 'Latitude', a: a};
};
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $author$project$Query$Json$LocationDecoder$decodeLatitude = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$elm$json$Json$Decode$float,
	$elm$json$Json$Decode$succeed($author$project$Data$Location$Latitude));
var $author$project$Data$Location$Longitude = function (a) {
	return {$: 'Longitude', a: a};
};
var $author$project$Query$Json$LocationDecoder$decodeLongitude = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$elm$json$Json$Decode$float,
	$elm$json$Json$Decode$succeed($author$project$Data$Location$Longitude));
var $author$project$Query$Json$LocationDecoder$decodeGeoLocation = A2(
	$elm$json$Json$Decode$field,
	'GeoLocation',
	A2(
		$elm$json$Json$Decode$field,
		'coordinates',
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'longitude',
			$author$project$Query$Json$LocationDecoder$decodeLongitude,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'latitude',
				$author$project$Query$Json$LocationDecoder$decodeLatitude,
				$elm$json$Json$Decode$succeed($author$project$Data$Location$GeoLocation)))));
var $author$project$Data$Location$MapUrl = function (a) {
	return {$: 'MapUrl', a: a};
};
var $author$project$Data$Url$Url = function (a) {
	return {$: 'Url', a: a};
};
var $author$project$Query$Json$SourceDecoder$decodeUrl = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'url',
	$elm$json$Json$Decode$string,
	$elm$json$Json$Decode$succeed($author$project$Data$Url$Url));
var $author$project$Query$Json$LocationDecoder$decodeMapUrl = A2(
	$elm$json$Json$Decode$field,
	'MapUrl',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'url',
		$author$project$Query$Json$SourceDecoder$decodeUrl,
		$elm$json$Json$Decode$succeed($author$project$Data$Location$MapUrl)));
var $author$project$Data$Location$Online = function (a) {
	return {$: 'Online', a: a};
};
var $author$project$Query$Json$LocationDecoder$decodeOnline = A2(
	$elm$json$Json$Decode$field,
	'Online',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'url',
		$author$project$Query$Json$SourceDecoder$decodeUrl,
		$elm$json$Json$Decode$succeed($author$project$Data$Location$Online)));
var $author$project$Data$Location$Address = F3(
	function (a, b, c) {
		return {$: 'Address', a: a, b: b, c: c};
	});
var $author$project$Data$Location$Country = function (a) {
	return {$: 'Country', a: a};
};
var $author$project$Query$Json$LocationDecoder$decodeCountry = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'name',
	$elm$json$Json$Decode$string,
	$elm$json$Json$Decode$succeed($author$project$Data$Location$Country));
var $author$project$Data$Location$ZipCode = function (a) {
	return {$: 'ZipCode', a: a};
};
var $author$project$Query$Json$LocationDecoder$decodeZipCode = A2($elm$json$Json$Decode$map, $author$project$Data$Location$ZipCode, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$Query$Json$LocationDecoder$decodePhysicalAddress = A2(
	$elm$json$Json$Decode$field,
	'Address',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'country',
		$author$project$Query$Json$LocationDecoder$decodeCountry,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'zipCode',
			$elm$json$Json$Decode$maybe($author$project$Query$Json$LocationDecoder$decodeZipCode),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'address',
				$elm$json$Json$Decode$maybe($elm$json$Json$Decode$string),
				$elm$json$Json$Decode$succeed($author$project$Data$Location$Address)))));
var $author$project$Query$Json$LocationDecoder$decodeLocation = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$LocationDecoder$decodeOnline, $author$project$Query$Json$LocationDecoder$decodeMapUrl, $author$project$Query$Json$LocationDecoder$decodeGeoLocation, $author$project$Query$Json$LocationDecoder$decodePhysicalAddress]));
var $author$project$Data$Schedule$OneOff = F2(
	function (a, b) {
		return {$: 'OneOff', a: a, b: b};
	});
var $author$project$Query$Json$ScheduleDecoder$decodeOneOff = A2(
	$elm$json$Json$Decode$field,
	'OneOff',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'end',
		$author$project$Query$Json$DecoderUtils$decodeTimestamp,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'start',
			$author$project$Query$Json$DecoderUtils$decodeTimestamp,
			$elm$json$Json$Decode$succeed($author$project$Data$Schedule$OneOff))));
var $author$project$Data$Schedule$Recurring = F4(
	function (a, b, c, d) {
		return {$: 'Recurring', a: a, b: b, c: c, d: d};
	});
var $author$project$Data$Schedule$Duration = function (a) {
	return {$: 'Duration', a: a};
};
var $author$project$Query$Json$ScheduleDecoder$decodeDuration = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'millis',
	$elm$json$Json$Decode$int,
	$elm$json$Json$Decode$succeed($author$project$Data$Schedule$Duration));
var $author$project$Query$Json$ScheduleDecoder$decodeRecurring = A2(
	$elm$json$Json$Decode$field,
	'Recurring',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'until',
		$author$project$Query$Json$DecoderUtils$decodeTimestamp,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'every',
			$author$project$Query$Json$ScheduleDecoder$decodeDuration,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'duration',
				$author$project$Query$Json$ScheduleDecoder$decodeDuration,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'first',
					$author$project$Query$Json$DecoderUtils$decodeTimestamp,
					$elm$json$Json$Decode$succeed($author$project$Data$Schedule$Recurring))))));
var $author$project$Query$Json$ScheduleDecoder$decodeSchedule = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$ScheduleDecoder$decodeOneOff, $author$project$Query$Json$ScheduleDecoder$decodeRecurring]));
var $author$project$Query$Json$EventDecoder$decodeEvent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'location',
	$author$project$Query$Json$LocationDecoder$decodeLocation,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'schedule',
		$author$project$Query$Json$ScheduleDecoder$decodeSchedule,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'maxParticipants',
			$elm$json$Json$Decode$int,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'description',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'owner',
					$author$project$Query$Json$DecoderUtils$decodeUserId,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'id',
						$author$project$Query$Json$EventDecoder$decodeEventId,
						$elm$json$Json$Decode$succeed($author$project$Data$Event$Event)))))));
var $author$project$Query$CacheQueryUtils$fetchAndCacheEvent = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addEvent, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$EventDecoder$decodeEvent),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'event',
									'by-id',
									$author$project$Data$Event$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheEventCancelledStatus = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addEventCancelledStatus, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'event',
									'is-cancelled',
									$author$project$Data$Event$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$State$Cache$addEventParticipantCount = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Event$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyEventEntry,
			A2($elm$core$Dict$get, cacheId, cache.events));
		var updated = _Utils_update(
			entry,
			{
				participants: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				events: A3($elm$core$Dict$insert, cacheId, updated, cache.events)
			});
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheEventParticipantCount = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addEventParticipantCount, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$int),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'event',
									'participation',
									'count',
									$author$project$Data$Event$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheEventParticipationRequestStatus = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addEventParticipationRequestStatus, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'event',
									'participation',
									'is-requested',
									$author$project$Data$Event$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheEventParticipationStatus = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addEventParticipationStatus, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'event',
									'is-participating',
									$author$project$Data$Event$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$Event$fetchAndCacheEventDetails = F3(
	function (cache, user, eventId) {
		return A2(
			$elm$core$Task$andThen,
			function (cache4) {
				return A3($author$project$Query$CacheQueryUtils$fetchAndCacheEventParticipantCount, cache4, user, eventId);
			},
			A2(
				$elm$core$Task$andThen,
				function (cache3) {
					return A3($author$project$Query$CacheQueryUtils$fetchAndCacheEventParticipationRequestStatus, cache3, user, eventId);
				},
				A2(
					$elm$core$Task$andThen,
					function (cache2) {
						return A3($author$project$Query$CacheQueryUtils$fetchAndCacheEventCancelledStatus, cache2, user, eventId);
					},
					A2(
						$elm$core$Task$andThen,
						function (cache1) {
							return A3($author$project$Query$CacheQueryUtils$fetchAndCacheEventParticipationStatus, cache1, user, eventId);
						},
						A3($author$project$Query$CacheQueryUtils$fetchAndCacheEvent, cache, user, eventId)))));
	});
var $author$project$Query$Event$fetchEventDetails = F3(
	function (cache, user, eventId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventDetailsFetched,
			A2(
				$elm$core$Task$map,
				function (c) {
					return _Utils_Tuple2(c, eventId);
				},
				A3($author$project$Query$Event$fetchAndCacheEventDetails, cache, user, eventId)));
	});
var $author$project$Query$Event$fetchEventDetailsContentForTab = F4(
	function (cache, user, eventId, pagedTab) {
		var _v0 = pagedTab.tab;
		switch (_v0.$) {
			case 'EventDetailsTab':
				return A3($author$project$Query$Event$fetchEventDetails, cache, user, eventId);
			case 'PendingRequestsTab':
				return A4($author$project$Query$Event$fetchAllPendingRequests, cache, user, eventId, pagedTab.page);
			case 'ParticipantsTab':
				return A4($author$project$Query$Event$fetchAllParticipants, cache, user, eventId, pagedTab.page);
			default:
				return A4($author$project$Query$Event$fetchEventConversation, cache, user, eventId, pagedTab.page);
		}
	});
var $author$project$Update$Msg$HttpNotificationsFetched = function (a) {
	return {$: 'HttpNotificationsFetched', a: a};
};
var $author$project$Data$Notification$Read = {$: 'Read'};
var $author$project$Query$Json$NotificationDecoder$decodeRead = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Notification$Read;
	},
	A2(
		$elm$json$Json$Decode$field,
		'Read',
		A2($elm$json$Json$Decode$field, 'timestamp', $author$project$Query$Json$DecoderUtils$decodeTimestamp)));
var $author$project$Data$Notification$Unread = {$: 'Unread'};
var $author$project$Query$Json$NotificationDecoder$decodeUnread = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Notification$Unread;
	},
	A2($elm$json$Json$Decode$field, 'Unread', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Query$Json$NotificationDecoder$decodeReadStatus = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$NotificationDecoder$decodeUnread, $author$project$Query$Json$NotificationDecoder$decodeRead]));
var $author$project$Data$Notification$Notification = F4(
	function (id, content, created, status) {
		return {content: content, created: created, id: id, status: status};
	});
var $author$project$Data$Notification$ChallengeAcceptedNotification = F2(
	function (a, b) {
		return {$: 'ChallengeAcceptedNotification', a: a, b: b};
	});
var $author$project$Data$Challenge$ChallengeId = function (a) {
	return {$: 'ChallengeId', a: a};
};
var $author$project$Query$Json$ChallengeDecoder$decodeChallengeId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Challenge$ChallengeId));
var $author$project$Query$Json$NotificationDecoder$decodeChallengeAcceptedNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'ChallengeAcceptedNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'userId',
		$author$project$Query$Json$DecoderUtils$decodeUserId,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'challengeId',
			$author$project$Query$Json$ChallengeDecoder$decodeChallengeId,
			$elm$json$Json$Decode$succeed($author$project$Data$Notification$ChallengeAcceptedNotification))));
var $author$project$Data$Notification$ChallengeRejectedNotification = F2(
	function (a, b) {
		return {$: 'ChallengeRejectedNotification', a: a, b: b};
	});
var $author$project$Query$Json$NotificationDecoder$decodeChallengeRejectedNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'ChallengeRejectedNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'userId',
		$author$project$Query$Json$DecoderUtils$decodeUserId,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'challengeId',
			$author$project$Query$Json$ChallengeDecoder$decodeChallengeId,
			$elm$json$Json$Decode$succeed($author$project$Data$Notification$ChallengeRejectedNotification))));
var $author$project$Data$Notification$EventCancelledNotification = function (a) {
	return {$: 'EventCancelledNotification', a: a};
};
var $author$project$Query$Json$NotificationDecoder$decodeEventCancelledNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'EventCancelledNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'eventId',
		$author$project$Query$Json$EventDecoder$decodeEventId,
		$elm$json$Json$Decode$succeed($author$project$Data$Notification$EventCancelledNotification)));
var $author$project$Data$Notification$EventParticipationRequestAcceptedNotification = function (a) {
	return {$: 'EventParticipationRequestAcceptedNotification', a: a};
};
var $author$project$Query$Json$NotificationDecoder$decodeEventParticipationRequestAcceptedNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'EventParticipationRequestAcceptedNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'eventId',
		$author$project$Query$Json$EventDecoder$decodeEventId,
		$elm$json$Json$Decode$succeed($author$project$Data$Notification$EventParticipationRequestAcceptedNotification)));
var $author$project$Data$Notification$EventParticipationRequestRejectedNotification = function (a) {
	return {$: 'EventParticipationRequestRejectedNotification', a: a};
};
var $author$project$Query$Json$NotificationDecoder$decodeEventParticipationRequestRejectedNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'EventParticipationRequestRejectedNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'eventId',
		$author$project$Query$Json$EventDecoder$decodeEventId,
		$elm$json$Json$Decode$succeed($author$project$Data$Notification$EventParticipationRequestRejectedNotification)));
var $author$project$Data$Notification$NewFollowerNotification = function (a) {
	return {$: 'NewFollowerNotification', a: a};
};
var $author$project$Query$Json$NotificationDecoder$decodeNewFollowerNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'NewFollowerNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'follower',
		$author$project$Query$Json$DecoderUtils$decodeUserId,
		$elm$json$Json$Decode$succeed($author$project$Data$Notification$NewFollowerNotification)));
var $author$project$Data$Notification$PlatformMessageNotification = function (a) {
	return {$: 'PlatformMessageNotification', a: a};
};
var $author$project$Query$Json$NotificationDecoder$decodePlatformNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'PlatformMessageNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'message',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$Data$Notification$PlatformMessageNotification)));
var $author$project$Data$Notification$PostLikedNotification = F2(
	function (a, b) {
		return {$: 'PostLikedNotification', a: a, b: b};
	});
var $author$project$Query$Json$NotificationDecoder$decodePostLikedNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'PostLikedNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'likedBy',
		$author$project$Query$Json$DecoderUtils$decodeUserId,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'postId',
			$author$project$Query$Json$PostDecoder$decodePostId,
			$elm$json$Json$Decode$succeed($author$project$Data$Notification$PostLikedNotification))));
var $author$project$Data$Notification$YouHaveBeenChallengedNotification = function (a) {
	return {$: 'YouHaveBeenChallengedNotification', a: a};
};
var $author$project$Query$Json$NotificationDecoder$decodeYouHaveBeenChallengedNotificationContent = A2(
	$elm$json$Json$Decode$field,
	'YouHaveBeenChallengedNotification',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'challengeId',
		$author$project$Query$Json$ChallengeDecoder$decodeChallengeId,
		$elm$json$Json$Decode$succeed($author$project$Data$Notification$YouHaveBeenChallengedNotification)));
var $author$project$Query$Json$NotificationDecoder$decodeNotificationContent = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$NotificationDecoder$decodePlatformNotificationContent, $author$project$Query$Json$NotificationDecoder$decodePostLikedNotificationContent, $author$project$Query$Json$NotificationDecoder$decodeNewFollowerNotificationContent, $author$project$Query$Json$NotificationDecoder$decodeYouHaveBeenChallengedNotificationContent, $author$project$Query$Json$NotificationDecoder$decodeChallengeAcceptedNotificationContent, $author$project$Query$Json$NotificationDecoder$decodeChallengeRejectedNotificationContent, $author$project$Query$Json$NotificationDecoder$decodeEventParticipationRequestAcceptedNotificationContent, $author$project$Query$Json$NotificationDecoder$decodeEventParticipationRequestRejectedNotificationContent, $author$project$Query$Json$NotificationDecoder$decodeEventCancelledNotificationContent]));
var $author$project$Data$Notification$NotificationId = function (a) {
	return {$: 'NotificationId', a: a};
};
var $author$project$Query$Json$NotificationDecoder$decodeNotificationId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'id',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Notification$NotificationId));
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Query$Json$NotificationDecoder$decodeUnreadNotification = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Data$Notification$Notification,
	A2($elm$json$Json$Decode$field, 'id', $author$project$Query$Json$NotificationDecoder$decodeNotificationId),
	A2($elm$json$Json$Decode$field, 'content', $author$project$Query$Json$NotificationDecoder$decodeNotificationContent),
	A2($elm$json$Json$Decode$field, 'timestamp', $author$project$Query$Json$DecoderUtils$decodeTimestamp),
	$elm$json$Json$Decode$succeed($author$project$Data$Notification$Unread));
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Query$Json$NotificationDecoder$decodeNotificationsWithReadStatus = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		var notif = _v0.a;
		var status = _v0.b;
		return _Utils_update(
			notif,
			{status: status});
	},
	A3(
		$elm$json$Json$Decode$map2,
		$elm$core$Tuple$pair,
		A2($elm$json$Json$Decode$field, 'notification', $author$project$Query$Json$NotificationDecoder$decodeUnreadNotification),
		A2($elm$json$Json$Decode$field, 'status', $author$project$Query$Json$NotificationDecoder$decodeReadStatus)));
var $author$project$Query$Json$NotificationDecoder$decodeNotifications = $elm$json$Json$Decode$list($author$project$Query$Json$NotificationDecoder$decodeNotificationsWithReadStatus);
var $author$project$Query$Notification$fetchAllNotificationsPage = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$NotificationDecoder$decodeNotifications),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'notification',
								'all',
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $author$project$Utils$ListUtils$fromMaybe = function (mx) {
	if (mx.$ === 'Just') {
		var x = mx.a;
		return _List_fromArray(
			[x]);
	} else {
		return _List_Nil;
	}
};
var $author$project$Data$Notification$userFromNotification = function (notif) {
	var _v0 = notif.content;
	switch (_v0.$) {
		case 'NewFollowerNotification':
			var userId = _v0.a;
			return $elm$core$Maybe$Just(userId);
		case 'PostLikedNotification':
			var userId = _v0.b;
			return $elm$core$Maybe$Just(userId);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Data$Notification$usersFromNotifications = $elm$core$List$concatMap(
	function (n) {
		return $author$project$Utils$ListUtils$fromMaybe(
			$author$project$Data$Notification$userFromNotification(n));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheAllUsersFromNotifications = F3(
	function (cache, user, notifs) {
		return A2(
			$elm$core$Task$andThen,
			function (xs) {
				return $elm$core$Task$succeed(
					A3($elm$core$List$foldl, $author$project$State$Cache$merge, cache, xs));
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					function (id) {
						return A3($author$project$Query$CacheQueryUtils$fetchAndCacheUserInfo, cache, user, id);
					},
					$author$project$Data$Notification$usersFromNotifications(notifs))));
	});
var $author$project$Query$Notification$fetchAllNotifications = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNotificationsFetched,
			A2(
				$elm$core$Task$andThen,
				function (notifs) {
					return A2(
						$author$project$Query$TaskUtils$thread,
						{notifications: notifs, number: page},
						A3($author$project$Query$CacheQueryUtils$fetchAndCacheAllUsersFromNotifications, cache, user, notifs));
				},
				A2($author$project$Query$Notification$fetchAllNotificationsPage, user, page)));
	});
var $author$project$Query$Notification$fetchUnreadNotificationsPage = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$NotificationDecoder$decodeNotifications),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'notification',
								'all',
								'unread',
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Notification$fetchUnreadNotifications = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNotificationsFetched,
			A2(
				$elm$core$Task$andThen,
				function (notifs) {
					return A2(
						$author$project$Query$TaskUtils$thread,
						{notifications: notifs, number: page},
						A3($author$project$Query$CacheQueryUtils$fetchAndCacheAllUsersFromNotifications, cache, user, notifs));
				},
				A2($author$project$Query$Notification$fetchUnreadNotificationsPage, user, page)));
	});
var $author$project$Query$Notification$fetchNotifications = F4(
	function (cache, user, tab, page) {
		if (tab.$ === 'UnreadTab') {
			return A3($author$project$Query$Notification$fetchUnreadNotifications, cache, user, page);
		} else {
			return A3($author$project$Query$Notification$fetchAllNotifications, cache, user, page);
		}
	});
var $author$project$State$ChallengeState$AuthoredTab = {$: 'AuthoredTab'};
var $author$project$Update$Msg$HttpChallengePostsFetched = function (a) {
	return {$: 'HttpChallengePostsFetched', a: a};
};
var $author$project$State$Cache$addConversationSize = F3(
	function (cache, id, count) {
		var cacheId = $author$project$Data$Post$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyConversationCacheEntry,
			A2($elm$core$Dict$get, cacheId, cache.conversations));
		var updated = _Utils_update(
			entry,
			{messageCount: count});
		return _Utils_update(
			cache,
			{
				conversations: A3($elm$core$Dict$insert, cacheId, updated, cache.conversations)
			});
	});
var $author$project$State$Cache$addPost = F3(
	function (cache, id, post) {
		return _Utils_update(
			cache,
			{
				posts: A3(
					$elm$core$Dict$insert,
					$author$project$Data$Post$toString(id),
					post,
					cache.posts)
			});
	});
var $author$project$State$Cache$addChallenge = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Challenge$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyChallengeEntry,
			A2($elm$core$Dict$get, cacheId, cache.challenges));
		var updated = _Utils_update(
			entry,
			{
				challenge: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				challenges: A3($elm$core$Dict$insert, cacheId, updated, cache.challenges)
			});
	});
var $author$project$State$Cache$addChallengeStatistics = F3(
	function (cache, id, stats) {
		var cacheId = $author$project$Data$Challenge$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyChallengeEntry,
			A2($elm$core$Dict$get, cacheId, cache.challenges));
		var updated = _Utils_update(
			entry,
			{
				statistics: $elm$core$Maybe$Just(stats)
			});
		return _Utils_update(
			cache,
			{
				challenges: A3($elm$core$Dict$insert, cacheId, updated, cache.challenges)
			});
	});
var $author$project$State$Cache$addChallengeStatus = F3(
	function (cache, id, status) {
		var cacheId = $author$project$Data$Challenge$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyChallengeEntry,
			A2($elm$core$Dict$get, cacheId, cache.challenges));
		var updated = _Utils_update(
			entry,
			{
				status: $elm$core$Maybe$Just(status)
			});
		return _Utils_update(
			cache,
			{
				challenges: A3($elm$core$Dict$insert, cacheId, updated, cache.challenges)
			});
	});
var $author$project$Query$AggregatedCacheQueryUtils$cacheChallengeInfo = F3(
	function (cache, postId, challenge) {
		var c1 = A3($author$project$State$Cache$addChallenge, cache, challenge.challenge.id, challenge.challenge);
		var c2 = A3($author$project$State$Cache$addChallengeStatus, c1, challenge.challenge.id, challenge.status);
		var c3 = A3($author$project$State$Cache$addChallengeOutcomeStatus, c2, challenge.challenge.id, challenge.statusOutcome);
		var c4 = A3($author$project$State$Cache$addChallengeStatistics, c3, challenge.challenge.id, challenge.statistics);
		return c4;
	});
var $author$project$State$Cache$addPostIdForEvent = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Event$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyEventEntry,
			A2($elm$core$Dict$get, cacheId, cache.events));
		var updated = _Utils_update(
			entry,
			{
				postId: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				events: A3($elm$core$Dict$insert, cacheId, updated, cache.events)
			});
	});
var $author$project$Query$AggregatedCacheQueryUtils$cacheEventInfo = F3(
	function (cache, postId, event) {
		var c1 = A3($author$project$State$Cache$addEvent, cache, event.event.id, event.event);
		var c2 = A3($author$project$State$Cache$addEventCancelledStatus, c1, event.event.id, event.cancelled);
		var c3 = A3($author$project$State$Cache$addEventParticipationStatus, c2, event.event.id, event.participationStatus);
		var c4 = A3($author$project$State$Cache$addEventParticipationRequestStatus, c3, event.event.id, event.participationRequestStatus);
		var c5 = A3($author$project$State$Cache$addEventParticipantCount, c4, event.event.id, event.participationCount);
		var c6 = A3($author$project$State$Cache$addPostIdForEvent, c5, event.event.id, postId);
		return c6;
	});
var $author$project$State$Cache$emptyPollEntry = {answered: $elm$core$Maybe$Nothing, poll: $elm$core$Maybe$Nothing, stats: $elm$core$Maybe$Nothing};
var $author$project$State$Cache$addPoll = F3(
	function (cache, id, content) {
		var cacheId = $author$project$Data$Poll$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyPollEntry,
			A2($elm$core$Dict$get, cacheId, cache.polls));
		var updated = _Utils_update(
			entry,
			{
				poll: $elm$core$Maybe$Just(content)
			});
		return _Utils_update(
			cache,
			{
				polls: A3($elm$core$Dict$insert, cacheId, updated, cache.polls)
			});
	});
var $author$project$State$Cache$addPollAnswered = F3(
	function (cache, id, answered) {
		var cacheId = $author$project$Data$Poll$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyPollEntry,
			A2($elm$core$Dict$get, cacheId, cache.polls));
		var updated = _Utils_update(
			entry,
			{
				answered: $elm$core$Maybe$Just(answered)
			});
		return _Utils_update(
			cache,
			{
				polls: A3($elm$core$Dict$insert, cacheId, updated, cache.polls)
			});
	});
var $author$project$State$Cache$addPollStats = F3(
	function (cache, id, stats) {
		var cacheId = $author$project$Data$Poll$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyPollEntry,
			A2($elm$core$Dict$get, cacheId, cache.polls));
		var updated = _Utils_update(
			entry,
			{
				stats: $elm$core$Maybe$Just(stats)
			});
		return _Utils_update(
			cache,
			{
				polls: A3($elm$core$Dict$insert, cacheId, updated, cache.polls)
			});
	});
var $author$project$Query$AggregatedCacheQueryUtils$cachePollInfo = F3(
	function (cache, postId, poll) {
		var c1 = A3($author$project$State$Cache$addPoll, cache, poll.poll.id, poll.poll);
		var c2 = A3($author$project$State$Cache$addPollAnswered, c1, poll.poll.id, poll.answered);
		var c3 = A3($author$project$State$Cache$addPollStats, c2, poll.poll.id, poll.statistics);
		return c3;
	});
var $author$project$Data$Tip$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$State$Cache$addTip = F3(
	function (cache, id, content) {
		return _Utils_update(
			cache,
			{
				tips: A3(
					$elm$core$Dict$insert,
					$author$project$Data$Tip$toString(id),
					content,
					cache.tips)
			});
	});
var $author$project$Query$AggregatedCacheQueryUtils$cacheTipInfo = F2(
	function (cache, tip) {
		return A3($author$project$State$Cache$addTip, cache, tip.tip.id, tip.tip);
	});
var $author$project$Data$Partner$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$State$Cache$addPartner = F3(
	function (cache, id, content) {
		return _Utils_update(
			cache,
			{
				partners: A3(
					$elm$core$Dict$insert,
					$author$project$Data$Partner$toString(id),
					content,
					cache.partners)
			});
	});
var $author$project$State$Cache$addPostWithPartnership = F3(
	function (cache, postId, partnerId) {
		return _Utils_update(
			cache,
			{
				partnerships: A3(
					$elm$core$Dict$insert,
					$author$project$Data$Post$toString(postId),
					partnerId,
					cache.partnerships)
			});
	});
var $author$project$Query$AggregatedCacheQueryUtils$partnership = F3(
	function (cache, postId, partner) {
		var c1 = A3($author$project$State$Cache$addPartner, cache, partner.id, partner);
		var c2 = A3($author$project$State$Cache$addPostWithPartnership, c1, postId, partner.id);
		return c2;
	});
var $author$project$State$Cache$setLikeCount = F3(
	function (cache, postId, count) {
		return _Utils_update(
			cache,
			{
				likeCount: A3(
					$elm$core$Dict$insert,
					$author$project$Data$Post$toString(postId),
					count,
					cache.likeCount)
			});
	});
var $author$project$Query$AggregatedCacheQueryUtils$cacheAggregatedPosts = F2(
	function (cache, post) {
		var c1 = A3($author$project$State$Cache$addPost, cache, post.postId, post.post);
		var c2 = A3($author$project$State$Cache$addUser, c1, post.user.id, post.user);
		var c3 = post.liked ? A2($author$project$State$Cache$addLike, c2, post.postId) : c2;
		var c4 = A3($author$project$State$Cache$setLikeCount, c3, post.postId, post.likes);
		var c5 = A3($author$project$State$Cache$addConversationSize, c4, post.postId, post.messageCount);
		var c6 = post.pinned ? A2($author$project$State$Cache$addPinned, c5, post.postId) : c5;
		var c7 = A2(
			$elm$core$Maybe$withDefault,
			c6,
			A2(
				$elm$core$Maybe$map,
				A2($author$project$Query$AggregatedCacheQueryUtils$partnership, c6, post.postId),
				post.partner));
		var c8 = A2(
			$elm$core$Maybe$withDefault,
			c7,
			A2(
				$elm$core$Maybe$map,
				A2($author$project$Query$AggregatedCacheQueryUtils$cacheEventInfo, c7, post.postId),
				post.event));
		var c9 = A2(
			$elm$core$Maybe$withDefault,
			c8,
			A2(
				$elm$core$Maybe$map,
				A2($author$project$Query$AggregatedCacheQueryUtils$cacheChallengeInfo, c8, post.postId),
				post.challenge));
		var c10 = A2(
			$elm$core$Maybe$withDefault,
			c9,
			A2(
				$elm$core$Maybe$map,
				A2($author$project$Query$AggregatedCacheQueryUtils$cachePollInfo, c9, post.postId),
				post.poll));
		var c11 = A2(
			$elm$core$Maybe$withDefault,
			c10,
			A2(
				$elm$core$Maybe$map,
				$author$project$Query$AggregatedCacheQueryUtils$cacheTipInfo(c10),
				post.tip));
		return c11;
	});
var $author$project$Query$Json$AggregatedPostDecoder$AggregatedPost = function (postId) {
	return function (post) {
		return function (user) {
			return function (pinned) {
				return function (partner) {
					return function (tip) {
						return function (freeText) {
							return function (challenge) {
								return function (event) {
									return function (poll) {
										return function (repost) {
											return function (liked) {
												return function (likes) {
													return function (messageCount) {
														return {challenge: challenge, event: event, freeText: freeText, liked: liked, likes: likes, messageCount: messageCount, partner: partner, pinned: pinned, poll: poll, post: post, postId: postId, repost: repost, tip: tip, user: user};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Query$Json$AggregatedPostDecoder$ChallengeInfo = F4(
	function (challenge, status, statusOutcome, statistics) {
		return {challenge: challenge, statistics: statistics, status: status, statusOutcome: statusOutcome};
	});
var $author$project$Data$Challenge$Challenge = F7(
	function (id, author, title, content, created, schedule, measure) {
		return {author: author, content: content, created: created, id: id, measure: measure, schedule: schedule, title: title};
	});
var $author$project$Query$Json$ChallengeDecoder$decodeContent = A2(
	$elm$json$Json$Decode$field,
	'content',
	A2($elm$json$Json$Decode$field, 'description', $elm$json$Json$Decode$string));
var $author$project$Data$Challenge$SuccessMeasure = F3(
	function (maxFailure, maxPartial, maxSkip) {
		return {maxFailure: maxFailure, maxPartial: maxPartial, maxSkip: maxSkip};
	});
var $author$project$Query$Json$ChallengeDecoder$decodeSuccessMeasure = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'maxSkip',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'maxPartial',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'maxFailure',
			$elm$json$Json$Decode$int,
			$elm$json$Json$Decode$succeed($author$project$Data$Challenge$SuccessMeasure))));
var $author$project$Query$Json$ChallengeDecoder$decodeTitle = A2(
	$elm$json$Json$Decode$field,
	'content',
	A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string));
var $elm$json$Json$Decode$map7 = _Json_map7;
var $author$project$Query$Json$ChallengeDecoder$decodeChallenge = A8(
	$elm$json$Json$Decode$map7,
	$author$project$Data$Challenge$Challenge,
	A2($elm$json$Json$Decode$field, 'id', $author$project$Query$Json$ChallengeDecoder$decodeChallengeId),
	A2($elm$json$Json$Decode$field, 'author', $author$project$Query$Json$DecoderUtils$decodeUserId),
	$author$project$Query$Json$ChallengeDecoder$decodeTitle,
	$author$project$Query$Json$ChallengeDecoder$decodeContent,
	A2($elm$json$Json$Decode$field, 'created', $author$project$Query$Json$DecoderUtils$decodeTimestamp),
	A2($elm$json$Json$Decode$field, 'schedule', $author$project$Query$Json$ScheduleDecoder$decodeSchedule),
	A2($elm$json$Json$Decode$field, 'measure', $author$project$Query$Json$ChallengeDecoder$decodeSuccessMeasure));
var $author$project$Query$Json$ChallengeDecoder$decodeAccepted = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Accepted;
	},
	A2($elm$json$Json$Decode$field, 'Accepted', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$Cancelled = {$: 'Cancelled'};
var $author$project$Query$Json$ChallengeDecoder$decodeCancelled = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Cancelled;
	},
	A2($elm$json$Json$Decode$field, 'Cancelled', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$Completed = {$: 'Completed'};
var $author$project$Query$Json$ChallengeDecoder$decodeCompleted = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Completed;
	},
	A2($elm$json$Json$Decode$field, 'Completed', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$Failed = {$: 'Failed'};
var $author$project$Query$Json$ChallengeDecoder$decodeFailed = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Failed;
	},
	A2($elm$json$Json$Decode$field, 'Failed', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$NotTaken = {$: 'NotTaken'};
var $author$project$Query$Json$ChallengeDecoder$decodeNotTaken = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$NotTaken;
	},
	A2($elm$json$Json$Decode$field, 'NotTaken', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$NotYetTaken = {$: 'NotYetTaken'};
var $author$project$Query$Json$ChallengeDecoder$decodeNotYetTaken = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$NotYetTaken;
	},
	A2($elm$json$Json$Decode$field, 'NotYetTaken', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$OnTracks = {$: 'OnTracks'};
var $author$project$Query$Json$ChallengeDecoder$decodeOnTracks = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$OnTracks;
	},
	A2($elm$json$Json$Decode$field, 'OnTracks', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Query$Json$ChallengeDecoder$decodeRejected = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Rejected;
	},
	A2($elm$json$Json$Decode$field, 'Rejected', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Query$Json$ChallengeDecoder$decodeChallengeOutcomeStatus = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$ChallengeDecoder$decodeNotYetTaken, $author$project$Query$Json$ChallengeDecoder$decodeNotTaken, $author$project$Query$Json$ChallengeDecoder$decodeAccepted, $author$project$Query$Json$ChallengeDecoder$decodeRejected, $author$project$Query$Json$ChallengeDecoder$decodeCompleted, $author$project$Query$Json$ChallengeDecoder$decodeOnTracks, $author$project$Query$Json$ChallengeDecoder$decodeFailed, $author$project$Query$Json$ChallengeDecoder$decodeCancelled]));
var $author$project$Data$Challenge$ChallengeStatistics = F8(
	function (acceptedCount, rejectedCount, elapsedPeriodCount, totalPeriodCount, successCount, failureCount, partialSuccessCount, skippedCount) {
		return {acceptedCount: acceptedCount, elapsedPeriodCount: elapsedPeriodCount, failureCount: failureCount, partialSuccessCount: partialSuccessCount, rejectedCount: rejectedCount, skippedCount: skippedCount, successCount: successCount, totalPeriodCount: totalPeriodCount};
	});
var $author$project$Query$Json$ChallengeDecoder$decodeChallengeStatistics = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'skippedCount',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'partialSuccessCount',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'failureCount',
			$elm$json$Json$Decode$int,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'successCount',
				$elm$json$Json$Decode$int,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'totalPeriodCount',
					$elm$json$Json$Decode$int,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'elapsedPeriodCount',
						$elm$json$Json$Decode$int,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'rejectedCount',
							$elm$json$Json$Decode$int,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'acceptedCount',
								$elm$json$Json$Decode$int,
								$elm$json$Json$Decode$succeed($author$project$Data$Challenge$ChallengeStatistics)))))))));
var $author$project$Data$Challenge$Closed = {$: 'Closed'};
var $author$project$Query$Json$ChallengeDecoder$decodeClosed = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Closed;
	},
	A2($elm$json$Json$Decode$field, 'Closed', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$NotYetStarted = {$: 'NotYetStarted'};
var $author$project$Query$Json$ChallengeDecoder$decodeNotYetStarted = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$NotYetStarted;
	},
	A2($elm$json$Json$Decode$field, 'NotYetStarted', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$OnGoing = {$: 'OnGoing'};
var $author$project$Query$Json$ChallengeDecoder$decodeOnGoing = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$OnGoing;
	},
	A2($elm$json$Json$Decode$field, 'OnGoing', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Query$Json$ChallengeDecoder$decodeChallengeStatus = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$ChallengeDecoder$decodeNotYetStarted, $author$project$Query$Json$ChallengeDecoder$decodeOnGoing, $author$project$Query$Json$ChallengeDecoder$decodeClosed]));
var $author$project$Query$Json$AggregatedPostDecoder$decodeChallengeInfo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'statistics',
	$author$project$Query$Json$ChallengeDecoder$decodeChallengeStatistics,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'statusOutcome',
		$author$project$Query$Json$ChallengeDecoder$decodeChallengeOutcomeStatus,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'status',
			$author$project$Query$Json$ChallengeDecoder$decodeChallengeStatus,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'challenge',
				$author$project$Query$Json$ChallengeDecoder$decodeChallenge,
				$elm$json$Json$Decode$succeed($author$project$Query$Json$AggregatedPostDecoder$ChallengeInfo)))));
var $author$project$Query$Json$AggregatedPostDecoder$EventInfo = F5(
	function (event, cancelled, participationStatus, participationRequestStatus, participationCount) {
		return {cancelled: cancelled, event: event, participationCount: participationCount, participationRequestStatus: participationRequestStatus, participationStatus: participationStatus};
	});
var $author$project$Query$Json$AggregatedPostDecoder$decodeEventInfo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'participationCount',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'participationRequestStatus',
		$elm$json$Json$Decode$bool,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'participationStatus',
			$elm$json$Json$Decode$bool,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'cancelled',
				$elm$json$Json$Decode$bool,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'event',
					$author$project$Query$Json$EventDecoder$decodeEvent,
					$elm$json$Json$Decode$succeed($author$project$Query$Json$AggregatedPostDecoder$EventInfo))))));
var $author$project$Query$Json$AggregatedPostDecoder$FreeTextInfo = function (content) {
	return {content: content};
};
var $author$project$Query$Json$AggregatedPostDecoder$decodeFreeTextInfo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'content',
	$elm$json$Json$Decode$string,
	$elm$json$Json$Decode$succeed($author$project$Query$Json$AggregatedPostDecoder$FreeTextInfo));
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$Query$Json$DecoderUtils$decodeWithDefault = F2(
	function (decoder, _default) {
		return A2(
			$elm$json$Json$Decode$map,
			function (v) {
				if (v.$ === 'Nothing') {
					return _default;
				} else {
					var x = v.a;
					return x;
				}
			},
			$elm$json$Json$Decode$nullable(decoder));
	});
var $author$project$Query$Json$DecoderUtils$decodeIntWithDefault = function (n) {
	return A2(
		$author$project$Query$Json$DecoderUtils$decodeWithDefault,
		A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$int),
		0);
};
var $author$project$Data$Partner$Partner = F5(
	function (id, userId, name, description, url) {
		return {description: description, id: id, name: name, url: url, userId: userId};
	});
var $author$project$Data$Partner$PartnerId = function (a) {
	return {$: 'PartnerId', a: a};
};
var $author$project$Query$Json$PartnerDecoder$decodePartnerId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Partner$PartnerId));
var $author$project$Query$Json$PartnerDecoder$decodePartner = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'url',
	$author$project$Query$Json$SourceDecoder$decodeUrl,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'description',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'name',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'userId',
				$author$project$Query$Json$DecoderUtils$decodeUserId,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'id',
					$author$project$Query$Json$PartnerDecoder$decodePartnerId,
					$elm$json$Json$Decode$succeed($author$project$Data$Partner$Partner))))));
var $author$project$Query$Json$AggregatedPostDecoder$PollInfo = F3(
	function (poll, answered, statistics) {
		return {answered: answered, poll: poll, statistics: statistics};
	});
var $author$project$Data$Poll$Poll = F5(
	function (id, author, title, options, created) {
		return {author: author, created: created, id: id, options: options, title: title};
	});
var $author$project$Data$Poll$PollId = function (a) {
	return {$: 'PollId', a: a};
};
var $author$project$Query$Json$PollDecoder$decodePollId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Poll$PollId));
var $author$project$Data$Poll$PollOption = function (a) {
	return {$: 'PollOption', a: a};
};
var $author$project$Query$Json$PollDecoder$decodePollOption = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$elm$json$Json$Decode$string,
	$elm$json$Json$Decode$succeed($author$project$Data$Poll$PollOption));
var $author$project$Query$Json$PollDecoder$decodePollOptionList = $elm$json$Json$Decode$list($author$project$Query$Json$PollDecoder$decodePollOption);
var $author$project$Query$Json$PollDecoder$decodePoll = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'timestamp',
	$author$project$Query$Json$DecoderUtils$decodeTimestamp,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'options',
		$author$project$Query$Json$PollDecoder$decodePollOptionList,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'question',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'author',
				$author$project$Query$Json$DecoderUtils$decodeUserId,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'id',
					$author$project$Query$Json$PollDecoder$decodePollId,
					$elm$json$Json$Decode$succeed($author$project$Data$Poll$Poll))))));
var $author$project$Data$Poll$PollStats = function (a) {
	return {$: 'PollStats', a: a};
};
var $author$project$Data$Poll$PollStatsEntry = F2(
	function (option, count) {
		return {count: count, option: option};
	});
var $author$project$Query$Json$PollDecoder$decodePollStatsEntry = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'count',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'option',
		$author$project$Query$Json$PollDecoder$decodePollOption,
		$elm$json$Json$Decode$succeed($author$project$Data$Poll$PollStatsEntry)));
var $author$project$Query$Json$PollDecoder$decodePollStats = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'stats',
	$elm$json$Json$Decode$list($author$project$Query$Json$PollDecoder$decodePollStatsEntry),
	$elm$json$Json$Decode$succeed($author$project$Data$Poll$PollStats));
var $author$project$Query$Json$AggregatedPostDecoder$decodePollInfo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'statistics',
	$author$project$Query$Json$PollDecoder$decodePollStats,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'answered',
		$elm$json$Json$Decode$bool,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'poll',
			$author$project$Query$Json$PollDecoder$decodePoll,
			$elm$json$Json$Decode$succeed($author$project$Query$Json$AggregatedPostDecoder$PollInfo))));
var $author$project$Data$Post$Post = F5(
	function (id, author, content, created, hashtags) {
		return {author: author, content: content, created: created, hashtags: hashtags, id: id};
	});
var $author$project$Query$Json$PostDecoder$decodeHashtag = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$elm$json$Json$Decode$string,
	$elm$json$Json$Decode$succeed($author$project$Data$Hashtag$Hashtag));
var $author$project$Query$Json$PostDecoder$decodeHashtags = $elm$json$Json$Decode$list($author$project$Query$Json$PostDecoder$decodeHashtag);
var $author$project$Data$Post$ChallengePost = function (a) {
	return {$: 'ChallengePost', a: a};
};
var $author$project$Query$Json$PostDecoder$decodeChallengePostContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'challenge',
	$author$project$Query$Json$ChallengeDecoder$decodeChallengeId,
	$elm$json$Json$Decode$succeed($author$project$Data$Post$ChallengePost));
var $author$project$Data$Post$EventPost = function (a) {
	return {$: 'EventPost', a: a};
};
var $author$project$Query$Json$PostDecoder$decodeEventPostContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'event',
	$author$project$Query$Json$EventDecoder$decodeEventId,
	$elm$json$Json$Decode$succeed($author$project$Data$Post$EventPost));
var $author$project$Data$Post$FreeTextPost = F2(
	function (a, b) {
		return {$: 'FreeTextPost', a: a, b: b};
	});
var $author$project$Data$Post$MySelf = {$: 'MySelf'};
var $author$project$Query$Json$SourceDecoder$decodeSourceMySelf = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Post$MySelf;
	},
	A2($elm$json$Json$Decode$field, 'MySelf', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Query$Json$SourceDecoder$decodeSource = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$SourceDecoder$decodeSourceMySelf]));
var $author$project$Query$Json$SourceDecoder$decodeSources = $elm$json$Json$Decode$list($author$project$Query$Json$SourceDecoder$decodeSource);
var $author$project$Query$Json$PostDecoder$decodeFreeTextPostContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'sources',
	$author$project$Query$Json$SourceDecoder$decodeSources,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'content',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$Data$Post$FreeTextPost)));
var $author$project$Data$Post$PollPost = function (a) {
	return {$: 'PollPost', a: a};
};
var $author$project$Query$Json$PostDecoder$decodePollPostContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'poll',
	$author$project$Query$Json$PollDecoder$decodePollId,
	$elm$json$Json$Decode$succeed($author$project$Data$Post$PollPost));
var $author$project$Data$Post$RePost = function (a) {
	return {$: 'RePost', a: a};
};
var $author$project$Query$Json$PostDecoder$decodeRePostContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'originalId',
	$author$project$Query$Json$PostDecoder$decodePostId,
	$elm$json$Json$Decode$succeed($author$project$Data$Post$RePost));
var $author$project$Data$Post$TipPost = function (a) {
	return {$: 'TipPost', a: a};
};
var $author$project$Data$Tip$TipId = function (a) {
	return {$: 'TipId', a: a};
};
var $author$project$Query$Json$TipDecoder$decodeTipId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Tip$TipId));
var $author$project$Query$Json$PostDecoder$decodeTipPostContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'tip',
	$author$project$Query$Json$TipDecoder$decodeTipId,
	$elm$json$Json$Decode$succeed($author$project$Data$Post$TipPost));
var $author$project$Query$Json$PostDecoder$decodePostContent = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$PostDecoder$decodeFreeTextPostContent, $author$project$Query$Json$PostDecoder$decodeTipPostContent, $author$project$Query$Json$PostDecoder$decodePollPostContent, $author$project$Query$Json$PostDecoder$decodeChallengePostContent, $author$project$Query$Json$PostDecoder$decodeEventPostContent, $author$project$Query$Json$PostDecoder$decodeRePostContent]));
var $elm$json$Json$Decode$map5 = _Json_map5;
var $author$project$Query$Json$PostDecoder$decodePostFields = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Data$Post$Post,
	A2($elm$json$Json$Decode$field, 'id', $author$project$Query$Json$PostDecoder$decodePostId),
	A2($elm$json$Json$Decode$field, 'author', $author$project$Query$Json$DecoderUtils$decodeUserId),
	$author$project$Query$Json$PostDecoder$decodePostContent,
	A2($elm$json$Json$Decode$field, 'created', $author$project$Query$Json$DecoderUtils$decodeTimestamp),
	A2($elm$json$Json$Decode$field, 'hashtags', $author$project$Query$Json$PostDecoder$decodeHashtags));
var $author$project$Query$Json$PostDecoder$decodeChallengePost = A2($elm$json$Json$Decode$field, 'ChallengePost', $author$project$Query$Json$PostDecoder$decodePostFields);
var $author$project$Query$Json$PostDecoder$decodeEventPost = A2($elm$json$Json$Decode$field, 'EventPost', $author$project$Query$Json$PostDecoder$decodePostFields);
var $author$project$Query$Json$PostDecoder$decodeFreeTextPost = A2($elm$json$Json$Decode$field, 'FreeTextPost', $author$project$Query$Json$PostDecoder$decodePostFields);
var $author$project$Query$Json$PostDecoder$decodePollPost = A2($elm$json$Json$Decode$field, 'PollPost', $author$project$Query$Json$PostDecoder$decodePostFields);
var $author$project$Query$Json$PostDecoder$decodeRePost = A2($elm$json$Json$Decode$field, 'RePost', $author$project$Query$Json$PostDecoder$decodePostFields);
var $author$project$Query$Json$PostDecoder$decodeTipPost = A2($elm$json$Json$Decode$field, 'TipPost', $author$project$Query$Json$PostDecoder$decodePostFields);
var $author$project$Query$Json$PostDecoder$decodePost = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$PostDecoder$decodeFreeTextPost, $author$project$Query$Json$PostDecoder$decodeTipPost, $author$project$Query$Json$PostDecoder$decodePollPost, $author$project$Query$Json$PostDecoder$decodeChallengePost, $author$project$Query$Json$PostDecoder$decodeEventPost, $author$project$Query$Json$PostDecoder$decodeRePost]));
var $author$project$Query$Json$AggregatedPostDecoder$RepostInfo = function (repost) {
	return {repost: repost};
};
var $author$project$Query$Json$AggregatedPostDecoder$decodeRepostInfo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'repost',
	$author$project$Query$Json$PostDecoder$decodePostId,
	$elm$json$Json$Decode$succeed($author$project$Query$Json$AggregatedPostDecoder$RepostInfo));
var $author$project$Query$Json$AggregatedPostDecoder$TipInfo = function (tip) {
	return {tip: tip};
};
var $author$project$Data$Tip$Tip = F4(
	function (id, author, content, created) {
		return {author: author, content: content, created: created, id: id};
	});
var $author$project$Query$Json$TipDecoder$decodeTip = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'created',
	$author$project$Query$Json$DecoderUtils$decodeTimestamp,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'content',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'author',
			$author$project$Query$Json$DecoderUtils$decodeUserId,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'id',
				$author$project$Query$Json$TipDecoder$decodeTipId,
				$elm$json$Json$Decode$succeed($author$project$Data$Tip$Tip)))));
var $author$project$Query$Json$AggregatedPostDecoder$decodeTipInfo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'tip',
	$author$project$Query$Json$TipDecoder$decodeTip,
	$elm$json$Json$Decode$succeed($author$project$Query$Json$AggregatedPostDecoder$TipInfo));
var $author$project$Query$Json$AggregatedPostDecoder$decodeAggregatedPost = function (token) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'messageCount',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'likes',
			$author$project$Query$Json$DecoderUtils$decodeIntWithDefault(0),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'liked',
				$elm$json$Json$Decode$bool,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'repost',
					$elm$json$Json$Decode$maybe($author$project$Query$Json$AggregatedPostDecoder$decodeRepostInfo),
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'poll',
						$elm$json$Json$Decode$maybe($author$project$Query$Json$AggregatedPostDecoder$decodePollInfo),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'event',
							$elm$json$Json$Decode$maybe($author$project$Query$Json$AggregatedPostDecoder$decodeEventInfo),
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'challenge',
								$elm$json$Json$Decode$maybe($author$project$Query$Json$AggregatedPostDecoder$decodeChallengeInfo),
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'freeText',
									$elm$json$Json$Decode$maybe($author$project$Query$Json$AggregatedPostDecoder$decodeFreeTextInfo),
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'tip',
										$elm$json$Json$Decode$maybe($author$project$Query$Json$AggregatedPostDecoder$decodeTipInfo),
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'partner',
											$elm$json$Json$Decode$maybe($author$project$Query$Json$PartnerDecoder$decodePartner),
											A3(
												$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
												'pinned',
												$elm$json$Json$Decode$bool,
												A3(
													$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
													'user',
													$author$project$Query$Json$UserDecoder$decodeUserProfile(token),
													A3(
														$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
														'post',
														$author$project$Query$Json$PostDecoder$decodePost,
														A3(
															$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
															'postId',
															$author$project$Query$Json$PostDecoder$decodePostId,
															$elm$json$Json$Decode$succeed($author$project$Query$Json$AggregatedPostDecoder$AggregatedPost)))))))))))))));
};
var $author$project$Query$Json$AggregatedPostDecoder$decodeAggregatedPosts = function (token) {
	return $elm$json$Json$Decode$list(
		$author$project$Query$Json$AggregatedPostDecoder$decodeAggregatedPost(token));
};
var $author$project$Query$AggregatedCacheQueryUtils$makePostIdsArg = function (xs) {
	return A2(
		$elm$core$String$join,
		'+',
		A2($elm$core$List$map, $author$project$Data$Post$toString, xs));
};
var $author$project$Query$AggregatedCacheQueryUtils$fetchAndCacheAggregatedPostInfo = F3(
	function (cache, user, postIds) {
		return A2(
			$elm$core$Task$map,
			A2(
				$elm$core$List$foldl,
				F2(
					function (id, acc) {
						return A2($author$project$Query$AggregatedCacheQueryUtils$cacheAggregatedPosts, acc, id);
					}),
				cache),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$author$project$Query$Json$AggregatedPostDecoder$decodeAggregatedPosts(user.token)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['post', 'by-ids']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'post-ids',
									$author$project$Query$AggregatedCacheQueryUtils$makePostIdsArg(postIds))
								])))
				}));
	});
var $author$project$State$Cache$addFollower = F2(
	function (cache, user) {
		return _Utils_update(
			cache,
			{
				followers: A2(
					$elm$core$Set$insert,
					$author$project$Data$User$toString(user),
					cache.followers)
			});
	});
var $author$project$Query$Json$UserDecoder$decodeUserList = $elm$json$Json$Decode$list($author$project$Query$Json$DecoderUtils$decodeUserId);
var $author$project$Query$CacheQueryUtils$fetchAndCacheFollowers = F2(
	function (cache, user) {
		return A2(
			$elm$core$Task$map,
			A2(
				$elm$core$List$foldl,
				F2(
					function (id, acc) {
						return A2($author$project$State$Cache$addFollower, acc, id);
					}),
				cache),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$UserDecoder$decodeUserList),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'followers',
									'all',
									$author$project$Data$User$toString(user.id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheFollowingHashtags = F2(
	function (cache, user) {
		return A2(
			$elm$core$Task$map,
			A2(
				$elm$core$List$foldl,
				F2(
					function (id, acc) {
						return A2($author$project$State$Cache$addFollowingHashtag, acc, id);
					}),
				cache),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$elm$json$Json$Decode$list($author$project$Query$Json$PostDecoder$decodeHashtag)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['hashtag', 'followed']),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheFollowingUsers = F2(
	function (cache, user) {
		return A2(
			$elm$core$Task$map,
			A2(
				$elm$core$List$foldl,
				F2(
					function (id, acc) {
						return A2($author$project$State$Cache$addFollowingUser, acc, id);
					}),
				cache),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$UserDecoder$decodeUserList),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'following',
									'all',
									$author$project$Data$User$toString(user.id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll = F3(
	function (cache, user, posts) {
		return A2(
			$elm$core$Task$andThen,
			function (cache4) {
				return A2($author$project$Query$CacheQueryUtils$fetchAndCacheFollowingHashtags, cache4, user);
			},
			A2(
				$elm$core$Task$andThen,
				function (cache3) {
					return A2($author$project$Query$CacheQueryUtils$fetchAndCacheFollowers, cache3, user);
				},
				A2(
					$elm$core$Task$andThen,
					function (cache2) {
						return A2($author$project$Query$CacheQueryUtils$fetchAndCacheFollowingUsers, cache2, user);
					},
					A2(
						$elm$core$Task$andThen,
						function (cache1) {
							return A3($author$project$Query$AggregatedCacheQueryUtils$fetchAndCacheAggregatedPostInfo, cache1, user, posts);
						},
						$elm$core$Task$succeed(cache)))));
	});
var $author$project$Query$Challenge$fetchAllAuthoredChallenges = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeChallengeId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'by-author',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchChallengesPost = F2(
	function (user, id) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$PostDecoder$decodePostId),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'post',
								'by-content',
								'challenge',
								$author$project$Data$Challenge$toString(id)
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchChallengesPosts = F2(
	function (user, ids) {
		return $elm$core$Task$sequence(
			A2(
				$elm$core$List$map,
				$author$project$Query$Challenge$fetchChallengesPost(user),
				ids));
	});
var $author$project$Query$Challenge$fetchAuthoredChallengePosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengePostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$ChallengeState$AuthoredTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Challenge$fetchChallengesPosts(user),
						A2($author$project$Query$Challenge$fetchAllAuthoredChallenges, user, page)))));
	});
var $author$project$State$ChallengeState$FailedTab = {$: 'FailedTab'};
var $author$project$Query$Challenge$fetchAllFailedChallenges = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeChallengeId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'by-user',
								'failed',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchFailedChallengePosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengePostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$ChallengeState$FailedTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Challenge$fetchChallengesPosts(user),
						A2($author$project$Query$Challenge$fetchAllFailedChallenges, user, page)))));
	});
var $author$project$State$ChallengeState$FinishedTab = {$: 'FinishedTab'};
var $author$project$Query$Challenge$fetchAllFinishedChallenges = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeChallengeId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'by-user',
								'finished',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchFinishedChallengePosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengePostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$ChallengeState$FinishedTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Challenge$fetchChallengesPosts(user),
						A2($author$project$Query$Challenge$fetchAllFinishedChallenges, user, page)))));
	});
var $author$project$Query$Challenge$fetchAllOnGoingChallenges = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeChallengeId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'by-user',
								'on-going',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchOnGoingChallengePosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengePostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$ChallengeState$OnGoingTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Challenge$fetchChallengesPosts(user),
						A2($author$project$Query$Challenge$fetchAllOnGoingChallenges, user, page)))));
	});
var $author$project$State$ChallengeState$OnTracksTab = {$: 'OnTracksTab'};
var $author$project$Query$Challenge$fetchAllOnTracksChallenges = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeChallengeId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'by-user',
								'on-tracks',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchOnTracksChallengePosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengePostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$ChallengeState$OnTracksTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Challenge$fetchChallengesPosts(user),
						A2($author$project$Query$Challenge$fetchAllOnTracksChallenges, user, page)))));
	});
var $author$project$State$ChallengeState$ReportDueTab = {$: 'ReportDueTab'};
var $author$project$Query$Challenge$fetchAllReportDueChallenges = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeChallengeId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'by-user',
								'report-due',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchReportDueChallengePosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengePostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$ChallengeState$ReportDueTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Challenge$fetchChallengesPosts(user),
						A2($author$project$Query$Challenge$fetchAllReportDueChallenges, user, page)))));
	});
var $author$project$State$ChallengeState$UpcomingTab = {$: 'UpcomingTab'};
var $author$project$Query$Challenge$fetchAllUpcomingChallenges = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeChallengeId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'by-user',
								'upcoming',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$fetchUpcomingChallengePosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengePostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$ChallengeState$UpcomingTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Challenge$fetchChallengesPosts(user),
						A2($author$project$Query$Challenge$fetchAllUpcomingChallenges, user, page)))));
	});
var $author$project$Query$Challenge$fetchUserChallengePosts = F3(
	function (cache, user, pagedTab) {
		var _v0 = pagedTab.tab;
		switch (_v0.$) {
			case 'OnGoingTab':
				return A3($author$project$Query$Challenge$fetchOnGoingChallengePosts, cache, user, pagedTab.page);
			case 'FinishedTab':
				return A3($author$project$Query$Challenge$fetchFinishedChallengePosts, cache, user, pagedTab.page);
			case 'AuthoredTab':
				return A3($author$project$Query$Challenge$fetchAuthoredChallengePosts, cache, user, pagedTab.page);
			case 'FailedTab':
				return A3($author$project$Query$Challenge$fetchFailedChallengePosts, cache, user, pagedTab.page);
			case 'OnTracksTab':
				return A3($author$project$Query$Challenge$fetchOnTracksChallengePosts, cache, user, pagedTab.page);
			case 'UpcomingTab':
				return A3($author$project$Query$Challenge$fetchUpcomingChallengePosts, cache, user, pagedTab.page);
			default:
				return A3($author$project$Query$Challenge$fetchReportDueChallengePosts, cache, user, pagedTab.page);
		}
	});
var $author$project$State$EventState$CancelledEventTab = {$: 'CancelledEventTab'};
var $author$project$Update$Msg$HttpEventPostsFetched = function (a) {
	return {$: 'HttpEventPostsFetched', a: a};
};
var $author$project$Query$Event$fetchAllEvents = F3(
	function (user, searchFilter, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$EventDecoder$decodeEventId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'event',
								'by-user',
								searchFilter,
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Event$fetchAllCancelledEvents = F2(
	function (user, page) {
		return A3($author$project$Query$Event$fetchAllEvents, user, 'cancelled', page);
	});
var $author$project$Query$Event$fetchEventPosts = F2(
	function (user, ids) {
		return $elm$core$Task$sequence(
			A2(
				$elm$core$List$map,
				$author$project$Query$Event$fetchEventPost(user),
				ids));
	});
var $author$project$Query$Event$fetchCancelledEventPosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventPostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventState$CancelledEventTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Event$fetchEventPosts(user),
						A2($author$project$Query$Event$fetchAllCancelledEvents, user, page)))));
	});
var $author$project$State$EventState$ParticipatedEventTab = {$: 'ParticipatedEventTab'};
var $author$project$Query$Event$fetchAllFinishedEvents = F2(
	function (user, page) {
		return A3($author$project$Query$Event$fetchAllEvents, user, 'finished', page);
	});
var $author$project$Query$Event$fetchFinishedEventPosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventPostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventState$ParticipatedEventTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Event$fetchEventPosts(user),
						A2($author$project$Query$Event$fetchAllFinishedEvents, user, page)))));
	});
var $author$project$Query$Event$fetchAllIncomingEvents = F2(
	function (user, page) {
		return A3($author$project$Query$Event$fetchAllEvents, user, 'incoming', page);
	});
var $author$project$Query$Event$fetchIncomingEventPosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventPostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventState$IncomingEventTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Event$fetchEventPosts(user),
						A2($author$project$Query$Event$fetchAllIncomingEvents, user, page)))));
	});
var $author$project$State$EventState$OrganizedEventTab = {$: 'OrganizedEventTab'};
var $author$project$Query$Event$fetchAllOrganizedEvents = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list($author$project$Query$Json$EventDecoder$decodeEventId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'event',
								'by-owner',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Event$fetchOrganizedEventPosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventPostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventState$OrganizedEventTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Event$fetchEventPosts(user),
						A2($author$project$Query$Event$fetchAllOrganizedEvents, user, page)))));
	});
var $author$project$State$EventState$ParticipationAcceptedEventTab = {$: 'ParticipationAcceptedEventTab'};
var $author$project$Query$Event$fetchAllParticipationAcceptedEvents = F2(
	function (user, page) {
		return A3($author$project$Query$Event$fetchAllEvents, user, 'accepted', page);
	});
var $author$project$Query$Event$fetchParticipationAcceptedEventPosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventPostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventState$ParticipationAcceptedEventTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Event$fetchEventPosts(user),
						A2($author$project$Query$Event$fetchAllParticipationAcceptedEvents, user, page)))));
	});
var $author$project$State$EventState$RequestedEventTab = {$: 'RequestedEventTab'};
var $author$project$Query$Event$fetchAllPendingEvents = F2(
	function (user, page) {
		return A3($author$project$Query$Event$fetchAllEvents, user, 'pending-request', page);
	});
var $author$project$Query$Event$fetchPendingEventPosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventPostsFetched,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					var cache1 = _v0.a;
					var ids = _v0.b;
					return _Utils_Tuple3(
						cache1,
						{page: page, tab: $author$project$State$EventState$RequestedEventTab},
						ids);
				},
				A2(
					$elm$core$Task$andThen,
					function (ids) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							ids,
							A3($author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll, cache, user, ids));
					},
					A2(
						$elm$core$Task$andThen,
						$author$project$Query$Event$fetchEventPosts(user),
						A2($author$project$Query$Event$fetchAllPendingEvents, user, page)))));
	});
var $author$project$Query$Event$fetchUserEventPosts = F3(
	function (cache, user, pagedTab) {
		var _v0 = pagedTab.tab;
		switch (_v0.$) {
			case 'IncomingEventTab':
				return A3($author$project$Query$Event$fetchIncomingEventPosts, cache, user, pagedTab.page);
			case 'ParticipationAcceptedEventTab':
				return A3($author$project$Query$Event$fetchParticipationAcceptedEventPosts, cache, user, pagedTab.page);
			case 'ParticipatedEventTab':
				return A3($author$project$Query$Event$fetchFinishedEventPosts, cache, user, pagedTab.page);
			case 'RequestedEventTab':
				return A3($author$project$Query$Event$fetchPendingEventPosts, cache, user, pagedTab.page);
			case 'CancelledEventTab':
				return A3($author$project$Query$Event$fetchCancelledEventPosts, cache, user, pagedTab.page);
			default:
				return A3($author$project$Query$Event$fetchOrganizedEventPosts, cache, user, pagedTab.page);
		}
	});
var $author$project$Update$Msg$HttpCommentFlagged = function (a) {
	return {$: 'HttpCommentFlagged', a: a};
};
var $author$project$Query$Conversation$flagComment = F2(
	function (user, messageId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpCommentFlagged,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'conversation',
									'flag',
									$author$project$Data$Conversation$toString(messageId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Update$Msg$HttpHashtagFollowed = function (a) {
	return {$: 'HttpHashtagFollowed', a: a};
};
var $author$project$Data$Hashtag$format = function (_v0) {
	var ht = _v0.a;
	return '#' + ht;
};
var $author$project$Query$Following$followHashtag = F2(
	function (user, hashtag) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpHashtagFollowed,
			A3(
				$elm$core$Debug$log,
				'Following hashtag ' + $author$project$Data$Hashtag$format(hashtag),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'hashtag',
									'followers',
									'add',
									$author$project$Data$Hashtag$toString(hashtag)
								]),
							_List_Nil))
				}));
	});
var $author$project$Update$Msg$HttpUserFollowed = function (a) {
	return {$: 'HttpUserFollowed', a: a};
};
var $author$project$Query$Following$followUser = F2(
	function (user, userId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpUserFollowed,
			A3(
				$elm$core$Debug$log,
				'Following user ' + $author$project$Data$User$toString(userId),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['followers', 'add']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'followed-id',
									$author$project$Data$User$toString(userId))
								])))
				}));
	});
var $author$project$State$PageCache$add = F3(
	function (content, page, cache) {
		return _Utils_update(
			cache,
			{
				cache: A3(
					$elm$core$Dict$insert,
					$author$project$Data$Page$number(page),
					content,
					cache.cache)
			});
	});
var $author$project$State$PostPageCache$add = F2(
	function (page, cache) {
		return A3($author$project$State$PageCache$add, page, page.number, cache);
	});
var $author$project$State$PageCache$get = F2(
	function (page, cache) {
		return A2(
			$elm$core$Dict$get,
			$author$project$Data$Page$number(page),
			cache.cache);
	});
var $author$project$Utils$MaybeUtils$isEmpty = function (maybe) {
	if (maybe.$ === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var $author$project$Utils$MaybeUtils$nonEmpty = A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Utils$MaybeUtils$isEmpty);
var $author$project$State$PageCache$contains = F2(
	function (page, cache) {
		return $author$project$Utils$MaybeUtils$nonEmpty(
			A2($author$project$State$PageCache$get, page, cache));
	});
var $author$project$State$PageCache$loading = F2(
	function (page, cache) {
		var pageCached = A2($author$project$State$PageCache$contains, page, cache);
		return _Utils_update(
			cache,
			{
				loading: pageCached ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(page)
			});
	});
var $author$project$State$ChallengeState$from = F3(
	function (posts, pagedTab, state) {
		return {
			currentPage: pagedTab.page,
			currentTab: pagedTab.tab,
			postCache: A2(
				$author$project$State$PageCache$loading,
				pagedTab.page,
				A2(
					$author$project$State$PostPageCache$add,
					{items: posts, number: pagedTab.page},
					state.postCache))
		};
	});
var $author$project$State$UserPageCache$add = F2(
	function (page, cache) {
		return A3($author$project$State$PageCache$add, page, page.number, cache);
	});
var $author$project$State$EventDetailsState$from = F3(
	function (users, pagedTab, state) {
		return {
			currentPage: pagedTab.page,
			currentTab: pagedTab.tab,
			userCache: A2(
				$author$project$State$PageCache$loading,
				pagedTab.page,
				A2(
					$author$project$State$UserPageCache$add,
					{items: users, number: pagedTab.page},
					state.userCache))
		};
	});
var $author$project$State$EventState$from = F3(
	function (posts, pagedTab, state) {
		return {
			currentPage: pagedTab.page,
			currentTab: pagedTab.tab,
			postCache: A2(
				$author$project$State$PageCache$loading,
				pagedTab.page,
				A2(
					$author$project$State$PostPageCache$add,
					{items: posts, number: pagedTab.page},
					state.postCache))
		};
	});
var $author$project$State$FeedState$from = F2(
	function (state, _v0) {
		var page = _v0.a;
		var posts = _v0.b;
		return {
			currentPage: page,
			newPostsAvailable: false,
			postCache: A2(
				$author$project$State$PageCache$loading,
				page,
				A2(
					$author$project$State$PostPageCache$add,
					{items: posts, number: page},
					state.postCache))
		};
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $author$project$State$NotificationState$from = F3(
	function (page, notifs, state) {
		return {
			currentPage: page,
			currentTab: state.currentTab,
			latest: A2(
				$author$project$State$PageCache$loading,
				page,
				A3(
					$author$project$State$PageCache$add,
					{notifications: notifs, number: page},
					page,
					state.latest)),
			unread: state.unread || A2(
				$elm$core$List$any,
				function (notif) {
					return _Utils_eq(notif.status, $author$project$Data$Notification$Unread);
				},
				notifs)
		};
	});
var $author$project$Data$Pinned$Pinned = F2(
	function (a, b) {
		return {$: 'Pinned', a: a, b: b};
	});
var $author$project$Data$Pinned$postIds = function (_v0) {
	var ps = _v0.b;
	return A2(
		$elm$core$List$map,
		function (_v1) {
			var id = _v1.a;
			return id;
		},
		ps);
};
var $author$project$State$PinnedState$from = F2(
	function (state, _v0) {
		var page = _v0.a;
		var posts = _v0.b;
		return {
			currentPage: page,
			postCache: A2(
				$author$project$State$PageCache$loading,
				page,
				A2(
					$author$project$State$PostPageCache$add,
					{
						items: $author$project$Data$Pinned$postIds(
							A2($author$project$Data$Pinned$Pinned, page, posts)),
						number: page
					},
					state.postCache))
		};
	});
var $author$project$State$WallState$from = F2(
	function (state, _v0) {
		var user = _v0.a;
		var page = _v0.b;
		var posts = _v0.c;
		return {
			currentPage: page,
			postCache: A2(
				$author$project$State$PageCache$loading,
				page,
				A2(
					$author$project$State$PostPageCache$add,
					{items: posts, number: page},
					state.postCache)),
			user: $elm$core$Maybe$Just(user)
		};
	});
var $author$project$State$SearchState$fromHashtags = F2(
	function (state, hashtags) {
		return _Utils_update(
			state,
			{
				currentPage: $author$project$Data$Page$first,
				field: '',
				filter: A2($author$project$State$SearchState$ByHashtag, hashtags, $author$project$State$SearchState$AllPostTypes),
				history: A2($elm$core$List$cons, state.filter, state.history),
				postCache: $author$project$State$PageCache$empty,
				userCache: $author$project$State$PageCache$empty
			});
	});
var $author$project$Update$Msg$RefreshFeed = {$: 'RefreshFeed'};
var $author$project$Query$Feed$generateInitialFeed = function (user) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $author$project$Update$Msg$RefreshFeed;
		},
		$elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['post', 'new', 'feed']),
						_List_Nil))
			}));
};
var $author$project$State$Cache$getConversationMessages = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.messages;
				},
				A2(
					$elm$core$Dict$get,
					$author$project$Data$Post$toString(id),
					cache.conversations)));
	});
var $author$project$Update$Msg$HttpFeedChecked = function (a) {
	return {$: 'HttpFeedChecked', a: a};
};
var $author$project$State$FeedState$lastPost = function (state) {
	return A2(
		$elm$core$Maybe$andThen,
		$elm$core$List$head,
		A2(
			$elm$core$Maybe$map,
			function (x) {
				return x.items;
			},
			A2($author$project$State$PageCache$get, $author$project$Data$Page$first, state.postCache)));
};
var $author$project$Query$Feed$hasNewPosts = F2(
	function (user, state) {
		var url = function () {
			var _v0 = $author$project$State$FeedState$lastPost(state);
			if (_v0.$ === 'Just') {
				var postId = _v0.a;
				return _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'feed',
								'has-new-posts',
								$author$project$Data$Post$toString(postId)
							]),
						_List_Nil));
			} else {
				return _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['feed', 'has-posts']),
						_List_Nil));
			}
		}();
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpFeedChecked,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
					timeout: $elm$core$Maybe$Nothing,
					url: url
				}));
	});
var $author$project$Update$Msg$HttpNotificationsChecked = function (a) {
	return {$: 'HttpNotificationsChecked', a: a};
};
var $author$project$Query$Notification$hasUnreadNotifications = function (user) {
	return A2(
		$elm$core$Task$attempt,
		$author$project$Update$Msg$HttpNotificationsChecked,
		$elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($elm$json$Json$Decode$bool),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['notification', 'has-some']),
						_List_Nil))
			}));
};
var $author$project$Update$Logic$nocmd = function (state) {
	return _Utils_Tuple2(state, $elm$core$Platform$Cmd$none);
};
var $author$project$Update$Logic$ifLogged = F2(
	function (f, state) {
		var _v0 = state.user;
		if (_v0.$ === 'LoggedIn') {
			var user = _v0.a;
			return A2(
				$author$project$Update$Logic$cmd,
				f(user),
				state);
		} else {
			return $author$project$Update$Logic$nocmd(
				A2($elm$core$Debug$log, 'Couldn\'t process command: user is not logged in !', $author$project$State$AppState$empty));
		}
	});
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $elm$core$Basics$round = _Basics_round;
var $author$project$Update$Logic$initWindowSize = A2(
	$elm$core$Task$perform,
	$elm$core$Basics$identity,
	A2(
		$elm$core$Task$map,
		function (vp) {
			return A2(
				$author$project$Update$Msg$SetWindowSize,
				$elm$core$Basics$round(vp.scene.width),
				$elm$core$Basics$round(vp.scene.height));
		},
		$elm$browser$Browser$Dom$getViewport));
var $author$project$State$SearchState$input = F2(
	function (state, txt) {
		return _Utils_update(
			state,
			{field: txt});
	});
var $author$project$Data$Page$isAfter = F2(
	function (_v0, _v1) {
		var n = _v0.a;
		var m = _v1.a;
		return _Utils_cmp(n, m) > 0;
	});
var $author$project$State$ChallengeState$isLoadingMore = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.postCache.loading);
};
var $author$project$State$EventDetailsState$isLoadingMore = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.userCache.loading);
};
var $author$project$State$EventState$isLoadingMore = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.postCache.loading);
};
var $author$project$State$FeedState$isLoadingMore = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.postCache.loading);
};
var $author$project$State$NotificationState$isLoadingMore = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.latest.loading);
};
var $author$project$State$PinnedState$isLoadingMore = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.postCache.loading);
};
var $author$project$State$WallState$isLoadingMore = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.postCache.loading);
};
var $author$project$State$SearchState$isLoadingMorePost = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.postCache.loading);
};
var $author$project$State$SearchState$isLoadingMoreUser = function (state) {
	return $author$project$Utils$MaybeUtils$nonEmpty(state.userCache.loading);
};
var $author$project$State$UserState$isUserLoggedIn = function (state) {
	if (state.$ === 'LoggedIn') {
		return true;
	} else {
		return false;
	}
};
var $author$project$State$AppState$isUserLoggedIn = function (state) {
	return $author$project$State$UserState$isUserLoggedIn(state.user);
};
var $author$project$Update$Msg$HttpPostLiked = function (a) {
	return {$: 'HttpPostLiked', a: a};
};
var $author$project$Query$Like$like = F3(
	function (cache, user, postId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpPostLiked,
			A3(
				$elm$core$Debug$log,
				'Liking post ' + $author$project$Data$Post$toString(postId),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['like', 'add']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'post-id',
									$author$project$Data$Post$toString(postId))
								])))
				}));
	});
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Debug$toString = _Debug_toString;
var $author$project$View$InfiniteScroll$endOfViewport = function (vp) {
	return A2(
		$elm$core$Debug$log,
		'EOV: Viewport' + ($elm$core$Debug$toString(vp) + ':'),
		_Utils_cmp(vp.viewport.y + vp.viewport.height, vp.scene.height - 5) > -1);
};
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $author$project$View$InfiniteScroll$loadMoreIfNeeded = F2(
	function (ref, loadMoreMsg) {
		var viewport = A3(
			$elm$core$Debug$log,
			'Browser.Dom.getViewportOf ' + $elm$core$Debug$toString(ref),
			$elm$browser$Browser$Dom$getViewportOf,
			ref);
		return A2(
			$elm$core$Task$attempt,
			function (syncMsg) {
				if (syncMsg.$ === 'Ok') {
					var msg = syncMsg.a;
					return msg;
				} else {
					var b = syncMsg.a;
					return $author$project$Update$Msg$NoOp;
				}
			},
			A2(
				$elm$core$Task$map,
				function (vp) {
					return A2(
						$elm$core$Debug$log,
						'Reached end of viewport: ',
						$author$project$View$InfiniteScroll$endOfViewport(vp)) ? loadMoreMsg : $author$project$Update$Msg$NoOp;
				},
				viewport));
	});
var $author$project$View$InfiniteScroll$startOfViewport = function (vp) {
	return A2(
		$elm$core$Debug$log,
		'SOV: Viewport' + ($elm$core$Debug$toString(vp) + ':'),
		!vp.viewport.y);
};
var $author$project$View$InfiniteScroll$loadMoreOrLessIfNeeded = F3(
	function (ref, loadLess, loadMore) {
		var viewport = A3(
			$elm$core$Debug$log,
			'Browser.Dom.getViewportOf ' + $elm$core$Debug$toString(ref),
			$elm$browser$Browser$Dom$getViewportOf,
			ref);
		return A2(
			$elm$core$Task$attempt,
			function (syncMsg) {
				if (syncMsg.$ === 'Ok') {
					var msg = syncMsg.a;
					return msg;
				} else {
					var b = syncMsg.a;
					return $author$project$Update$Msg$NoOp;
				}
			},
			A2(
				$elm$core$Task$map,
				function (vp) {
					return A2(
						$elm$core$Debug$log,
						'Reached start of viewport: ',
						$author$project$View$InfiniteScroll$startOfViewport(vp)) ? loadLess : (A2(
						$elm$core$Debug$log,
						'Reached end of viewport: ',
						$author$project$View$InfiniteScroll$endOfViewport(vp)) ? loadMore : $author$project$Update$Msg$NoOp);
				},
				viewport));
	});
var $author$project$Update$Msg$HttpChallengeDetailsFetched = function (a) {
	return {$: 'HttpChallengeDetailsFetched', a: a};
};
var $author$project$Query$CacheQueryUtils$fetchAndCacheChallenge = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			A2($author$project$State$Cache$addChallenge, cache, id),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$ChallengeDecoder$decodeChallenge),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'by-id',
									$author$project$Data$Challenge$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$State$Cache$addChallengeReportDates = F3(
	function (cache, id, dates) {
		var cacheId = $author$project$Data$Challenge$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyChallengeEntry,
			A2($elm$core$Dict$get, cacheId, cache.challenges));
		var updated = _Utils_update(
			entry,
			{reportDates: dates});
		return _Utils_update(
			cache,
			{
				challenges: A3($elm$core$Dict$insert, cacheId, updated, cache.challenges)
			});
	});
var $author$project$Query$Challenge$fetchAndCacheChallengeReportDates = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addChallengeReportDates, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$elm$json$Json$Decode$list($author$project$Query$Json$DecoderUtils$decodeTimestamp)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'report',
									'dates',
									$author$project$Data$Challenge$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheChallengeStatistics = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			A2($author$project$State$Cache$addChallengeStatistics, cache, id),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$ChallengeDecoder$decodeChallengeStatistics),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'statistics',
									$author$project$Data$Challenge$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheChallengeStatus = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addChallengeStatus, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$ChallengeDecoder$decodeChallengeStatus),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'status',
									$author$project$Data$Challenge$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$CacheQueryUtils$fetchAndCacheChallengeStatusForUser = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3($author$project$State$Cache$addChallengeOutcomeStatus, cache, id, res);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$ChallengeDecoder$decodeChallengeOutcomeStatus),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'status',
									$author$project$Data$Challenge$toString(id),
									'for-user',
									$author$project$Data$User$toString(user.id)
								]),
							_List_Nil))
				}));
	});
var $author$project$State$Cache$addChallengeStepReports = F3(
	function (cache, id, steps) {
		var cacheId = $author$project$Data$Challenge$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyChallengeEntry,
			A2($elm$core$Dict$get, cacheId, cache.challenges));
		var updated = _Utils_update(
			entry,
			{stepReports: steps});
		return _Utils_update(
			cache,
			{
				challenges: A3($elm$core$Dict$insert, cacheId, updated, cache.challenges)
			});
	});
var $author$project$Data$Challenge$ChallengeStepReport = F2(
	function (step, status) {
		return {status: status, step: step};
	});
var $author$project$Data$Challenge$Failure = {$: 'Failure'};
var $author$project$Query$Json$ChallengeDecoder$decodeStepFailure = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Failure;
	},
	A2($elm$json$Json$Decode$field, 'Failure', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$PartialSuccess = {$: 'PartialSuccess'};
var $author$project$Query$Json$ChallengeDecoder$decodeStepPartialSuccess = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$PartialSuccess;
	},
	A2($elm$json$Json$Decode$field, 'Partial', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$Skipped = {$: 'Skipped'};
var $author$project$Query$Json$ChallengeDecoder$decodeStepSkipped = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Skipped;
	},
	A2($elm$json$Json$Decode$field, 'Skipped', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Data$Challenge$Success = {$: 'Success'};
var $author$project$Query$Json$ChallengeDecoder$decodeStepSuccess = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Challenge$Success;
	},
	A2($elm$json$Json$Decode$field, 'Success', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Query$Json$ChallengeDecoder$decodeChallengeStepStatus = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$ChallengeDecoder$decodeStepSuccess, $author$project$Query$Json$ChallengeDecoder$decodeStepFailure, $author$project$Query$Json$ChallengeDecoder$decodeStepSkipped, $author$project$Query$Json$ChallengeDecoder$decodeStepPartialSuccess]));
var $author$project$Query$Json$ChallengeDecoder$decodeStepReport = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'status',
	$author$project$Query$Json$ChallengeDecoder$decodeChallengeStepStatus,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'step',
		$elm$json$Json$Decode$int,
		$elm$json$Json$Decode$succeed($author$project$Data$Challenge$ChallengeStepReport)));
var $author$project$Query$Challenge$fetchAndCacheChallengeStepReports = F3(
	function (cache, user, id) {
		return A2(
			$elm$core$Task$map,
			function (res) {
				return A3(
					$author$project$State$Cache$addChallengeStepReports,
					cache,
					id,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.step;
						},
						res));
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$elm$json$Json$Decode$list($author$project$Query$Json$ChallengeDecoder$decodeStepReport)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'reported',
									$author$project$Data$Challenge$toString(id)
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$Challenge$fetchAndCacheChallengeDetails = F3(
	function (cache, user, challengeId) {
		return A2(
			$elm$core$Task$andThen,
			function (cache6) {
				return A3($author$project$Query$CacheQueryUtils$fetchAndCacheChallengeStatistics, cache6, user, challengeId);
			},
			A2(
				$elm$core$Task$andThen,
				function (cache5) {
					return A3($author$project$Query$Challenge$fetchAndCacheChallengeStepReports, cache5, user, challengeId);
				},
				A2(
					$elm$core$Task$andThen,
					function (cache4) {
						return A3($author$project$Query$Challenge$fetchAndCacheChallengeReportDates, cache4, user, challengeId);
					},
					A2(
						$elm$core$Task$andThen,
						function (cache3) {
							return A3($author$project$Query$CacheQueryUtils$fetchAndCacheChallengeStatusForUser, cache3, user, challengeId);
						},
						A2(
							$elm$core$Task$andThen,
							function (cache2) {
								return A3($author$project$Query$CacheQueryUtils$fetchAndCacheChallengeStatus, cache2, user, challengeId);
							},
							A2(
								$elm$core$Task$andThen,
								function (cache1) {
									return A3($author$project$Query$CacheQueryUtils$fetchAndCacheChallenge, cache1, user, challengeId);
								},
								$elm$core$Task$succeed(cache)))))));
	});
var $author$project$Query$Challenge$fetchChallengeDetails = F3(
	function (cache, user, challengeId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengeDetailsFetched,
			A2(
				$elm$core$Task$map,
				function (c) {
					return _Utils_Tuple2(c, challengeId);
				},
				A3($author$project$Query$Challenge$fetchAndCacheChallengeDetails, cache, user, challengeId)));
	});
var $author$project$Update$Msg$HttpFeedFetched = function (a) {
	return {$: 'HttpFeedFetched', a: a};
};
var $author$project$Data$Feed$Feed = F2(
	function (a, b) {
		return {$: 'Feed', a: a, b: b};
	});
var $author$project$Query$Json$PostDecoder$decodePostIds = $elm$json$Json$Decode$list($author$project$Query$Json$PostDecoder$decodePostId);
var $author$project$Query$Json$FeedDecoder$decodeFeed = function (page) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'posts',
		$author$project$Query$Json$PostDecoder$decodePostIds,
		A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
			page,
			$elm$json$Json$Decode$succeed($author$project$Data$Feed$Feed)));
};
var $author$project$Query$Feed$fetchFeedPage = F2(
	function (user, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$author$project$Query$Json$FeedDecoder$decodeFeed(page)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'feed',
								$author$project$Data$User$toString(user.id),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Data$Feed$postIds = function (_v0) {
	var ps = _v0.b;
	return ps;
};
var $author$project$Query$Feed$fetchFeed = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpFeedFetched,
			A2(
				$elm$core$Task$andThen,
				function (feed) {
					return A2(
						$author$project$Query$TaskUtils$thread,
						feed,
						A3(
							$author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll,
							cache,
							user,
							$author$project$Data$Feed$postIds(feed)));
				},
				A2($author$project$Query$Feed$fetchFeedPage, user, page)));
	});
var $author$project$Update$Msg$HttpPinnedPostsFetched = function (a) {
	return {$: 'HttpPinnedPostsFetched', a: a};
};
var $author$project$State$Cache$addPostPinned = F2(
	function (cache, _v0) {
		var id = _v0.a;
		return _Utils_update(
			cache,
			{
				pinned: A2(
					$elm$core$Set$insert,
					$author$project$Data$Post$toString(id),
					cache.pinned)
			});
	});
var $author$project$State$Cache$addAllPostPinned = F2(
	function (cache, ids) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (pp, c) {
					return A2($author$project$State$Cache$addPostPinned, c, pp);
				}),
			cache,
			ids);
	});
var $author$project$Data$Post$PinnedPost = F2(
	function (a, b) {
		return {$: 'PinnedPost', a: a, b: b};
	});
var $author$project$Query$Json$PinnedPost$decodePinnedPost = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'timestamp',
	$author$project$Query$Json$DecoderUtils$decodeTimestamp,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'postId',
		$author$project$Query$Json$PostDecoder$decodePostId,
		$elm$json$Json$Decode$succeed($author$project$Data$Post$PinnedPost)));
var $author$project$Query$Json$PinnedPost$decodePinnedPosts = $elm$json$Json$Decode$list($author$project$Query$Json$PinnedPost$decodePinnedPost);
var $author$project$Query$Pinned$fetchPinnedPostList = F2(
	function (user, page) {
		return A3(
			$elm$core$Debug$log,
			'Pinned posts',
			$elm$http$Http$task,
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$PinnedPost$decodePinnedPosts),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'pin',
								'pinned',
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$State$PinnedState$postId = function (_v0) {
	var id = _v0.a;
	return id;
};
var $author$project$Query$Pinned$fetchPinnedPosts = F3(
	function (cache, user, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpPinnedPostsFetched,
			A2(
				$elm$core$Task$andThen,
				function (_v0) {
					var cache1 = _v0.a;
					var pinned = _v0.b;
					return $elm$core$Task$succeed(
						_Utils_Tuple2(
							A2($author$project$State$Cache$addAllPostPinned, cache1, pinned),
							A2($author$project$Data$Pinned$Pinned, page, pinned)));
				},
				A2(
					$elm$core$Task$andThen,
					function (pinned) {
						return A2(
							$author$project$Query$TaskUtils$thread,
							pinned,
							A3(
								$author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll,
								cache,
								user,
								A2($elm$core$List$map, $author$project$State$PinnedState$postId, pinned)));
					},
					A4($elm$core$Debug$log, 'Fetching pinned posts', $author$project$Query$Pinned$fetchPinnedPostList, user, page))));
	});
var $author$project$Update$Msg$HttpWallFetched = function (a) {
	return {$: 'HttpWallFetched', a: a};
};
var $author$project$State$Cache$addScoreBreakdown = F3(
	function (cache, id, content) {
		return _Utils_update(
			cache,
			{
				scores: A3(
					$elm$core$Dict$insert,
					$author$project$Data$User$toString(id),
					content,
					cache.scores)
			});
	});
var $author$project$Data$Rank$ScoreBreakdown = F4(
	function (fromLikes, fromFollows, fromPosts, fromEvents) {
		return {fromEvents: fromEvents, fromFollows: fromFollows, fromLikes: fromLikes, fromPosts: fromPosts};
	});
var $author$project$Query$Json$RankDecoder$decodeBreakdown = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'fromEvents',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'fromPosts',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'fromFollows',
			$elm$json$Json$Decode$int,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'fromLikes',
				$elm$json$Json$Decode$int,
				$elm$json$Json$Decode$succeed($author$project$Data$Rank$ScoreBreakdown)))));
var $author$project$Query$CacheQueryUtils$fetchAndCacheScoreBreakdown = F3(
	function (cache, user, targetId) {
		return A2(
			$elm$core$Task$map,
			A2($author$project$State$Cache$addScoreBreakdown, cache, targetId),
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$RankDecoder$decodeBreakdown),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'rank',
									'breakdown',
									$author$project$Data$User$toString(targetId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Data$Wall$Wall = F3(
	function (a, b, c) {
		return {$: 'Wall', a: a, b: b, c: c};
	});
var $author$project$Query$Json$WallDecoder$decodeWall = F2(
	function (userId, page) {
		return A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'posts',
			$author$project$Query$Json$PostDecoder$decodePostIds,
			A2(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
				page,
				A2(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
					userId,
					$elm$json$Json$Decode$succeed($author$project$Data$Wall$Wall))));
	});
var $author$project$Query$Wall$fetchWallPage = F3(
	function (user, targetId, page) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					A2($author$project$Query$Json$WallDecoder$decodeWall, targetId, page)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'wall',
								$author$project$Data$User$toString(targetId),
								$elm$core$String$fromInt(
								$author$project$Data$Page$number(page))
							]),
						_List_Nil))
			});
	});
var $author$project$Data$Wall$postIds = function (_v0) {
	var ps = _v0.c;
	return ps;
};
var $author$project$Query$Wall$fetchAndCacheUserWallPage = F4(
	function (cache, user, targetId, page) {
		return A2(
			$elm$core$Task$andThen,
			function (_v0) {
				var cache1 = _v0.a;
				var wall = _v0.b;
				return A2(
					$author$project$Query$TaskUtils$thread,
					wall,
					A3($author$project$Query$CacheQueryUtils$fetchAndCacheScoreBreakdown, cache1, user, targetId));
			},
			A2(
				$elm$core$Task$andThen,
				function (wall) {
					return A2(
						$author$project$Query$TaskUtils$thread,
						wall,
						A3(
							$author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll,
							cache,
							user,
							$author$project$Data$Wall$postIds(wall)));
				},
				A3($author$project$Query$Wall$fetchWallPage, user, targetId, page)));
	});
var $author$project$Query$Wall$fetchUserWall = F4(
	function (cache, user, targetId, page) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpWallFetched,
			A4($author$project$Query$Wall$fetchAndCacheUserWallPage, cache, user, targetId, page));
	});
var $author$project$Query$Wall$fetchWall = F3(
	function (cache, user, page) {
		return A4($author$project$Query$Wall$fetchUserWall, cache, user, user.id, page);
	});
var $author$project$Query$Wall$fetchUserIdByPseudo = F2(
	function (user, pseudo) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$maybe($author$project$Query$Json$DecoderUtils$decodeUserId)),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['user', 'by-pseudo', pseudo]),
						_List_Nil))
			});
	});
var $author$project$Query$Wall$fetchWallByPseudo = F3(
	function (cache, user, pseudo) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpWallFetched,
			A2(
				$elm$core$Task$andThen,
				function (maybeUserId) {
					if (maybeUserId.$ === 'Just') {
						var userId = maybeUserId.a;
						return A4($author$project$Query$Wall$fetchAndCacheUserWallPage, cache, user, userId, $author$project$Data$Page$first);
					} else {
						return $elm$core$Task$fail(
							$elm$http$Http$BadStatus(0));
					}
				},
				A2($author$project$Query$Wall$fetchUserIdByPseudo, user, pseudo)));
	});
var $author$project$Update$Msg$HttpPostSearchResultFetched = function (a) {
	return {$: 'HttpPostSearchResultFetched', a: a};
};
var $author$project$Update$Msg$HttpUserSearchResultFetched = function (a) {
	return {$: 'HttpUserSearchResultFetched', a: a};
};
var $author$project$State$SearchState$isPostSearchFilter = function (filter) {
	if (filter.$ === 'ByUserPrefix') {
		return false;
	} else {
		return true;
	}
};
var $author$project$Query$Search$postIds = function (_v0) {
	var ps = _v0.b;
	return ps;
};
var $author$project$State$SearchState$SearchResult = F2(
	function (a, b) {
		return {$: 'SearchResult', a: a, b: b};
	});
var $author$project$State$SearchState$postTypeFilter = function (filter) {
	switch (filter.$) {
		case 'ByHashtag':
			var pt = filter.b;
			return $elm$core$Maybe$Just(pt);
		case 'ByAuthor':
			var pt = filter.b;
			return $elm$core$Maybe$Just(pt);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Query$Search$postTypeToString = function (pt) {
	switch (pt.$) {
		case 'AllPostTypes':
			return 'all';
		case 'TipPosts':
			return 'tips';
		case 'ChallengePosts':
			return 'challenges';
		case 'EventPosts':
			return 'events';
		case 'PollPosts':
			return 'polls';
		default:
			return 'free-texts';
	}
};
var $author$project$Query$Search$postTypeFromFilter = function (filter) {
	return A2(
		$elm$core$Maybe$withDefault,
		'error',
		A2(
			$elm$core$Maybe$map,
			$author$project$Query$Search$postTypeToString,
			$author$project$State$SearchState$postTypeFilter(filter)));
};
var $author$project$Query$Search$userIdUrlString = function (filter) {
	if (filter.$ === 'ByAuthor') {
		var userId = filter.a;
		return $author$project$Data$User$toString(userId);
	} else {
		return '';
	}
};
var $author$project$Query$Search$searchByAuthor = F3(
	function (user, filter, page) {
		return A2(
			$elm$core$Task$map,
			function (all) {
				return A2($author$project$State$SearchState$SearchResult, page, all);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$elm$json$Json$Decode$list($author$project$Query$Json$PostDecoder$decodePostId)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'post',
									$author$project$Query$Search$postTypeFromFilter(filter),
									'by-author',
									$author$project$Query$Search$userIdUrlString(filter),
									$elm$core$String$fromInt(
									$author$project$Data$Page$number(page))
								]),
							_List_Nil))
				}));
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $author$project$Query$Search$hashtagUrlString = function (filter) {
	if (filter.$ === 'ByHashtag') {
		var tags = filter.a;
		return $elm$core$String$concat(
			A2(
				$elm$core$List$intersperse,
				'+',
				A2($elm$core$List$map, $author$project$Data$Hashtag$toString, tags)));
	} else {
		return '';
	}
};
var $author$project$Query$Search$searchByHashtag = F3(
	function (user, filter, page) {
		return A2(
			$elm$core$Task$map,
			function (all) {
				return A2($author$project$State$SearchState$SearchResult, page, all);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$elm$json$Json$Decode$list($author$project$Query$Json$PostDecoder$decodePostId)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'post',
									$author$project$Query$Search$postTypeFromFilter(filter),
									'by-hashtag',
									$author$project$Query$Search$hashtagUrlString(filter),
									$elm$core$String$fromInt(
									$author$project$Data$Page$number(page))
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$Search$searchPostFromFilter = F3(
	function (user, filter, page) {
		switch (filter.$) {
			case 'EmptySearch':
				return $elm$core$Task$succeed(
					A2($author$project$State$SearchState$SearchResult, $author$project$Data$Page$first, _List_Nil));
			case 'ByHashtag':
				return A3($author$project$Query$Search$searchByHashtag, user, filter, page);
			case 'ByAuthor':
				return A3($author$project$Query$Search$searchByAuthor, user, filter, page);
			default:
				return $elm$core$Task$succeed(
					A2($author$project$State$SearchState$SearchResult, $author$project$Data$Page$first, _List_Nil));
		}
	});
var $author$project$Query$Search$searchByUserPrefix = F3(
	function (user, filter, page) {
		return A2(
			$elm$core$Task$map,
			function (all) {
				return A2($author$project$State$SearchState$SearchResult, page, all);
			},
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$elm$json$Json$Decode$list($author$project$Query$Json$DecoderUtils$decodeUserId)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'user',
									'by-prefix',
									filter,
									$elm$core$String$fromInt(
									$author$project$Data$Page$number(page))
								]),
							_List_Nil))
				}));
	});
var $author$project$Query$Search$searchUserFromFilter = F3(
	function (user, filter, page) {
		if (filter.$ === 'ByUserPrefix') {
			var prefix = filter.a;
			return A3($author$project$Query$Search$searchByUserPrefix, user, prefix, page);
		} else {
			return $elm$core$Task$succeed(
				A2($author$project$State$SearchState$SearchResult, $author$project$Data$Page$first, _List_Nil));
		}
	});
var $author$project$Query$Search$userIds = function (_v0) {
	var users = _v0.b;
	return users;
};
var $author$project$Query$Search$performSearch = F4(
	function (cache, user, filter, page) {
		return $author$project$State$SearchState$isPostSearchFilter(filter) ? A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpPostSearchResultFetched,
			A2(
				$elm$core$Task$andThen,
				function (searchResult) {
					return A2(
						$author$project$Query$TaskUtils$thread,
						searchResult,
						A3(
							$author$project$Query$AggregatedCacheQueryUtils$fetchAggregatedAndCacheAll,
							cache,
							user,
							$author$project$Query$Search$postIds(searchResult)));
				},
				A3($author$project$Query$Search$searchPostFromFilter, user, filter, page))) : A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpUserSearchResultFetched,
			A2(
				$elm$core$Task$andThen,
				function (searchResult) {
					return A2(
						$author$project$Query$TaskUtils$thread,
						searchResult,
						A3(
							$author$project$Query$CacheQueryUtils$fetchAndCacheAllUsers,
							cache,
							user,
							$author$project$Query$Search$userIds(searchResult)));
				},
				A3($author$project$Query$Search$searchUserFromFilter, user, filter, page)));
	});
var $author$project$Update$Logic$loadPageContent = F2(
	function (state, page) {
		var _v0 = _Utils_Tuple2(state.user, page);
		_v0$11:
		while (true) {
			if (_v0.a.$ === 'LoggedIn') {
				switch (_v0.b.$) {
					case 'WallPage':
						var user = _v0.a.a;
						var _v1 = _v0.b;
						return A3($author$project$Query$Wall$fetchWall, state.cache, user, state.wall.currentPage);
					case 'FeedPage':
						var user = _v0.a.a;
						var _v2 = _v0.b;
						return A3($author$project$Query$Feed$fetchFeed, state.cache, user, state.feed.currentPage);
					case 'PinnedPostPage':
						var user = _v0.a.a;
						var _v3 = _v0.b;
						return A3($author$project$Query$Pinned$fetchPinnedPosts, state.cache, user, state.pinned.currentPage);
					case 'SearchPage':
						var user = _v0.a.a;
						var _v4 = _v0.b;
						return A4($author$project$Query$Search$performSearch, state.cache, user, state.search.filter, state.search.currentPage);
					case 'NotificationPage':
						var user = _v0.a.a;
						var _v5 = _v0.b;
						return A4($author$project$Query$Notification$fetchNotifications, state.cache, user, state.notifications.currentTab, state.notifications.currentPage);
					case 'UserPage':
						var user = _v0.a.a;
						var userId = _v0.b.a;
						return A4(
							$author$project$Query$Wall$fetchUserWall,
							state.cache,
							user,
							userId,
							_Utils_eq(
								state.wall.user,
								$elm$core$Maybe$Just(userId)) ? state.wall.currentPage : $author$project$Data$Page$first);
					case 'PseudoPage':
						var user = _v0.a.a;
						var pseudo = _v0.b.a;
						return A3($author$project$Query$Wall$fetchWallByPseudo, state.cache, user, pseudo);
					case 'ChallengePage':
						var user = _v0.a.a;
						var _v6 = _v0.b;
						return A3(
							$author$project$Query$Challenge$fetchUserChallengePosts,
							state.cache,
							user,
							{page: $author$project$Data$Page$first, tab: state.challenge.currentTab});
					case 'ChallengeDetailsPage':
						var user = _v0.a.a;
						var challengeId = _v0.b.a;
						return A3($author$project$Query$Challenge$fetchChallengeDetails, state.cache, user, challengeId);
					case 'EventPage':
						var user = _v0.a.a;
						var _v7 = _v0.b;
						return A3(
							$author$project$Query$Event$fetchUserEventPosts,
							state.cache,
							user,
							{page: $author$project$Data$Page$first, tab: state.event.currentTab});
					case 'EventDetailsPage':
						var user = _v0.a.a;
						var eventId = _v0.b.a;
						return A4(
							$author$project$Query$Event$fetchEventDetailsContentForTab,
							state.cache,
							user,
							eventId,
							{page: $author$project$Data$Page$first, tab: state.eventDetails.currentTab});
					default:
						break _v0$11;
				}
			} else {
				break _v0$11;
			}
		}
		return $elm$core$Platform$Cmd$none;
	});
var $author$project$Update$Msg$HttpAuthenticated = function (a) {
	return {$: 'HttpAuthenticated', a: a};
};
var $author$project$State$AppState$HttpError = function (a) {
	return {$: 'HttpError', a: a};
};
var $author$project$Data$Authentication$Authenticated = F3(
	function (a, b, c) {
		return {$: 'Authenticated', a: a, b: b, c: c};
	});
var $author$project$Data$Token$Token = function (a) {
	return {$: 'Token', a: a};
};
var $author$project$Query$Json$DecoderUtils$decodeToken = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'value',
	$author$project$Query$Json$DecoderUtils$decodeUuid,
	$elm$json$Json$Decode$succeed($author$project$Data$Token$Token));
var $author$project$Query$Json$UserDecoder$decodeAuthenticated = A2(
	$elm$json$Json$Decode$field,
	'Authenticated',
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'validUntil',
		$author$project$Query$Json$DecoderUtils$decodeTimestamp,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'user',
			$author$project$Query$Json$DecoderUtils$decodeUserId,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'token',
				$author$project$Query$Json$DecoderUtils$decodeToken,
				$elm$json$Json$Decode$succeed($author$project$Data$Authentication$Authenticated)))));
var $author$project$Data$Authentication$NotAuthenticated = {$: 'NotAuthenticated'};
var $author$project$Query$Json$UserDecoder$decodeNotAuthenticated = A2(
	$elm$json$Json$Decode$map,
	function (_v0) {
		return $author$project$Data$Authentication$NotAuthenticated;
	},
	A2($elm$json$Json$Decode$field, 'NotAuthenticated', $author$project$Query$Json$DecoderUtils$unitDecoder));
var $author$project$Query$Json$UserDecoder$decodeAuthentication = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[$author$project$Query$Json$UserDecoder$decodeAuthenticated, $author$project$Query$Json$UserDecoder$decodeNotAuthenticated]));
var $elm$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			$elm$core$Task$onError,
			A2($elm$core$Basics$composeL, $elm$core$Task$fail, convert),
			task);
	});
var $author$project$Query$Authentication$authenticate = F2(
	function (_v0, _v1) {
		var email = _v0.a;
		var pw = _v1.a;
		return A2(
			$elm$core$Task$mapError,
			$author$project$State$AppState$HttpError,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_Nil,
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$UserDecoder$decodeAuthentication),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['auth', 'authenticate']),
							_List_fromArray(
								[
									A2($elm$url$Url$Builder$string, 'email-hash', email),
									A2($elm$url$Url$Builder$string, 'password-hash', pw)
								])))
				}));
	});
var $author$project$State$AppState$AuthenticationFailed = {$: 'AuthenticationFailed'};
var $author$project$Query$Authentication$authHeader = function (tok) {
	return A2(
		$elm$http$Http$header,
		'Authorization',
		$author$project$Data$Token$toString(tok));
};
var $author$project$Query$Authentication$userInfo = function (auth) {
	if (auth.$ === 'NotAuthenticated') {
		return A2(
			$elm$core$Debug$log,
			'Authentication failed',
			$elm$core$Task$fail($author$project$State$AppState$AuthenticationFailed));
	} else {
		var tok = auth.a;
		var userId = auth.b;
		return A2(
			$elm$core$Task$mapError,
			$author$project$State$AppState$HttpError,
			A3(
				$elm$core$Debug$log,
				'Authenticated. Asking for profile',
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$Authentication$authHeader(tok)
						]),
					method: 'GET',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
						$author$project$Query$Json$UserDecoder$decodeUserProfile(tok)),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'user',
									'profile',
									$author$project$Data$User$toString(userId)
								]),
							_List_Nil))
				}));
	}
};
var $author$project$Query$Authentication$authenticatedUser = F2(
	function (email, pw) {
		return A2(
			$elm$core$Task$andThen,
			$author$project$Query$Authentication$userInfo,
			A2($author$project$Query$Authentication$authenticate, email, pw));
	});
var $author$project$Query$Authentication$logon = F2(
	function (email, pw) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpAuthenticated,
			A2($author$project$Query$Authentication$authenticatedUser, email, pw));
	});
var $author$project$Update$Msg$HttpMarkNotificationAsRead = function (a) {
	return {$: 'HttpMarkNotificationAsRead', a: a};
};
var $author$project$Data$Notification$toString = function (_v0) {
	var uuid = _v0.a;
	return $danyx23$elm_uuid$Uuid$toString(uuid);
};
var $author$project$Query$Notification$markAsRead = F2(
	function (user, notifId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpMarkNotificationAsRead,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['notification', 'read']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'notif-id',
									$author$project$Data$Notification$toString(notifId))
								])))
				}));
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $author$project$State$PageCache$map = F2(
	function (f, cache) {
		return {
			cache: A2(
				$elm$core$Dict$map,
				F2(
					function (k, v) {
						return f(v);
					}),
				cache.cache),
			loading: cache.loading,
			noMoreData: cache.noMoreData
		};
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$State$NotificationState$markNotificationAsRead = F2(
	function (id, cache) {
		var markNotificationInPage = F3(
			function (nid, status, page) {
				return _Utils_update(
					page,
					{
						notifications: A2(
							$elm$core$List$map,
							function (notif) {
								return (!_Utils_eq(notif.id, nid)) ? notif : _Utils_update(
									notif,
									{status: status});
							},
							page.notifications)
					});
			});
		return A2(
			$author$project$State$PageCache$map,
			A2(markNotificationInPage, id, $author$project$Data$Notification$Read),
			cache);
	});
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $author$project$State$PageCache$isEmpty = function (cache) {
	return $elm$core$Dict$isEmpty(cache.cache);
};
var $author$project$State$NotificationState$refreshUnreadStatus = function (state) {
	return _Utils_update(
		state,
		{
			unread: !$author$project$State$PageCache$isEmpty(state.latest)
		});
};
var $author$project$State$NotificationState$markAsRead = F2(
	function (state, id) {
		return $author$project$State$NotificationState$refreshUnreadStatus(
			_Utils_update(
				state,
				{
					latest: A2($author$project$State$NotificationState$markNotificationAsRead, id, state.latest)
				}));
	});
var $author$project$State$FeedState$moveToPage = F2(
	function (state, page) {
		return state.postCache.noMoreData ? state : (_Utils_eq(state.currentPage, page) ? state : ($author$project$State$FeedState$isLoadingMore(state) ? state : _Utils_update(
			state,
			{
				currentPage: page,
				postCache: A2($author$project$State$PageCache$loading, page, state.postCache)
			})));
	});
var $author$project$State$NotificationState$moveToPage = F2(
	function (state, page) {
		return state.latest.noMoreData ? state : (_Utils_eq(state.currentPage, page) ? state : ($author$project$State$NotificationState$isLoadingMore(state) ? state : _Utils_update(
			state,
			{
				currentPage: page,
				latest: A2($author$project$State$PageCache$loading, page, state.latest)
			})));
	});
var $author$project$State$PinnedState$moveToPage = F2(
	function (state, page) {
		return state.postCache.noMoreData ? state : (_Utils_eq(state.currentPage, page) ? state : ($author$project$State$PinnedState$isLoadingMore(state) ? state : _Utils_update(
			state,
			{
				currentPage: page,
				postCache: A2($author$project$State$PageCache$loading, page, state.postCache)
			})));
	});
var $author$project$State$SearchState$moveToPage = F2(
	function (state, page) {
		return _Utils_update(
			state,
			{currentPage: page});
	});
var $author$project$State$WallState$moveToPage = F2(
	function (state, page) {
		return state.postCache.noMoreData ? state : (_Utils_eq(state.currentPage, page) ? state : ($author$project$State$WallState$isLoadingMore(state) ? state : _Utils_update(
			state,
			{
				currentPage: page,
				postCache: A2($author$project$State$PageCache$loading, page, state.postCache)
			})));
	});
var $author$project$State$FormState$newChallengePosted = function (formState) {
	var wizard = formState.newChallengeWizard;
	return _Utils_update(
		formState,
		{
			newChallengeWizard: _Utils_update(
				wizard,
				{posting: false})
		});
};
var $author$project$State$FormState$newEventPosted = function (formState) {
	var wizard = formState.newEventWizard;
	return _Utils_update(
		formState,
		{
			newEventWizard: _Utils_update(
				wizard,
				{posting: false})
		});
};
var $author$project$State$FormState$newFreeTextPosted = function (formState) {
	var wizard = formState.newFreeTextWizard;
	return _Utils_update(
		formState,
		{
			newFreeTextWizard: _Utils_update(
				wizard,
				{posting: false})
		});
};
var $author$project$State$FormState$newPollPosted = function (formState) {
	var wizard = formState.newPollWizard;
	return _Utils_update(
		formState,
		{
			newPollWizard: _Utils_update(
				wizard,
				{posting: false})
		});
};
var $author$project$State$FormState$newTipPosted = function (formState) {
	var wizard = formState.newTipWizard;
	return _Utils_update(
		formState,
		{
			newTipWizard: _Utils_update(
				wizard,
				{posting: false})
		});
};
var $author$project$State$ChallengeState$noMoreDataToLoad = function (state) {
	return state.postCache.noMoreData;
};
var $author$project$State$EventDetailsState$noMoreDataToLoad = function (state) {
	return state.userCache.noMoreData;
};
var $author$project$State$EventState$noMoreDataToLoad = function (state) {
	return state.postCache.noMoreData;
};
var $author$project$State$FeedState$noMoreDataToLoad = function (state) {
	return state.postCache.noMoreData;
};
var $author$project$State$NotificationState$noMoreDataToLoad = function (state) {
	return state.latest.noMoreData;
};
var $author$project$State$PinnedState$noMoreDataToLoad = function (state) {
	return state.postCache.noMoreData;
};
var $author$project$State$WallState$noMoreDataToLoad = function (state) {
	return state.postCache.noMoreData;
};
var $author$project$State$SearchState$noMorePostToLoad = function (state) {
	return state.postCache.noMoreData;
};
var $author$project$State$SearchState$noMoreUserToLoad = function (state) {
	return state.userCache.noMoreData;
};
var $author$project$Update$Logic$notificationDelay = 30000.0;
var $author$project$Update$Msg$HttpPostPinned = function (a) {
	return {$: 'HttpPostPinned', a: a};
};
var $author$project$Query$Pinned$pin = F2(
	function (user, postId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpPostPinned,
			A3(
				$elm$core$Debug$log,
				'Pinning post ' + $author$project$Data$Post$toString(postId),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['pin', 'add']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'post-id',
									$author$project$Data$Post$toString(postId))
								])))
				}));
	});
var $author$project$Update$Msg$HttpNewChallengePosted = function (a) {
	return {$: 'HttpNewChallengePosted', a: a};
};
var $author$project$Query$Challenge$challengeFollowers = F2(
	function (user, challengeId) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'followers',
								'to',
								$author$project$Data$Challenge$toString(challengeId)
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$challengeUser = F3(
	function (user, challengeId, target) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'challenge',
								'user',
								$author$project$Data$User$toString(target),
								'to',
								$author$project$Data$Challenge$toString(challengeId)
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Challenge$challengeAudience = F3(
	function (user, audience, challengeId) {
		if (audience.$ === 'Followers') {
			return A2($author$project$Query$Challenge$challengeFollowers, user, challengeId);
		} else {
			var targets = audience.a;
			return A2(
				$elm$core$Task$map,
				function (_v1) {
					return _Utils_Tuple0;
				},
				$elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						A2($author$project$Query$Challenge$challengeUser, user, challengeId),
						targets)));
		}
	});
var $author$project$Query$Challenge$periodToMillis = function (period) {
	if (period.$ === 'Daily') {
		return ((24 * 60) * 60) * 1000;
	} else {
		return (((7 * 24) * 60) * 60) * 1000;
	}
};
var $author$project$Query$Challenge$toSchedule = function (state) {
	var start = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Data$Schedule$UTC(0),
		state.start);
	var period = $author$project$Data$Schedule$Duration(
		$author$project$Query$Challenge$periodToMillis(state.reportPeriod));
	var end = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Data$Schedule$UTC(0),
		state.end);
	return A4($author$project$Data$Schedule$Recurring, start, period, period, end);
};
var $author$project$Data$Schedule$duration = function (schedule) {
	if (schedule.$ === 'OneOff') {
		var x = schedule.a.a;
		var y = schedule.b.a;
		return $author$project$Data$Schedule$Duration(y - x);
	} else {
		var d = schedule.b;
		return d;
	}
};
var $author$project$Query$Challenge$durationToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$Data$Schedule$end = function (schedule) {
	if (schedule.$ === 'OneOff') {
		var x = schedule.b;
		return x;
	} else {
		var x = schedule.d;
		return x;
	}
};
var $author$project$Data$Schedule$start = function (schedule) {
	if (schedule.$ === 'OneOff') {
		var x = schedule.a;
		return x;
	} else {
		var x = schedule.a;
		return x;
	}
};
var $author$project$Query$Challenge$toMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$Query$Challenge$toScheduleParam = function (schedule) {
	return 'rec(' + ($elm$core$String$fromInt(
		$author$project$Query$Challenge$toMillis(
			$author$project$Data$Schedule$start(schedule))) + (',' + ($elm$core$String$fromInt(
		$author$project$Query$Challenge$durationToMillis(
			$author$project$Data$Schedule$duration(schedule))) + (',' + ($elm$core$String$fromInt(
		$author$project$Query$Challenge$durationToMillis(
			$author$project$Data$Schedule$duration(schedule))) + (',' + ($elm$core$String$fromInt(
		$author$project$Query$Challenge$toMillis(
			$author$project$Data$Schedule$end(schedule))) + ')')))))));
};
var $author$project$Query$Challenge$toSuccessMeasureParam = function (successMeasure) {
	return 'success(' + ($elm$core$String$fromInt(successMeasure.maxFailure) + (',' + ($elm$core$String$fromInt(successMeasure.maxSkip) + (',' + ($elm$core$String$fromInt(successMeasure.maxPartial) + ')')))));
};
var $author$project$Query$Challenge$createNewChallenge = F2(
	function (user, newChallenge) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$ChallengeDecoder$decodeChallengeId),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['challenge', 'new']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'title',
								A2($elm$core$Maybe$withDefault, '', newChallenge.title)),
								A2(
								$elm$url$Url$Builder$string,
								'content',
								A2($elm$core$Maybe$withDefault, '', newChallenge.content)),
								A2(
								$elm$url$Url$Builder$string,
								'schedule',
								$author$project$Query$Challenge$toScheduleParam(
									$author$project$Query$Challenge$toSchedule(newChallenge))),
								A2(
								$elm$url$Url$Builder$string,
								'success',
								$author$project$Query$Challenge$toSuccessMeasureParam(newChallenge.successMeasure))
							])))
			});
	});
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $author$project$Utils$TextUtils$isAlphaNumerical = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$toList,
	$elm$core$List$all($elm$core$Char$isAlphaNum));
var $author$project$Utils$TextUtils$isHashtag = function (tag) {
	return ($elm$core$String$length(tag) > 2) && (A2($elm$core$String$startsWith, '#', tag) && $author$project$Utils$TextUtils$isAlphaNumerical(
		A2($elm$core$String$dropLeft, 1, tag)));
};
var $elm$regex$Regex$split = _Regex_splitAtMost(_Regex_infinity);
var $author$project$Utils$TextUtils$unsafeRegex = A2(
	$elm$core$Basics$composeL,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never),
	$elm$regex$Regex$fromString);
var $author$project$Utils$TextUtils$hashtagsFrom = function (txt) {
	return $author$project$Utils$ListUtils$unique(
		A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$dropLeft(1),
				A2($elm$core$Basics$composeR, $elm$core$String$toLower, $author$project$Data$Hashtag$Hashtag)),
			A2(
				$elm$core$List$filter,
				$author$project$Utils$TextUtils$isHashtag,
				A2(
					$elm$regex$Regex$split,
					$author$project$Utils$TextUtils$unsafeRegex(' |\t|,|;|-|\\.|\\[|\\]|\\(|\\)|\\{|\\}'),
					txt))));
};
var $author$project$Query$Challenge$hashtagsAsParameter = function (state) {
	var content = A2($elm$core$Maybe$withDefault, '', state.content);
	var hashtags = $author$project$Utils$TextUtils$hashtagsFrom(content);
	return A2(
		$elm$core$String$join,
		'+',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var x = _v0.a;
				return x;
			},
			hashtags));
};
var $author$project$Query$Challenge$createNewChallengePost = F3(
	function (user, state, challengeId) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['post', 'new', 'challenge']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'challenge-id',
								$author$project$Data$Challenge$toString(challengeId)),
								A2(
								$elm$url$Url$Builder$string,
								'hashtags',
								$author$project$Query$Challenge$hashtagsAsParameter(state))
							])))
			});
	});
var $author$project$Query$Challenge$postChallenge = F2(
	function (user, newChallenge) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNewChallengePosted,
			A2(
				$elm$core$Task$andThen,
				function (challengeId) {
					return A3($author$project$Query$Challenge$challengeAudience, user, newChallenge.audience, challengeId);
				},
				A2(
					$elm$core$Task$andThen,
					function (challengeId) {
						return A2(
							$elm$core$Task$map,
							function (_v0) {
								return challengeId;
							},
							A3($author$project$Query$Challenge$createNewChallengePost, user, newChallenge, challengeId));
					},
					A2($author$project$Query$Challenge$createNewChallenge, user, newChallenge))));
	});
var $author$project$Update$Msg$HttpNewCommentPosted = function (a) {
	return {$: 'HttpNewCommentPosted', a: a};
};
var $author$project$Query$Conversation$postComment = F3(
	function (user, postId, comment) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNewCommentPosted,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					return postId;
				},
				$elm$http$Http$task(
					{
						body: $elm$http$Http$emptyBody,
						headers: _List_fromArray(
							[
								$author$project$Query$QueryUtils$authHeader(user)
							]),
						method: 'POST',
						resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
						timeout: $elm$core$Maybe$Nothing,
						url: _Utils_ap(
							$author$project$Query$QueryUtils$baseUrl,
							A2(
								$elm$url$Url$Builder$absolute,
								_List_fromArray(
									['conversation', 'message']),
								_List_fromArray(
									[
										A2(
										$elm$url$Url$Builder$string,
										'post-id',
										$author$project$Data$Post$toString(postId)),
										A2($elm$url$Url$Builder$string, 'content', comment)
									])))
					})));
	});
var $author$project$Update$Msg$HttpNewEventPosted = function (a) {
	return {$: 'HttpNewEventPosted', a: a};
};
var $elm$url$Url$Builder$int = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$core$String$fromInt(value));
	});
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$Query$Event$toLocationParam = function (loc) {
	if (loc.$ === 'Just') {
		switch (loc.a.$) {
			case 'Online':
				var url = loc.a.a.a;
				return 'url(' + (url + ')');
			case 'GeoLocation':
				var _v1 = loc.a;
				var lat = _v1.a.a;
				var lon = _v1.b.a;
				return 'geoloc(' + ($elm$core$String$fromFloat(lat) + (',' + ($elm$core$String$fromFloat(lon) + ')')));
			case 'MapUrl':
				var url = loc.a.a.a;
				return 'map(' + (url + ')');
			default:
				var _v2 = loc.a;
				var street = _v2.a;
				var zip = _v2.b;
				var country = _v2.c.a;
				return 'address(' + (A2($elm$core$Maybe$withDefault, '', street) + (',' + (A2(
					$elm$core$Maybe$withDefault,
					'',
					A2(
						$elm$core$Maybe$map,
						function (_v3) {
							var zp = _v3.a;
							return zp;
						},
						zip)) + (',' + (country + ')')))));
		}
	} else {
		return 'invalid!';
	}
};
var $author$project$Query$Event$toSchedule = function (state) {
	var start = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Data$Schedule$UTC(0),
		state.start);
	var end = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Data$Schedule$UTC(0),
		state.end);
	return A2($author$project$Data$Schedule$OneOff, start, end);
};
var $author$project$Query$Event$toMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$Query$Event$toScheduleParam = function (schedule) {
	return 'oneoff(' + ($elm$core$String$fromInt(
		$author$project$Query$Event$toMillis(
			$author$project$Data$Schedule$start(schedule))) + (',' + ($elm$core$String$fromInt(
		$author$project$Query$Event$toMillis(
			$author$project$Data$Schedule$end(schedule))) + ')')));
};
var $author$project$Query$Event$createNewEvent = F2(
	function (user, newEvent) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$EventDecoder$decodeEvent),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['event', 'new']),
						_List_fromArray(
							[
								A2($elm$url$Url$Builder$int, 'max-participant', newEvent.maxParticipants),
								A2(
								$elm$url$Url$Builder$string,
								'description',
								A2($elm$core$Maybe$withDefault, '', newEvent.description)),
								A2(
								$elm$url$Url$Builder$string,
								'location',
								$author$project$Query$Event$toLocationParam(newEvent.location)),
								A2(
								$elm$url$Url$Builder$string,
								'schedule',
								$author$project$Query$Event$toScheduleParam(
									$author$project$Query$Event$toSchedule(newEvent)))
							])))
			});
	});
var $author$project$Query$Event$hashtagsAsParameter = function (state) {
	var content = A2($elm$core$Maybe$withDefault, '', state.description);
	var hashtags = $author$project$Utils$TextUtils$hashtagsFrom(content);
	return A2(
		$elm$core$String$join,
		'+',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var x = _v0.a;
				return x;
			},
			hashtags));
};
var $author$project$Query$Event$createNewEventPost = F3(
	function (user, state, eventId) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['post', 'new', 'event']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'event-id',
								$author$project$Data$Event$toString(eventId)),
								A2(
								$elm$url$Url$Builder$string,
								'hashtags',
								$author$project$Query$Event$hashtagsAsParameter(state))
							])))
			});
	});
var $author$project$Query$Event$postEvent = F2(
	function (user, newEvent) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNewEventPosted,
			A2(
				$elm$core$Task$andThen,
				function (event) {
					return A3($author$project$Query$Event$createNewEventPost, user, newEvent, event.id);
				},
				A2($author$project$Query$Event$createNewEvent, user, newEvent)));
	});
var $author$project$Update$Msg$HttpNewFreeTextPosted = function (a) {
	return {$: 'HttpNewFreeTextPosted', a: a};
};
var $author$project$Query$FreeText$hashtagsAsParameter = function (state) {
	var content = A2($elm$core$Maybe$withDefault, '', state.content);
	var hashtags = $author$project$Utils$TextUtils$hashtagsFrom(content);
	return A2(
		$elm$core$String$join,
		'+',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var x = _v0.a;
				return x;
			},
			hashtags));
};
var $author$project$Query$FreeText$createNewFreeTextPost = F2(
	function (user, newFreeText) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['post', 'new', 'free-text']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'hashtags',
								$author$project$Query$FreeText$hashtagsAsParameter(newFreeText)),
								A2(
								$elm$url$Url$Builder$string,
								'content',
								A2($elm$core$Maybe$withDefault, '', newFreeText.content)),
								A2($elm$url$Url$Builder$string, 'sources', 'myself')
							])))
			});
	});
var $author$project$Query$FreeText$postFreeText = F2(
	function (user, newFreeText) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNewFreeTextPosted,
			A2($author$project$Query$FreeText$createNewFreeTextPost, user, newFreeText));
	});
var $author$project$Update$Msg$HttpNewPollPosted = function (a) {
	return {$: 'HttpNewPollPosted', a: a};
};
var $author$project$Query$Poll$pollOptionAsParameter = function (state) {
	return A2(
		$elm$core$String$join,
		'+',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var opt = _v0.a;
				return opt;
			},
			A2($elm$core$Maybe$withDefault, _List_Nil, state.options)));
};
var $author$project$Query$Poll$createNewPoll = F2(
	function (user, newPoll) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$PollDecoder$decodePollId),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['poll', 'new']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'question',
								A2($elm$core$Maybe$withDefault, '', newPoll.question)),
								A2(
								$elm$url$Url$Builder$string,
								'options',
								$author$project$Query$Poll$pollOptionAsParameter(newPoll))
							])))
			});
	});
var $author$project$Query$Poll$hashtagsAsParameter = function (state) {
	var content = A2($elm$core$Maybe$withDefault, '', state.question);
	var hashtags = $author$project$Utils$TextUtils$hashtagsFrom(content);
	return A2(
		$elm$core$String$join,
		'+',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var x = _v0.a;
				return x;
			},
			hashtags));
};
var $author$project$Query$Poll$createNewPollPost = F3(
	function (user, state, challengeId) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['post', 'new', 'poll']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'poll-id',
								$author$project$Data$Poll$toString(challengeId)),
								A2(
								$elm$url$Url$Builder$string,
								'hashtags',
								$author$project$Query$Poll$hashtagsAsParameter(state))
							])))
			});
	});
var $author$project$Query$Poll$postPoll = F2(
	function (user, newPoll) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNewPollPosted,
			A2(
				$elm$core$Task$andThen,
				A2($author$project$Query$Poll$createNewPollPost, user, newPoll),
				A2($author$project$Query$Poll$createNewPoll, user, newPoll)));
	});
var $author$project$Update$Msg$HttpNewTipPosted = function (a) {
	return {$: 'HttpNewTipPosted', a: a};
};
var $author$project$Query$Tip$createNewTip = F2(
	function (user, newTip) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$TipDecoder$decodeTipId),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['tip', 'new']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'content',
								A2($elm$core$Maybe$withDefault, '', newTip.content)),
								A2($elm$url$Url$Builder$string, 'sources', 'myself')
							])))
			});
	});
var $author$project$Query$Tip$hashtagsAsParameter = function (state) {
	var content = A2($elm$core$Maybe$withDefault, '', state.content);
	var hashtags = $author$project$Utils$TextUtils$hashtagsFrom(content);
	return A2(
		$elm$core$String$join,
		'+',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var x = _v0.a;
				return x;
			},
			hashtags));
};
var $author$project$Query$Tip$createNewTipPost = F3(
	function (user, newTip, tipId) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['post', 'new', 'tip']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'tip-id',
								$author$project$Data$Tip$toString(tipId)),
								A2(
								$elm$url$Url$Builder$string,
								'hashtags',
								$author$project$Query$Tip$hashtagsAsParameter(newTip))
							])))
			});
	});
var $author$project$Query$Tip$postTip = F2(
	function (user, newTip) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNewTipPosted,
			A2(
				$elm$core$Task$andThen,
				function (tipId) {
					return A3($author$project$Query$Tip$createNewTipPost, user, newTip, tipId);
				},
				A2($author$project$Query$Tip$createNewTip, user, newTip)));
	});
var $author$project$State$FormState$postingNewChallenge = function (formState) {
	var wizard = formState.newChallengeWizard;
	return _Utils_update(
		formState,
		{
			newChallengeWizard: _Utils_update(
				wizard,
				{posting: true})
		});
};
var $author$project$State$FormState$postingNewEvent = function (formState) {
	var wizard = formState.newEventWizard;
	return _Utils_update(
		formState,
		{
			newEventWizard: _Utils_update(
				wizard,
				{posting: true})
		});
};
var $author$project$State$FormState$postingNewFreeText = function (formState) {
	var wizard = formState.newFreeTextWizard;
	return _Utils_update(
		formState,
		{
			newFreeTextWizard: _Utils_update(
				wizard,
				{posting: true})
		});
};
var $author$project$State$FormState$postingNewPoll = function (formState) {
	var wizard = formState.newPollWizard;
	return _Utils_update(
		formState,
		{
			newPollWizard: _Utils_update(
				wizard,
				{posting: true})
		});
};
var $author$project$State$FormState$postingNewTip = function (formState) {
	var wizard = formState.newTipWizard;
	return _Utils_update(
		formState,
		{
			newTipWizard: _Utils_update(
				wizard,
				{posting: true})
		});
};
var $author$project$State$FormState$pseudoAvailabilityChecked = F2(
	function (formState, valid) {
		var registrationForm = formState.registrationForm;
		return _Utils_update(
			formState,
			{
				registrationForm: _Utils_update(
					registrationForm,
					{
						checkingPseudo: $elm$core$Maybe$Just(false),
						serverValidatedPseudo: $elm$core$Maybe$Just(valid)
					})
			});
	});
var $author$project$State$FeedState$refresh = $author$project$State$FeedState$empty;
var $author$project$State$NotificationState$refresh = $author$project$State$NotificationState$empty;
var $author$project$State$PinnedState$refresh = $author$project$State$PinnedState$empty;
var $author$project$State$WallState$refresh = $author$project$State$WallState$empty;
var $author$project$Update$Msg$HttpHashtagTrendRefreshed = function (a) {
	return {$: 'HttpHashtagTrendRefreshed', a: a};
};
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $author$project$Query$Json$DecoderUtils$decodePair = F2(
	function (decode1, decode2) {
		return A3(
			$elm$json$Json$Decode$map2,
			$elm$core$Tuple$pair,
			A2($elm$json$Json$Decode$index, 0, decode1),
			A2($elm$json$Json$Decode$index, 1, decode2));
	});
var $author$project$Query$Hashtag$fetchHashtagTrend = F2(
	function (user, n) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'GET',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver(
					$elm$json$Json$Decode$list(
						A2($author$project$Query$Json$DecoderUtils$decodePair, $elm$json$Json$Decode$int, $author$project$Query$Json$PostDecoder$decodeHashtag))),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							[
								'hashtag',
								'trend',
								'by-posts',
								$elm$core$String$fromInt(n)
							]),
						_List_Nil))
			});
	});
var $author$project$Query$Hashtag$refreshHashtagTrend = function (user) {
	return A2(
		$elm$core$Task$attempt,
		$author$project$Update$Msg$HttpHashtagTrendRefreshed,
		A2($author$project$Query$Hashtag$fetchHashtagTrend, user, 50));
};
var $author$project$Update$Msg$HttpNewAccountRegistered = function (a) {
	return {$: 'HttpNewAccountRegistered', a: a};
};
var $author$project$Data$Hash$Hash = function (a) {
	return {$: 'Hash', a: a};
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			$elm$core$Array$initialize,
			n,
			function (_v0) {
				return e;
			});
	});
var $truqu$elm_md5$MD5$emptyWords = A2($elm$core$Array$repeat, 16, 0);
var $truqu$elm_md5$MD5$addUnsigned = F2(
	function (x, y) {
		return 4294967295 & (x + y);
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $truqu$elm_md5$MD5$rotateLeft = F2(
	function (bits, input) {
		return (input << bits) | (input >>> (32 - bits));
	});
var $truqu$elm_md5$MD5$cmn = F8(
	function (fun, a, b, c, d, x, s, ac) {
		return A2(
			$truqu$elm_md5$MD5$addUnsigned,
			b,
			A2(
				$truqu$elm_md5$MD5$rotateLeft,
				s,
				A2(
					$truqu$elm_md5$MD5$addUnsigned,
					a,
					A2(
						$truqu$elm_md5$MD5$addUnsigned,
						ac,
						A2(
							$truqu$elm_md5$MD5$addUnsigned,
							A3(fun, b, c, d),
							x)))));
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $truqu$elm_md5$MD5$f = F3(
	function (x, y, z) {
		return z ^ (x & (y ^ z));
	});
var $truqu$elm_md5$MD5$ff = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$f, a, b, c, d, x, s, ac);
	});
var $truqu$elm_md5$MD5$g = F3(
	function (x, y, z) {
		return y ^ (z & (x ^ y));
	});
var $truqu$elm_md5$MD5$gg = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$g, a, b, c, d, x, s, ac);
	});
var $truqu$elm_md5$MD5$h = F3(
	function (x, y, z) {
		return z ^ (x ^ y);
	});
var $truqu$elm_md5$MD5$hh = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$h, a, b, c, d, x, s, ac);
	});
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $truqu$elm_md5$MD5$i = F3(
	function (x, y, z) {
		return y ^ (x | (~z));
	});
var $truqu$elm_md5$MD5$ii = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$i, a, b, c, d, x, s, ac);
	});
var $truqu$elm_md5$MD5$hex_ = F2(
	function (xs, acc) {
		var a = acc.a;
		var b = acc.b;
		var c = acc.c;
		var d = acc.d;
		if ((((((((((((((((xs.b && xs.b.b) && xs.b.b.b) && xs.b.b.b.b) && xs.b.b.b.b.b) && xs.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && (!xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b)) {
			var x0 = xs.a;
			var _v1 = xs.b;
			var x1 = _v1.a;
			var _v2 = _v1.b;
			var x2 = _v2.a;
			var _v3 = _v2.b;
			var x3 = _v3.a;
			var _v4 = _v3.b;
			var x4 = _v4.a;
			var _v5 = _v4.b;
			var x5 = _v5.a;
			var _v6 = _v5.b;
			var x6 = _v6.a;
			var _v7 = _v6.b;
			var x7 = _v7.a;
			var _v8 = _v7.b;
			var x8 = _v8.a;
			var _v9 = _v8.b;
			var x9 = _v9.a;
			var _v10 = _v9.b;
			var x10 = _v10.a;
			var _v11 = _v10.b;
			var x11 = _v11.a;
			var _v12 = _v11.b;
			var x12 = _v12.a;
			var _v13 = _v12.b;
			var x13 = _v13.a;
			var _v14 = _v13.b;
			var x14 = _v14.a;
			var _v15 = _v14.b;
			var x15 = _v15.a;
			var s44 = 21;
			var s43 = 15;
			var s42 = 10;
			var s41 = 6;
			var s34 = 23;
			var s33 = 16;
			var s32 = 11;
			var s31 = 4;
			var s24 = 20;
			var s23 = 14;
			var s22 = 9;
			var s21 = 5;
			var s14 = 22;
			var s13 = 17;
			var s12 = 12;
			var s11 = 7;
			var d00 = d;
			var c00 = c;
			var b00 = b;
			var a00 = a;
			var a01 = A7($truqu$elm_md5$MD5$ff, a00, b00, c00, d00, x0, s11, 3614090360);
			var d01 = A7($truqu$elm_md5$MD5$ff, d00, a01, b00, c00, x1, s12, 3905402710);
			var c01 = A7($truqu$elm_md5$MD5$ff, c00, d01, a01, b00, x2, s13, 606105819);
			var b01 = A7($truqu$elm_md5$MD5$ff, b00, c01, d01, a01, x3, s14, 3250441966);
			var a02 = A7($truqu$elm_md5$MD5$ff, a01, b01, c01, d01, x4, s11, 4118548399);
			var d02 = A7($truqu$elm_md5$MD5$ff, d01, a02, b01, c01, x5, s12, 1200080426);
			var c02 = A7($truqu$elm_md5$MD5$ff, c01, d02, a02, b01, x6, s13, 2821735955);
			var b02 = A7($truqu$elm_md5$MD5$ff, b01, c02, d02, a02, x7, s14, 4249261313);
			var a03 = A7($truqu$elm_md5$MD5$ff, a02, b02, c02, d02, x8, s11, 1770035416);
			var d03 = A7($truqu$elm_md5$MD5$ff, d02, a03, b02, c02, x9, s12, 2336552879);
			var c03 = A7($truqu$elm_md5$MD5$ff, c02, d03, a03, b02, x10, s13, 4294925233);
			var b03 = A7($truqu$elm_md5$MD5$ff, b02, c03, d03, a03, x11, s14, 2304563134);
			var a04 = A7($truqu$elm_md5$MD5$ff, a03, b03, c03, d03, x12, s11, 1804603682);
			var d04 = A7($truqu$elm_md5$MD5$ff, d03, a04, b03, c03, x13, s12, 4254626195);
			var c04 = A7($truqu$elm_md5$MD5$ff, c03, d04, a04, b03, x14, s13, 2792965006);
			var b04 = A7($truqu$elm_md5$MD5$ff, b03, c04, d04, a04, x15, s14, 1236535329);
			var a05 = A7($truqu$elm_md5$MD5$gg, a04, b04, c04, d04, x1, s21, 4129170786);
			var d05 = A7($truqu$elm_md5$MD5$gg, d04, a05, b04, c04, x6, s22, 3225465664);
			var c05 = A7($truqu$elm_md5$MD5$gg, c04, d05, a05, b04, x11, s23, 643717713);
			var b05 = A7($truqu$elm_md5$MD5$gg, b04, c05, d05, a05, x0, s24, 3921069994);
			var a06 = A7($truqu$elm_md5$MD5$gg, a05, b05, c05, d05, x5, s21, 3593408605);
			var d06 = A7($truqu$elm_md5$MD5$gg, d05, a06, b05, c05, x10, s22, 38016083);
			var c06 = A7($truqu$elm_md5$MD5$gg, c05, d06, a06, b05, x15, s23, 3634488961);
			var b06 = A7($truqu$elm_md5$MD5$gg, b05, c06, d06, a06, x4, s24, 3889429448);
			var a07 = A7($truqu$elm_md5$MD5$gg, a06, b06, c06, d06, x9, s21, 568446438);
			var d07 = A7($truqu$elm_md5$MD5$gg, d06, a07, b06, c06, x14, s22, 3275163606);
			var c07 = A7($truqu$elm_md5$MD5$gg, c06, d07, a07, b06, x3, s23, 4107603335);
			var b07 = A7($truqu$elm_md5$MD5$gg, b06, c07, d07, a07, x8, s24, 1163531501);
			var a08 = A7($truqu$elm_md5$MD5$gg, a07, b07, c07, d07, x13, s21, 2850285829);
			var d08 = A7($truqu$elm_md5$MD5$gg, d07, a08, b07, c07, x2, s22, 4243563512);
			var c08 = A7($truqu$elm_md5$MD5$gg, c07, d08, a08, b07, x7, s23, 1735328473);
			var b08 = A7($truqu$elm_md5$MD5$gg, b07, c08, d08, a08, x12, s24, 2368359562);
			var a09 = A7($truqu$elm_md5$MD5$hh, a08, b08, c08, d08, x5, s31, 4294588738);
			var d09 = A7($truqu$elm_md5$MD5$hh, d08, a09, b08, c08, x8, s32, 2272392833);
			var c09 = A7($truqu$elm_md5$MD5$hh, c08, d09, a09, b08, x11, s33, 1839030562);
			var b09 = A7($truqu$elm_md5$MD5$hh, b08, c09, d09, a09, x14, s34, 4259657740);
			var a10 = A7($truqu$elm_md5$MD5$hh, a09, b09, c09, d09, x1, s31, 2763975236);
			var d10 = A7($truqu$elm_md5$MD5$hh, d09, a10, b09, c09, x4, s32, 1272893353);
			var c10 = A7($truqu$elm_md5$MD5$hh, c09, d10, a10, b09, x7, s33, 4139469664);
			var b10 = A7($truqu$elm_md5$MD5$hh, b09, c10, d10, a10, x10, s34, 3200236656);
			var a11 = A7($truqu$elm_md5$MD5$hh, a10, b10, c10, d10, x13, s31, 681279174);
			var d11 = A7($truqu$elm_md5$MD5$hh, d10, a11, b10, c10, x0, s32, 3936430074);
			var c11 = A7($truqu$elm_md5$MD5$hh, c10, d11, a11, b10, x3, s33, 3572445317);
			var b11 = A7($truqu$elm_md5$MD5$hh, b10, c11, d11, a11, x6, s34, 76029189);
			var a12 = A7($truqu$elm_md5$MD5$hh, a11, b11, c11, d11, x9, s31, 3654602809);
			var d12 = A7($truqu$elm_md5$MD5$hh, d11, a12, b11, c11, x12, s32, 3873151461);
			var c12 = A7($truqu$elm_md5$MD5$hh, c11, d12, a12, b11, x15, s33, 530742520);
			var b12 = A7($truqu$elm_md5$MD5$hh, b11, c12, d12, a12, x2, s34, 3299628645);
			var a13 = A7($truqu$elm_md5$MD5$ii, a12, b12, c12, d12, x0, s41, 4096336452);
			var d13 = A7($truqu$elm_md5$MD5$ii, d12, a13, b12, c12, x7, s42, 1126891415);
			var c13 = A7($truqu$elm_md5$MD5$ii, c12, d13, a13, b12, x14, s43, 2878612391);
			var b13 = A7($truqu$elm_md5$MD5$ii, b12, c13, d13, a13, x5, s44, 4237533241);
			var a14 = A7($truqu$elm_md5$MD5$ii, a13, b13, c13, d13, x12, s41, 1700485571);
			var d14 = A7($truqu$elm_md5$MD5$ii, d13, a14, b13, c13, x3, s42, 2399980690);
			var c14 = A7($truqu$elm_md5$MD5$ii, c13, d14, a14, b13, x10, s43, 4293915773);
			var b14 = A7($truqu$elm_md5$MD5$ii, b13, c14, d14, a14, x1, s44, 2240044497);
			var a15 = A7($truqu$elm_md5$MD5$ii, a14, b14, c14, d14, x8, s41, 1873313359);
			var d15 = A7($truqu$elm_md5$MD5$ii, d14, a15, b14, c14, x15, s42, 4264355552);
			var c15 = A7($truqu$elm_md5$MD5$ii, c14, d15, a15, b14, x6, s43, 2734768916);
			var b15 = A7($truqu$elm_md5$MD5$ii, b14, c15, d15, a15, x13, s44, 1309151649);
			var a16 = A7($truqu$elm_md5$MD5$ii, a15, b15, c15, d15, x4, s41, 4149444226);
			var d16 = A7($truqu$elm_md5$MD5$ii, d15, a16, b15, c15, x11, s42, 3174756917);
			var c16 = A7($truqu$elm_md5$MD5$ii, c15, d16, a16, b15, x2, s43, 718787259);
			var b16 = A7($truqu$elm_md5$MD5$ii, b15, c16, d16, a16, x9, s44, 3951481745);
			var b17 = A2($truqu$elm_md5$MD5$addUnsigned, b00, b16);
			var c17 = A2($truqu$elm_md5$MD5$addUnsigned, c00, c16);
			var d17 = A2($truqu$elm_md5$MD5$addUnsigned, d00, d16);
			var a17 = A2($truqu$elm_md5$MD5$addUnsigned, a00, a16);
			return {a: a17, b: b17, c: c17, d: d17};
		} else {
			return acc;
		}
	});
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $truqu$elm_md5$MD5$iget = F2(
	function (index, array) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Array$get, index, array));
	});
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_v0.$ === 'SubTree') {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $truqu$elm_md5$MD5$consume = F2(
	function (_char, _v0) {
		var hashState = _v0.a;
		var _v1 = _v0.b;
		var byteCount = _v1.a;
		var words = _v1.b;
		var totalByteCount = _v0.c;
		var wordCount = (byteCount / 4) | 0;
		var oldWord = A2($truqu$elm_md5$MD5$iget, wordCount, words);
		var bytePosition = 8 * (byteCount % 4);
		var code = _char << bytePosition;
		var newWord = oldWord | code;
		var newWords = A3($elm$core$Array$set, wordCount, newWord, words);
		return (byteCount === 63) ? _Utils_Tuple3(
			A2(
				$truqu$elm_md5$MD5$hex_,
				$elm$core$Array$toList(newWords),
				hashState),
			_Utils_Tuple2(0, $truqu$elm_md5$MD5$emptyWords),
			totalByteCount + 1) : _Utils_Tuple3(
			hashState,
			_Utils_Tuple2(byteCount + 1, newWords),
			totalByteCount + 1);
	});
var $truqu$elm_md5$MD5$finishUp = function (_v0) {
	var hashState = _v0.a;
	var _v1 = _v0.b;
	var byteCount = _v1.a;
	var words = _v1.b;
	var totalByteCount = _v0.c;
	var wordCount = (byteCount / 4) | 0;
	var oldWord = A2($truqu$elm_md5$MD5$iget, wordCount, words);
	var bytePosition = 8 * (byteCount % 4);
	var code = 128 << bytePosition;
	var newWord = oldWord | code;
	var newWords = A3($elm$core$Array$set, wordCount, newWord, words);
	return (wordCount < 14) ? function (x) {
		return A2($truqu$elm_md5$MD5$hex_, x, hashState);
	}(
		$elm$core$Array$toList(
			A3(
				$elm$core$Array$set,
				15,
				totalByteCount >>> 29,
				A3($elm$core$Array$set, 14, totalByteCount << 3, newWords)))) : function (x) {
		return A2(
			$truqu$elm_md5$MD5$hex_,
			x,
			A2(
				$truqu$elm_md5$MD5$hex_,
				$elm$core$Array$toList(newWords),
				hashState));
	}(
		$elm$core$Array$toList(
			A3(
				$elm$core$Array$set,
				15,
				totalByteCount >>> 29,
				A3($elm$core$Array$set, 14, totalByteCount << 3, $truqu$elm_md5$MD5$emptyWords))));
};
var $elm$core$String$foldl = _String_foldl;
var $zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8 = F3(
	function (add, _char, acc) {
		return (_char < 128) ? A2(add, _char, acc) : ((_char < 2048) ? A2(
			add,
			128 | (63 & _char),
			A2(add, 192 | (_char >>> 6), acc)) : ((_char < 65536) ? A2(
			add,
			128 | (63 & _char),
			A2(
				add,
				128 | (63 & (_char >>> 6)),
				A2(add, 224 | (_char >>> 12), acc))) : A2(
			add,
			128 | (63 & _char),
			A2(
				add,
				128 | (63 & (_char >>> 6)),
				A2(
					add,
					128 | (63 & (_char >>> 12)),
					A2(add, 240 | (_char >>> 18), acc))))));
	});
var $zwilias$elm_utf_tools$String$UTF8$foldl = F3(
	function (op, initialAcc, input) {
		return A3(
			$elm$core$String$foldl,
			F2(
				function (_char, acc) {
					return A3(
						$zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8,
						op,
						$elm$core$Char$toCode(_char),
						acc);
				}),
			initialAcc,
			input);
	});
var $truqu$elm_md5$MD5$State = F4(
	function (a, b, c, d) {
		return {a: a, b: b, c: c, d: d};
	});
var $truqu$elm_md5$MD5$initialHashState = A4($truqu$elm_md5$MD5$State, 1732584193, 4023233417, 2562383102, 271733878);
var $truqu$elm_md5$MD5$hash = function (input) {
	return $truqu$elm_md5$MD5$finishUp(
		A3(
			$zwilias$elm_utf_tools$String$UTF8$foldl,
			$truqu$elm_md5$MD5$consume,
			_Utils_Tuple3(
				$truqu$elm_md5$MD5$initialHashState,
				_Utils_Tuple2(0, $truqu$elm_md5$MD5$emptyWords),
				0),
			input));
};
var $truqu$elm_md5$MD5$bytes = function (string) {
	var _v0 = $truqu$elm_md5$MD5$hash(string);
	var a = _v0.a;
	var b = _v0.b;
	var c = _v0.c;
	var d = _v0.d;
	return _List_fromArray(
		[a & 255, (a >>> 8) & 255, (a >>> 16) & 255, (a >>> 24) & 255, b & 255, (b >>> 8) & 255, (b >>> 16) & 255, (b >>> 24) & 255, c & 255, (c >>> 8) & 255, (c >>> 16) & 255, (c >>> 24) & 255, d & 255, (d >>> 8) & 255, (d >>> 16) & 255, (d >>> 24) & 255]);
};
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $truqu$elm_md5$MD5$toHex = function (_byte) {
	switch (_byte) {
		case 0:
			return '0';
		case 1:
			return '1';
		case 2:
			return '2';
		case 3:
			return '3';
		case 4:
			return '4';
		case 5:
			return '5';
		case 6:
			return '6';
		case 7:
			return '7';
		case 8:
			return '8';
		case 9:
			return '9';
		case 10:
			return 'a';
		case 11:
			return 'b';
		case 12:
			return 'c';
		case 13:
			return 'd';
		case 14:
			return 'e';
		case 15:
			return 'f';
		default:
			return _Utils_ap(
				$truqu$elm_md5$MD5$toHex((_byte / 16) | 0),
				$truqu$elm_md5$MD5$toHex(_byte % 16));
	}
};
var $truqu$elm_md5$MD5$hex = function (s) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (b, acc) {
				return _Utils_ap(
					acc,
					A3(
						$elm$core$String$padLeft,
						2,
						_Utils_chr('0'),
						$truqu$elm_md5$MD5$toHex(b)));
			}),
		'',
		$truqu$elm_md5$MD5$bytes(s));
};
var $author$project$Data$Hash$md5 = A2($elm$core$Basics$composeR, $truqu$elm_md5$MD5$hex, $author$project$Data$Hash$Hash);
var $author$project$Data$Hash$toString = function (_v0) {
	var str = _v0.a;
	return str;
};
var $author$project$Query$Registration$md5String = A2($elm$core$Basics$composeR, $author$project$Data$Hash$md5, $author$project$Data$Hash$toString);
var $author$project$Query$Registration$register = function (state) {
	var pseudo = A2($elm$core$Maybe$withDefault, '', state.pseudo);
	var password = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Maybe$map, $author$project$Query$Registration$md5String, state.password));
	var intro = A2($elm$core$Maybe$withDefault, '', state.introduction);
	var email = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Maybe$map, $author$project$Query$Registration$md5String, state.email));
	return A2(
		$elm$core$Task$attempt,
		$author$project$Update$Msg$HttpNewAccountRegistered,
		$elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_Nil,
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['registration', 'new']),
						_List_fromArray(
							[
								A2($elm$url$Url$Builder$string, 'email-hash', email),
								A2($elm$url$Url$Builder$string, 'password-hash', password),
								A2($elm$url$Url$Builder$string, 'pseudo', pseudo),
								A2($elm$url$Url$Builder$string, 'profile-introduction', intro)
							])))
			}));
};
var $author$project$State$FormState$RegistrationSubmissionFailed = {$: 'RegistrationSubmissionFailed'};
var $author$project$State$FormState$registrationSubmissionFailed = $author$project$State$FormState$changeRegistrationState($author$project$State$FormState$RegistrationSubmissionFailed);
var $author$project$State$FormState$RegistrationSubmitted = {$: 'RegistrationSubmitted'};
var $author$project$State$FormState$registrationSubmitted = $author$project$State$FormState$changeRegistrationState($author$project$State$FormState$RegistrationSubmitted);
var $author$project$Update$Msg$HttpChallengeRejected = function (a) {
	return {$: 'HttpChallengeRejected', a: a};
};
var $author$project$Query$Challenge$rejectChallenge = F3(
	function (cache, user, challengeId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengeRejected,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'reject',
									$author$project$Data$Challenge$toString(challengeId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Update$Msg$HttpEventParticipationRejected = function (a) {
	return {$: 'HttpEventParticipationRejected', a: a};
};
var $author$project$Query$Event$rejectParticipation = F4(
	function (cache, user, eventId, participantId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventParticipationRejected,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					return eventId;
				},
				$elm$http$Http$task(
					{
						body: $elm$http$Http$emptyBody,
						headers: _List_fromArray(
							[
								$author$project$Query$QueryUtils$authHeader(user)
							]),
						method: 'POST',
						resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
						timeout: $elm$core$Maybe$Nothing,
						url: _Utils_ap(
							$author$project$Query$QueryUtils$baseUrl,
							A2(
								$elm$url$Url$Builder$absolute,
								_List_fromArray(
									['event', 'participation', 'reject']),
								_List_fromArray(
									[
										A2(
										$elm$url$Url$Builder$string,
										'event-id',
										$author$project$Data$Event$toString(eventId)),
										A2(
										$elm$url$Url$Builder$string,
										'participant-id',
										$author$project$Data$User$toString(participantId))
									])))
					})));
	});
var $author$project$State$Cache$removeComment = F2(
	function (cache, id) {
		var cacheId = $author$project$Data$Post$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyConversationCacheEntry,
			A2($elm$core$Dict$get, cacheId, cache.conversations));
		var updated = _Utils_update(
			entry,
			{comment: $elm$core$Maybe$Nothing});
		return _Utils_update(
			cache,
			{
				conversations: A3($elm$core$Dict$insert, cacheId, updated, cache.conversations)
			});
	});
var $elm$core$Set$remove = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$remove, key, dict));
	});
var $author$project$State$Cache$removeFollowingHashtag = F2(
	function (cache, hashtag) {
		return _Utils_update(
			cache,
			{
				followingHashtags: A2(
					$elm$core$Set$remove,
					$author$project$Data$Hashtag$toString(hashtag),
					cache.followingHashtags)
			});
	});
var $author$project$State$Cache$removeFollowingUser = F2(
	function (cache, user) {
		return _Utils_update(
			cache,
			{
				followingUsers: A2(
					$elm$core$Set$remove,
					$author$project$Data$User$toString(user),
					cache.followingUsers)
			});
	});
var $author$project$State$Cache$decrement = function (counter) {
	if (counter.$ === 'Just') {
		var n = counter.a;
		return $elm$core$Maybe$Just(n - 1);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$State$Cache$removeLike = F2(
	function (cache, postId) {
		return _Utils_update(
			cache,
			{
				likeCount: A3(
					$elm$core$Dict$update,
					$author$project$Data$Post$toString(postId),
					$author$project$State$Cache$decrement,
					cache.likeCount),
				liked: A2(
					$elm$core$Set$remove,
					$author$project$Data$Post$toString(postId),
					cache.liked)
			});
	});
var $author$project$State$Cache$removePinned = F2(
	function (cache, postId) {
		return _Utils_update(
			cache,
			{
				pinned: A2(
					$elm$core$Set$remove,
					$author$project$Data$Post$toString(postId),
					cache.pinned)
			});
	});
var $author$project$Update$Msg$HttpChallengeStepStatusReported = function (a) {
	return {$: 'HttpChallengeStepStatusReported', a: a};
};
var $author$project$Query$Challenge$stepStatusAsString = function (status) {
	switch (status.$) {
		case 'Success':
			return 'success';
		case 'Failure':
			return 'failure';
		case 'Skipped':
			return 'skipped';
		default:
			return 'partial-success';
	}
};
var $author$project$Query$Challenge$reportStepStatus = F4(
	function (user, challengeId, step, status) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpChallengeStepStatusReported,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'challenge',
									'report',
									$author$project$Query$Challenge$stepStatusAsString(status),
									$elm$core$String$fromInt(step),
									$author$project$Data$Challenge$toString(challengeId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Update$Msg$HttpNewRepostPosted = function (a) {
	return {$: 'HttpNewRepostPosted', a: a};
};
var $author$project$Query$Repost$createNewRepost = F2(
	function (user, postId) {
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Query$QueryUtils$authHeader(user)
					]),
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['post', 'repost']),
						_List_fromArray(
							[
								A2(
								$elm$url$Url$Builder$string,
								'post-id',
								$author$project$Data$Post$toString(postId))
							])))
			});
	});
var $author$project$Query$Repost$repost = F2(
	function (user, repostState) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpNewRepostPosted,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Task$fail(
					$elm$http$Http$BadUrl('No post-id provided for a repost')),
				A2(
					$elm$core$Maybe$map,
					function (x) {
						return A2($author$project$Query$Repost$createNewRepost, user, x);
					},
					repostState.repost)));
	});
var $author$project$State$FormState$repost = F2(
	function (formState, postId) {
		var repostState = formState.newRepostWizard;
		var newRepostState = _Utils_update(
			repostState,
			{
				repost: $elm$core$Maybe$Just(postId)
			});
		return _Utils_update(
			formState,
			{newRepostWizard: newRepostState});
	});
var $author$project$State$FormState$reposted = function (formState) {
	var wizard = formState.newRepostWizard;
	return _Utils_update(
		formState,
		{
			newRepostWizard: _Utils_update(
				wizard,
				{posting: false})
		});
};
var $author$project$State$FormState$reposting = function (formState) {
	var wizard = formState.newRepostWizard;
	return _Utils_update(
		formState,
		{
			newRepostWizard: _Utils_update(
				wizard,
				{posting: true})
		});
};
var $author$project$Update$Msg$HttpEventParticipationRequested = function (a) {
	return {$: 'HttpEventParticipationRequested', a: a};
};
var $author$project$Query$Event$requestParticipation = F3(
	function (cache, user, eventId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpEventParticipationRequested,
			A2(
				$elm$core$Task$map,
				function (_v0) {
					return eventId;
				},
				$elm$http$Http$task(
					{
						body: $elm$http$Http$emptyBody,
						headers: _List_fromArray(
							[
								$author$project$Query$QueryUtils$authHeader(user)
							]),
						method: 'POST',
						resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
						timeout: $elm$core$Maybe$Nothing,
						url: _Utils_ap(
							$author$project$Query$QueryUtils$baseUrl,
							A2(
								$elm$url$Url$Builder$absolute,
								_List_fromArray(
									['event', 'participation', 'request']),
								_List_fromArray(
									[
										A2(
										$elm$url$Url$Builder$string,
										'event-id',
										$author$project$Data$Event$toString(eventId))
									])))
					})));
	});
var $author$project$Update$Msg$ClockTick = {$: 'ClockTick'};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$core$Process$sleep = _Process_sleep;
var $author$project$Query$TaskUtils$delay = F2(
	function (time, msg) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$identity,
			A2(
				$elm$core$Task$andThen,
				$elm$core$Basics$always(
					$elm$core$Task$succeed(msg)),
				$elm$core$Process$sleep(time)));
	});
var $author$project$Query$Clock$scheduleClockTick = A2($author$project$Query$TaskUtils$delay, 1000.0, $author$project$Update$Msg$ClockTick);
var $author$project$Query$Feed$scheduleFeedCheck = function (time) {
	return A2($author$project$Query$TaskUtils$delay, time, $author$project$Update$Msg$CheckFeed);
};
var $author$project$Query$Notification$scheduleNotificationCheck = function (time) {
	return A2($author$project$Query$TaskUtils$delay, time, $author$project$Update$Msg$CheckNotifications);
};
var $author$project$State$Cache$setConversationOpened = F3(
	function (cache, id, opened) {
		var cacheId = $author$project$Data$Post$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyConversationCacheEntry,
			A2($elm$core$Dict$get, cacheId, cache.conversations));
		var updated = _Utils_update(
			entry,
			{opened: opened});
		return _Utils_update(
			cache,
			{
				conversations: A3($elm$core$Dict$insert, cacheId, updated, cache.conversations)
			});
	});
var $author$project$Data$Challenge$adjustChallengeStatistics = F3(
	function (oldSteps, newSteps, stats) {
		var countStatus = function (status) {
			return A2(
				$elm$core$List$foldl,
				F2(
					function (x, acc) {
						return _Utils_eq(x.status, status) ? (acc + 1) : acc;
					}),
				0);
		};
		var countSuccess = countStatus($author$project$Data$Challenge$Success);
		var countSkipped = countStatus($author$project$Data$Challenge$Skipped);
		var countPartial = countStatus($author$project$Data$Challenge$PartialSuccess);
		var countFailure = countStatus($author$project$Data$Challenge$Failure);
		return _Utils_update(
			stats,
			{
				failureCount: (stats.failureCount - countFailure(oldSteps)) + countFailure(newSteps),
				partialSuccessCount: (stats.partialSuccessCount - countPartial(oldSteps)) + countPartial(newSteps),
				skippedCount: (stats.skippedCount - countSkipped(oldSteps)) + countSkipped(newSteps),
				successCount: (stats.successCount - countSuccess(oldSteps)) + countSuccess(newSteps)
			});
	});
var $author$project$Data$Challenge$emptyChallengeStatistics = {acceptedCount: 0, elapsedPeriodCount: 0, failureCount: 0, partialSuccessCount: 0, rejectedCount: 0, skippedCount: 0, successCount: 0, totalPeriodCount: 0};
var $author$project$State$Cache$getChallengeStatistics = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.statistics;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Challenge$toString(id),
				cache.challenges));
	});
var $author$project$State$Cache$getChallengeStepReports = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.stepReports;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Challenge$toString(id),
				cache.challenges));
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $author$project$State$Cache$updateChallengeStepReports = F3(
	function (cache, id, update) {
		var cacheId = $author$project$Data$Challenge$toString(id);
		var entry = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$Cache$emptyChallengeEntry,
			A2($elm$core$Dict$get, cacheId, cache.challenges));
		var filteredStepReport = A2(
			$elm$core$List$filter,
			function (x) {
				return !_Utils_eq(x.step, update.step);
			},
			entry.stepReports);
		var updated = _Utils_update(
			entry,
			{
				stepReports: A2($elm$core$List$cons, update, filteredStepReport)
			});
		return _Utils_update(
			cache,
			{
				challenges: A3($elm$core$Dict$insert, cacheId, updated, cache.challenges)
			});
	});
var $author$project$State$Cache$simulateChallengeStepReports = F3(
	function (cache, challengeId, update) {
		var oldSteps = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($author$project$State$Cache$getChallengeStepReports, cache, challengeId));
		var newCache = A3($author$project$State$Cache$updateChallengeStepReports, cache, challengeId, update);
		var newSteps = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($author$project$State$Cache$getChallengeStepReports, newCache, challengeId));
		var statsToUpdate = A2(
			$elm$core$Maybe$withDefault,
			$author$project$Data$Challenge$emptyChallengeStatistics,
			A2($author$project$State$Cache$getChallengeStatistics, newCache, challengeId));
		var updatedStats = A3(
			$author$project$Data$Challenge$adjustChallengeStatistics,
			oldSteps,
			newSteps,
			_Utils_update(
				statsToUpdate,
				{
					acceptedCount: statsToUpdate.acceptedCount + ($elm$core$List$isEmpty(oldSteps) ? 1 : 0)
				}));
		var simulatedCache = A3($author$project$State$Cache$addChallengeStatistics, newCache, challengeId, updatedStats);
		return simulatedCache;
	});
var $author$project$State$Cache$getPollStats = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.stats;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Poll$toString(id),
				cache.polls));
	});
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $author$project$Data$Poll$updatePollStats = F2(
	function (opt, _v0) {
		var entries = _v0.a;
		var _v1 = A2(
			$elm$core$List$partition,
			function (x) {
				return _Utils_eq(x.option, opt);
			},
			entries);
		var entry = _v1.a;
		var others = _v1.b;
		var _v2 = A2(
			$elm$core$Maybe$withDefault,
			{count: 0, option: opt},
			$elm$core$List$head(entry));
		var option = _v2.option;
		var count = _v2.count;
		return $author$project$Data$Poll$PollStats(
			A2(
				$elm$core$List$cons,
				{count: count + 1, option: option},
				others));
	});
var $author$project$State$Cache$simulatePollAnswer = F3(
	function (cache, pollId, option) {
		var answered = A3($author$project$State$Cache$addPollAnswered, cache, pollId, true);
		var stats = A2(
			$elm$core$Maybe$withDefault,
			$author$project$Data$Poll$PollStats(_List_Nil),
			A2($author$project$State$Cache$getPollStats, answered, pollId));
		return A3(
			$author$project$State$Cache$addPollStats,
			answered,
			pollId,
			A2($author$project$Data$Poll$updatePollStats, option, stats));
	});
var $author$project$View$UIStyle$mobile = {
	defaultFontSize: 9,
	extraLarge: _Utils_Tuple2(96, 96),
	large: _Utils_Tuple2(48, 48),
	normal: _Utils_Tuple2(24, 24),
	small: _Utils_Tuple2(16, 16),
	theme: $author$project$View$Theme$darkModeTheme,
	tiny: _Utils_Tuple2(12, 12)
};
var $author$project$View$UIStyle$uiStyleFor = function (device) {
	var _v0 = device._class;
	switch (_v0.$) {
		case 'Desktop':
			return $author$project$View$UIStyle$desktop;
		case 'BigDesktop':
			return $author$project$View$UIStyle$desktop;
		case 'Tablet':
			return $author$project$View$UIStyle$mobile;
		default:
			return $author$project$View$UIStyle$mobile;
	}
};
var $author$project$Update$Msg$HttpCommentUnflagged = function (a) {
	return {$: 'HttpCommentUnflagged', a: a};
};
var $author$project$Query$Conversation$unflagComment = F2(
	function (user, messageId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpCommentUnflagged,
			$elm$http$Http$task(
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'conversation',
									'unflag',
									$author$project$Data$Conversation$toString(messageId)
								]),
							_List_Nil))
				}));
	});
var $author$project$Update$Msg$HttpHashtagUnfollowed = function (a) {
	return {$: 'HttpHashtagUnfollowed', a: a};
};
var $author$project$Query$Following$unfollowHashtag = F2(
	function (user, hashtag) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpHashtagUnfollowed,
			A3(
				$elm$core$Debug$log,
				'Unfollowing hashtag ' + $author$project$Data$Hashtag$format(hashtag),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								[
									'hashtag',
									'followers',
									'remove',
									$author$project$Data$Hashtag$toString(hashtag)
								]),
							_List_Nil))
				}));
	});
var $author$project$Update$Msg$HttpUserUnfollowed = function (a) {
	return {$: 'HttpUserUnfollowed', a: a};
};
var $author$project$Query$Following$unfollowUser = F2(
	function (user, userId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpUserUnfollowed,
			A3(
				$elm$core$Debug$log,
				'Unfollowing user ' + $author$project$Data$User$toString(userId),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['followers', 'remove']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'followed-id',
									$author$project$Data$User$toString(userId))
								])))
				}));
	});
var $author$project$Update$Msg$HttpPostUnliked = function (a) {
	return {$: 'HttpPostUnliked', a: a};
};
var $author$project$Query$Like$unlike = F3(
	function (cache, user, postId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpPostUnliked,
			A3(
				$elm$core$Debug$log,
				'Unliking post ' + $author$project$Data$Post$toString(postId),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['like', 'remove']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'post-id',
									$author$project$Data$Post$toString(postId))
								])))
				}));
	});
var $author$project$Update$Msg$HttpPostUnpinned = function (a) {
	return {$: 'HttpPostUnpinned', a: a};
};
var $author$project$Query$Pinned$unpin = F2(
	function (user, postId) {
		return A2(
			$elm$core$Task$attempt,
			$author$project$Update$Msg$HttpPostUnpinned,
			A3(
				$elm$core$Debug$log,
				'Unpinning post ' + $author$project$Data$Post$toString(postId),
				$elm$http$Http$task,
				{
					body: $elm$http$Http$emptyBody,
					headers: _List_fromArray(
						[
							$author$project$Query$QueryUtils$authHeader(user)
						]),
					method: 'POST',
					resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
					timeout: $elm$core$Maybe$Nothing,
					url: _Utils_ap(
						$author$project$Query$QueryUtils$baseUrl,
						A2(
							$elm$url$Url$Builder$absolute,
							_List_fromArray(
								['pin', 'remove']),
							_List_fromArray(
								[
									A2(
									$elm$url$Url$Builder$string,
									'post-id',
									$author$project$Data$Post$toString(postId))
								])))
				}));
	});
var $author$project$State$Cache$updateHashtagTrend = F2(
	function (cache, trend) {
		return _Utils_update(
			cache,
			{
				hashtagTrend: $elm$core$Maybe$Just(trend)
			});
	});
var $author$project$State$FormState$updateNewChallengeWizardState = F2(
	function (formState, newChallengeState) {
		return _Utils_update(
			formState,
			{newChallengeWizard: newChallengeState});
	});
var $author$project$State$FormState$updateNewEventWizardState = F2(
	function (formState, newEventState) {
		return _Utils_update(
			formState,
			{newEventWizard: newEventState});
	});
var $author$project$State$FormState$updateNewFreeTextWizardState = F2(
	function (formState, newFreeTextState) {
		return _Utils_update(
			formState,
			{newFreeTextWizard: newFreeTextState});
	});
var $author$project$State$FormState$updateNewPollWizardState = F2(
	function (formState, newPollState) {
		return _Utils_update(
			formState,
			{newPollWizard: newPollState});
	});
var $author$project$State$FeedState$updateNewPostsAvailable = F2(
	function (state, status) {
		return _Utils_update(
			state,
			{newPostsAvailable: status});
	});
var $author$project$State$FormState$updateNewTipWizardState = F2(
	function (formState, newTipState) {
		return _Utils_update(
			formState,
			{newTipWizard: newTipState});
	});
var $author$project$State$FormState$updateRegistrationFormState = F2(
	function (formState, registrationForm) {
		return _Utils_update(
			formState,
			{registrationForm: registrationForm});
	});
var $author$project$State$NotificationState$updateUnreadStatus = F2(
	function (state, status) {
		return _Utils_update(
			state,
			{unread: status});
	});
var $author$project$State$FormState$SubmittingValidationCode = {$: 'SubmittingValidationCode'};
var $author$project$State$FormState$validatingAccount = $author$project$State$FormState$changeRegistrationState($author$project$State$FormState$SubmittingValidationCode);
var $author$project$Update$Msg$HttpNewAccountVerified = function (a) {
	return {$: 'HttpNewAccountVerified', a: a};
};
var $author$project$Utils$TextUtils$format4Digits = function (n) {
	return _Utils_ap(
		((n >= 0) && (n < 10)) ? '000' : (((n >= 10) && (n < 100)) ? '00' : (((n >= 100) && (n < 1000)) ? '0' : '')),
		$elm$core$String$fromInt(n));
};
var $author$project$Data$VerificationCode$format = function (_v0) {
	var s1 = _v0.a;
	var s2 = _v0.b;
	var s3 = _v0.c;
	return $author$project$Utils$TextUtils$format4Digits(s1) + ('-' + ($author$project$Utils$TextUtils$format4Digits(s2) + ('-' + $author$project$Utils$TextUtils$format4Digits(s3))));
};
var $author$project$Query$Registration$verifyAccount = function (state) {
	var email = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Maybe$map, $author$project$Query$Registration$md5String, state.email));
	var code = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Maybe$map, $author$project$Data$VerificationCode$format, state.verification));
	return A2(
		$elm$core$Task$attempt,
		$author$project$Update$Msg$HttpNewAccountVerified,
		$elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_Nil,
				method: 'POST',
				resolver: $author$project$Query$Json$DecoderUtils$jsonResolver($author$project$Query$Json$DecoderUtils$unitDecoder),
				timeout: $elm$core$Maybe$Nothing,
				url: _Utils_ap(
					$author$project$Query$QueryUtils$baseUrl,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['validation', 'validate']),
						_List_fromArray(
							[
								A2($elm$url$Url$Builder$string, 'email-hash', email),
								A2($elm$url$Url$Builder$string, 'validation-code', code)
							])))
			}));
};
var $author$project$State$SearchState$withPostResults = F2(
	function (state, _v0) {
		var page = _v0.a;
		var ps = _v0.b;
		return _Utils_update(
			state,
			{
				currentPage: page,
				postCache: A2(
					$author$project$State$PageCache$loading,
					page,
					A2(
						$author$project$State$PostPageCache$add,
						{items: ps, number: page},
						state.postCache)),
				userCache: $author$project$State$PageCache$empty
			});
	});
var $author$project$State$SearchState$withUserResults = F2(
	function (state, _v0) {
		var page = _v0.a;
		var ps = _v0.b;
		return _Utils_update(
			state,
			{
				currentPage: page,
				postCache: $author$project$State$PageCache$empty,
				userCache: A2(
					$author$project$State$PageCache$loading,
					page,
					A2(
						$author$project$State$UserPageCache$add,
						{items: ps, number: page},
						state.userCache))
			});
	});
var $author$project$Update$Logic$update = F2(
	function (msg, state) {
		update:
		while (true) {
			switch (msg.$) {
				case 'Logoff':
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{display: $author$project$State$AppState$LoggedOffPage, user: $author$project$State$UserState$NotLogged}));
				case 'Logon':
					var user = msg.a;
					var pw = msg.b;
					return A2(
						$author$project$Update$Logic$cmd,
						A2($author$project$Query$Authentication$logon, user, pw),
						state);
				case 'Back':
					var _v1 = state.previous;
					if (!_v1.b) {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						if (!_v1.b.b) {
							return $author$project$Update$Logic$nocmd(state);
						} else {
							var _v2 = _v1.b;
							var x = _v2.a;
							var xs = _v2.b;
							var $temp$msg = $author$project$Update$Msg$DisplayPage(x),
								$temp$state = _Utils_update(
								state,
								{previous: xs});
							msg = $temp$msg;
							state = $temp$state;
							continue update;
						}
					}
				case 'ClockTick':
					return A2($author$project$Update$Logic$cmd, $author$project$Query$Clock$currentTime, state);
				case 'SetCurrentTime':
					var now = msg.a;
					return A2(
						$author$project$Update$Logic$cmd,
						$author$project$Query$Clock$scheduleClockTick,
						_Utils_update(
							state,
							{timestamp: now}));
				case 'IdentifyDevice':
					var device = msg.a;
					var dev = A2($elm$core$Debug$log, 'Window size', device);
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								device: dev,
								uiStyle: $author$project$View$UIStyle$uiStyleFor(device)
							}));
				case 'SetWindowSize':
					var width = msg.a;
					var height = msg.b;
					var winSize = A2(
						$elm$core$Debug$log,
						'Device identified as',
						{height: height, width: width});
					return A2(
						$author$project$Update$Logic$update,
						$author$project$Update$Msg$IdentifyDevice(
							$mdgriffith$elm_ui$Element$classifyDevice(winSize)),
						_Utils_update(
							state,
							{windowSize: winSize}));
				case 'ChangeWallPage':
					var page = msg.a;
					var displayCommand = A2(
						$elm$core$Maybe$withDefault,
						$author$project$Update$Msg$DisplayPage($author$project$State$AppState$WallPage),
						A2(
							$elm$core$Maybe$map,
							function (x) {
								return $author$project$Update$Msg$DisplayPage(
									$author$project$State$AppState$UserPage(x));
							},
							state.wall.user));
					if ($author$project$State$WallState$isLoadingMore(state.wall)) {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						if (A2($author$project$Data$Page$isAfter, page, state.wall.currentPage) && $author$project$State$WallState$noMoreDataToLoad(state.wall)) {
							return $author$project$Update$Logic$nocmd(state);
						} else {
							var $temp$msg = displayCommand,
								$temp$state = _Utils_update(
								state,
								{
									wall: A2($author$project$State$WallState$moveToPage, state.wall, page)
								});
							msg = $temp$msg;
							state = $temp$state;
							continue update;
						}
					}
				case 'RefreshWall':
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$WallPage),
						$temp$state = _Utils_update(
						state,
						{wall: $author$project$State$WallState$refresh});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'ChangeFeedPage':
					var page = msg.a;
					if ($author$project$State$FeedState$isLoadingMore(state.feed)) {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						if (A2($author$project$Data$Page$isAfter, page, state.feed.currentPage) && $author$project$State$FeedState$noMoreDataToLoad(state.feed)) {
							return $author$project$Update$Logic$nocmd(state);
						} else {
							var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$FeedPage),
								$temp$state = _Utils_update(
								state,
								{
									feed: A2($author$project$State$FeedState$moveToPage, state.feed, page)
								});
							msg = $temp$msg;
							state = $temp$state;
							continue update;
						}
					}
				case 'GenerateWelcomeFeed':
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return $author$project$Query$Feed$generateInitialFeed(user);
						},
						state);
				case 'RefreshFeed':
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$FeedPage),
						$temp$state = _Utils_update(
						state,
						{feed: $author$project$State$FeedState$refresh});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'ChangePinnedPage':
					var page = msg.a;
					if ($author$project$State$PinnedState$isLoadingMore(state.pinned)) {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						if (A2($author$project$Data$Page$isAfter, page, state.pinned.currentPage) && $author$project$State$PinnedState$noMoreDataToLoad(state.pinned)) {
							return $author$project$Update$Logic$nocmd(state);
						} else {
							var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$PinnedPostPage),
								$temp$state = _Utils_update(
								state,
								{
									pinned: A2($author$project$State$PinnedState$moveToPage, state.pinned, page)
								});
							msg = $temp$msg;
							state = $temp$state;
							continue update;
						}
					}
				case 'RefreshPinnedPosts':
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$PinnedPostPage),
						$temp$state = _Utils_update(
						state,
						{pinned: $author$project$State$PinnedState$refresh});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'ChangeNotificationPage':
					var page = msg.a;
					if ($author$project$State$NotificationState$isLoadingMore(state.notifications)) {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						if (A2($author$project$Data$Page$isAfter, page, state.notifications.currentPage) && $author$project$State$NotificationState$noMoreDataToLoad(state.notifications)) {
							return $author$project$Update$Logic$nocmd(state);
						} else {
							var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$NotificationPage),
								$temp$state = _Utils_update(
								state,
								{
									notifications: A2($author$project$State$NotificationState$moveToPage, state.notifications, page)
								});
							msg = $temp$msg;
							state = $temp$state;
							continue update;
						}
					}
				case 'RefreshNotifications':
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$NotificationPage),
						$temp$state = _Utils_update(
						state,
						{notifications: $author$project$State$NotificationState$refresh});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'ChangeNotificationTab':
					var tab = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4($author$project$Query$Notification$fetchNotifications, state.cache, user, tab, $author$project$Data$Page$first);
						},
						_Utils_update(
							state,
							{
								notifications: A2($author$project$State$NotificationState$changeTab, tab, state.notifications)
							}));
				case 'ChangeSearchPostPage':
					var page = msg.a;
					if ($author$project$State$SearchState$isLoadingMorePost(state.search)) {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						if (A2($author$project$Data$Page$isAfter, page, state.search.currentPage) && $author$project$State$SearchState$noMorePostToLoad(state.search)) {
							return $author$project$Update$Logic$nocmd(state);
						} else {
							var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$SearchPage),
								$temp$state = _Utils_update(
								state,
								{
									search: A2($author$project$State$SearchState$moveToPage, state.search, page)
								});
							msg = $temp$msg;
							state = $temp$state;
							continue update;
						}
					}
				case 'ChangeSearchUserPage':
					var page = msg.a;
					if ($author$project$State$SearchState$isLoadingMoreUser(state.search)) {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						if (A2($author$project$Data$Page$isAfter, page, state.search.currentPage) && $author$project$State$SearchState$noMoreUserToLoad(state.search)) {
							return $author$project$Update$Logic$nocmd(state);
						} else {
							var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$SearchPage),
								$temp$state = _Utils_update(
								state,
								{
									search: A2($author$project$State$SearchState$moveToPage, state.search, page)
								});
							msg = $temp$msg;
							state = $temp$state;
							continue update;
						}
					}
				case 'ChangeSearchPostTypeFilter':
					var postType = msg.a;
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$SearchPage),
						$temp$state = _Utils_update(
						state,
						{
							search: A2($author$project$State$SearchState$changePostTypeFilter, state.search, postType)
						});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'DisplayPage':
					if (msg.a.$ === 'RegistrationPage') {
						var _v3 = msg.a;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{display: $author$project$State$AppState$RegistrationPage}));
					} else {
						var page = msg.a;
						var newState = _Utils_update(
							state,
							{
								display: $author$project$State$AppState$isUserLoggedIn(state) ? page : $author$project$State$AppState$LoginPage,
								previous: _Utils_ap(
									$author$project$State$AppState$isUserLoggedIn(state) ? _List_fromArray(
										[page]) : _List_Nil,
									state.previous)
							});
						return A2(
							$author$project$Update$Logic$cmd,
							A2($author$project$Update$Logic$loadPageContent, newState, page),
							newState);
					}
				case 'FollowUser':
					var followee = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Following$followUser, user, followee);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$addFollowingUser, state.cache, followee)
							}));
				case 'UnfollowUser':
					var followee = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Following$unfollowUser, user, followee);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$removeFollowingUser, state.cache, followee)
							}));
				case 'FollowHashtag':
					var hashtag = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Following$followHashtag, user, hashtag);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$addFollowingHashtag, state.cache, hashtag)
							}));
				case 'UnfollowHashtag':
					var hashtag = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Following$unfollowHashtag, user, hashtag);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$removeFollowingHashtag, state.cache, hashtag)
							}));
				case 'Repost':
					var postId = msg.a;
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$WizardRepostPage),
						$temp$state = _Utils_update(
						state,
						{
							forms: A2($author$project$State$FormState$repost, state.forms, postId)
						});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'LikePost':
					var postId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Like$like, state.cache, user, postId);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$addLike, state.cache, postId)
							}));
				case 'UnlikePost':
					var postId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Like$unlike, state.cache, user, postId);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$removeLike, state.cache, postId)
							}));
				case 'PinPost':
					var postId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Pinned$pin, user, postId);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$addPinned, state.cache, postId)
							}));
				case 'UnpinPost':
					var postId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Pinned$unpin, user, postId);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$removePinned, state.cache, postId)
							}));
				case 'OpenPostConversation':
					var postId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4(
								$author$project$Query$Conversation$fetchConversation,
								state.cache,
								user,
								postId,
								$author$project$Data$Page$Page(1));
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$setConversationOpened, state.cache, postId, true)
							}));
				case 'ClosePostConversation':
					var postId = msg.a;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$setConversationOpened, state.cache, postId, false)
							}));
				case 'UpdateNewPostComment':
					var postId = msg.a;
					var comment = msg.b;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$addComment, state.cache, postId, comment)
							}));
				case 'PostNewComment':
					var postId = msg.a;
					var comment = msg.b;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Conversation$postComment, user, postId, comment);
						},
						_Utils_update(
							state,
							{
								cache: A2($author$project$State$Cache$removeComment, state.cache, postId)
							}));
				case 'FlagComment':
					var messageId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Conversation$flagComment, user, messageId);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$setFlaggedByUser, state.cache, messageId, true)
							}));
				case 'UnflagComment':
					var messageId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Conversation$unflagComment, user, messageId);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$setFlaggedByUser, state.cache, messageId, false)
							}));
				case 'LoadMore':
					var id = msg.a;
					var loadMoreMsg = msg.b;
					var _v4 = A2($elm$core$Debug$log, 'LoadMore msg received: ', loadMoreMsg);
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (_v5) {
							return A2($author$project$View$InfiniteScroll$loadMoreIfNeeded, id, loadMoreMsg);
						},
						state);
				case 'LoadMoreOrLess':
					var id = msg.a;
					var loadLess = msg.b;
					var loadMore = msg.c;
					var _v6 = A2($elm$core$Debug$log, 'LoadMoreOrLess msg received: ', loadLess);
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (_v7) {
							return A3($author$project$View$InfiniteScroll$loadMoreOrLessIfNeeded, id, loadLess, loadMore);
						},
						state);
				case 'LoadMoreComment':
					var postId = msg.a;
					var page = msg.b;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4($author$project$Query$Conversation$fetchConversation, state.cache, user, postId, page);
						},
						state);
				case 'PerformSearchFromField':
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$SearchPage),
						$temp$state = _Utils_update(
						state,
						{
							search: $author$project$State$SearchState$applyInput(state.search)
						});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'PerformSearchFromHashtag':
					var hashtag = msg.a;
					var $temp$msg = $author$project$Update$Msg$DisplayPage($author$project$State$AppState$SearchPage),
						$temp$state = _Utils_update(
						state,
						{
							search: A2(
								$author$project$State$SearchState$fromHashtags,
								state.search,
								_List_fromArray(
									[hashtag]))
						});
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'CheckNotifications':
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return $author$project$Query$Notification$hasUnreadNotifications(user);
						},
						state);
				case 'CheckFeed':
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Feed$hasNewPosts, user, state.feed);
						},
						state);
				case 'RefreshHashtagTrend':
					var n = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return $author$project$Query$Hashtag$refreshHashtagTrend(user);
						},
						state);
				case 'MarkNotificationRead':
					var notifId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Notification$markAsRead, user, notifId);
						},
						_Utils_update(
							state,
							{
								display: $author$project$State$AppState$isUserLoggedIn(state) ? $author$project$State$AppState$NotificationPage : $author$project$State$AppState$LoginPage,
								notifications: A2($author$project$State$NotificationState$markAsRead, state.notifications, notifId)
							}));
				case 'AcceptChallenge':
					var challengeId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Challenge$acceptChallenge, state.cache, user, challengeId);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$addChallengeOutcomeStatus, state.cache, challengeId, $author$project$Data$Challenge$Accepted)
							}));
				case 'RejectChallenge':
					var challengeId = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Challenge$rejectChallenge, state.cache, user, challengeId);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$addChallengeOutcomeStatus, state.cache, challengeId, $author$project$Data$Challenge$Rejected)
							}));
				case 'ReportChallengeStepStatus':
					var challengeId = msg.a;
					var step = msg.b;
					var status = msg.c;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4($author$project$Query$Challenge$reportStepStatus, user, challengeId, step, status);
						},
						_Utils_update(
							state,
							{
								cache: A3(
									$author$project$State$Cache$simulateChallengeStepReports,
									state.cache,
									challengeId,
									{status: status, step: step})
							}));
				case 'ChangeChallengePage':
					var page = msg.a;
					return $author$project$State$ChallengeState$isLoadingMore(state.challenge) ? $author$project$Update$Logic$nocmd(state) : ((A2($author$project$Data$Page$isAfter, page, state.challenge.currentPage) && $author$project$State$ChallengeState$noMoreDataToLoad(state.challenge)) ? $author$project$Update$Logic$nocmd(state) : A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3(
								$author$project$Query$Challenge$fetchUserChallengePosts,
								state.cache,
								user,
								{page: page, tab: state.challenge.currentTab});
						},
						state));
				case 'ChangeChallengeTab':
					var tab = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3(
								$author$project$Query$Challenge$fetchUserChallengePosts,
								state.cache,
								user,
								{page: $author$project$Data$Page$first, tab: tab});
						},
						_Utils_update(
							state,
							{
								challenge: A2($author$project$State$ChallengeState$changeTab, tab, state.challenge)
							}));
				case 'AnswerPoll':
					var pollId = msg.a;
					var option = msg.b;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4($author$project$Query$Poll$answerPollOption, state.cache, user, pollId, option);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$simulatePollAnswer, state.cache, pollId, option)
							}));
				case 'RequestEventParticipation':
					var id = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Event$requestParticipation, state.cache, user, id);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$addEventParticipationRequestStatus, state.cache, id, true)
							}));
				case 'CancelEventParticipation':
					var id = msg.a;
					var cancelledParticipation = A3($author$project$State$Cache$addEventParticipationStatus, state.cache, id, false);
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Event$cancelParticipation, state.cache, user, id);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$addEventParticipationRequestStatus, cancelledParticipation, id, false)
							}));
				case 'AcceptUserEventParticipation':
					var id = msg.a;
					var userId = msg.b;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4($author$project$Query$Event$acceptParticipation, state.cache, user, id, userId);
						},
						state);
				case 'RejectUserEventParticipation':
					var id = msg.a;
					var userId = msg.b;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4($author$project$Query$Event$rejectParticipation, state.cache, user, id, userId);
						},
						state);
				case 'CancelEvent':
					var id = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3($author$project$Query$Event$cancelEvent, state.cache, user, id);
						},
						_Utils_update(
							state,
							{
								cache: A3($author$project$State$Cache$addEventCancelledStatus, state.cache, id, true)
							}));
				case 'ChangeEventPage':
					var page = msg.a;
					return $author$project$State$EventState$isLoadingMore(state.event) ? $author$project$Update$Logic$nocmd(state) : ((A2($author$project$Data$Page$isAfter, page, state.event.currentPage) && $author$project$State$EventState$noMoreDataToLoad(state.event)) ? $author$project$Update$Logic$nocmd(state) : A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3(
								$author$project$Query$Event$fetchUserEventPosts,
								state.cache,
								user,
								{page: page, tab: state.event.currentTab});
						},
						state));
				case 'ChangeEventTab':
					var tab = msg.a;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A3(
								$author$project$Query$Event$fetchUserEventPosts,
								state.cache,
								user,
								{page: $author$project$Data$Page$first, tab: tab});
						},
						_Utils_update(
							state,
							{
								event: A2($author$project$State$EventState$changeTab, tab, state.event)
							}));
				case 'ChangeEventDetailsPage':
					var eventId = msg.a;
					var page = msg.b;
					return $author$project$State$EventDetailsState$isLoadingMore(state.eventDetails) ? $author$project$Update$Logic$nocmd(state) : ((A2($author$project$Data$Page$isAfter, page, state.eventDetails.currentPage) && $author$project$State$EventDetailsState$noMoreDataToLoad(state.eventDetails)) ? $author$project$Update$Logic$nocmd(state) : A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4(
								$author$project$Query$Event$fetchEventDetailsContentForTab,
								state.cache,
								user,
								eventId,
								{page: page, tab: state.eventDetails.currentTab});
						},
						state));
				case 'ChangeEventDetailsTab':
					var eventId = msg.a;
					var tab = msg.b;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A4(
								$author$project$Query$Event$fetchEventDetailsContentForTab,
								state.cache,
								user,
								eventId,
								{page: $author$project$Data$Page$first, tab: tab});
						},
						_Utils_update(
							state,
							{
								eventDetails: A2($author$project$State$EventDetailsState$changeTab, tab, state.eventDetails)
							}));
				case 'RefreshEventDetails':
					var eventId = msg.a;
					var $temp$msg = $author$project$Update$Msg$DisplayPage(
						$author$project$State$AppState$EventDetailsPage(eventId)),
						$temp$state = state;
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'EnteringCredentials':
					var username = msg.a;
					var password = msg.b;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								user: $author$project$State$UserState$LoggingIn(
									{email: username, password: password})
							}));
				case 'EnteringSearch':
					var content = msg.a;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								search: A2($author$project$State$SearchState$input, state.search, content)
							}));
				case 'FillingRegistrationForm':
					var content = msg.a;
					var updated = _Utils_update(
						state,
						{
							forms: A2($author$project$State$FormState$updateRegistrationFormState, state.forms, content)
						});
					var $temp$msg = $author$project$Update$Msg$CheckPseudoAvailability(content.pseudo),
						$temp$state = updated;
					msg = $temp$msg;
					state = $temp$state;
					continue update;
				case 'CheckPseudoAvailability':
					var maybePseudo = msg.a;
					if (maybePseudo.$ === 'Nothing') {
						return $author$project$Update$Logic$nocmd(state);
					} else {
						var pseudo = maybePseudo.a;
						return ($elm$core$String$length(pseudo) < 3) ? $author$project$Update$Logic$nocmd(state) : A2(
							$author$project$Update$Logic$cmd,
							$author$project$Query$Registration$checkPseudoAvailability(pseudo),
							_Utils_update(
								state,
								{
									forms: $author$project$State$FormState$checkingPseudoAvailability(state.forms)
								}));
					}
				case 'RegisterNewAccount':
					return A2(
						$author$project$Update$Logic$cmd,
						$author$project$Query$Registration$register(state.forms.registrationForm),
						state);
				case 'VerifyAccount':
					return A2(
						$author$project$Update$Logic$cmd,
						$author$project$Query$Registration$verifyAccount(state.forms.registrationForm),
						_Utils_update(
							state,
							{
								forms: $author$project$State$FormState$validatingAccount(state.forms)
							}));
				case 'FillingNewTipWizard':
					var tipState = msg.a;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								forms: A2($author$project$State$FormState$updateNewTipWizardState, state.forms, tipState)
							}));
				case 'PostNewTip':
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Tip$postTip, user, state.forms.newTipWizard);
						},
						_Utils_update(
							state,
							{
								forms: $author$project$State$FormState$postingNewTip(state.forms)
							}));
				case 'PostNewRepost':
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Repost$repost, user, state.forms.newRepostWizard);
						},
						_Utils_update(
							state,
							{
								forms: $author$project$State$FormState$reposting(state.forms)
							}));
				case 'FillingNewFreeTextWizard':
					var freeTextState = msg.a;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								forms: A2($author$project$State$FormState$updateNewFreeTextWizardState, state.forms, freeTextState)
							}));
				case 'PostNewFreeText':
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$FreeText$postFreeText, user, state.forms.newFreeTextWizard);
						},
						_Utils_update(
							state,
							{
								forms: $author$project$State$FormState$postingNewFreeText(state.forms)
							}));
				case 'FillingNewChallengeWizard':
					var challengeState = msg.a;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								forms: A2($author$project$State$FormState$updateNewChallengeWizardState, state.forms, challengeState)
							}));
				case 'PostNewChallenge':
					var newChallengeWizard = msg.a;
					var forms = state.forms;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Challenge$postChallenge, user, newChallengeWizard);
						},
						_Utils_update(
							state,
							{
								forms: $author$project$State$FormState$postingNewChallenge(
									_Utils_update(
										forms,
										{newChallengeWizard: newChallengeWizard}))
							}));
				case 'FillingNewEventWizard':
					var eventState = msg.a;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								forms: A2($author$project$State$FormState$updateNewEventWizardState, state.forms, eventState)
							}));
				case 'PostNewEvent':
					var newEventWizard = msg.a;
					var forms = state.forms;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Event$postEvent, user, newEventWizard);
						},
						_Utils_update(
							state,
							{
								forms: $author$project$State$FormState$postingNewEvent(
									_Utils_update(
										forms,
										{newEventWizard: newEventWizard}))
							}));
				case 'FillingNewPollWizard':
					var pollState = msg.a;
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{
								forms: A2($author$project$State$FormState$updateNewPollWizardState, state.forms, pollState)
							}));
				case 'PostNewPoll':
					var newPollWizard = msg.a;
					var forms = state.forms;
					return A2(
						$author$project$Update$Logic$ifLogged,
						function (user) {
							return A2($author$project$Query$Poll$postPoll, user, newPollWizard);
						},
						_Utils_update(
							state,
							{
								forms: $author$project$State$FormState$postingNewPoll(
									_Utils_update(
										forms,
										{newPollWizard: newPollWizard}))
							}));
				case 'HttpAuthenticated':
					if (msg.a.$ === 'Ok') {
						var userInfo = msg.a.a;
						var _v9 = A2(
							$author$project$Update$Logic$update,
							$author$project$Update$Msg$DisplayPage($author$project$State$AppState$FeedPage),
							_Utils_update(
								state,
								{
									cache: A3($author$project$State$Cache$addUser, state.cache, userInfo.id, userInfo),
									user: $author$project$State$UserState$LoggedIn(userInfo)
								}));
						var state1 = _v9.a;
						var com1 = _v9.b;
						var _v10 = A2($author$project$Update$Logic$cmd, $author$project$Query$Clock$scheduleClockTick, state1);
						var state2 = _v10.a;
						var com2 = _v10.b;
						var _v11 = A2($author$project$Update$Logic$update, $author$project$Update$Msg$CheckNotifications, state2);
						var state3 = _v11.a;
						var com3 = _v11.b;
						var _v12 = A2($author$project$Update$Logic$update, $author$project$Update$Msg$CheckFeed, state3);
						var state4 = _v12.a;
						var com4 = _v12.b;
						var _v13 = A2(
							$author$project$Update$Logic$update,
							$author$project$Update$Msg$RefreshHashtagTrend(50),
							state4);
						var state5 = _v13.a;
						var com5 = _v13.b;
						return A2(
							$author$project$Update$Logic$allOf,
							_List_fromArray(
								[com1, com2, com3, com4, com5, $author$project$Update$Logic$initWindowSize]),
							state5);
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									display: $author$project$State$AppState$LoginFailedPage(err),
									user: $author$project$State$UserState$NotLogged
								}));
					}
				case 'HttpPseudoAvailabilityChecked':
					if (msg.a.$ === 'Ok') {
						var _v14 = msg.a.a;
						var pseudo = _v14.a;
						var checked = _v14.b;
						return $author$project$Update$Logic$nocmd(
							_Utils_eq(
								$elm$core$Maybe$Just(pseudo),
								state.forms.registrationForm.pseudo) ? _Utils_update(
								state,
								{
									forms: A2($author$project$State$FormState$pseudoAvailabilityChecked, state.forms, checked)
								}) : state);
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while checking pseudo availability ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpNewAccountRegistered':
					if (msg.a.$ === 'Ok') {
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									forms: $author$project$State$FormState$registrationSubmitted(state.forms)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while registering the account: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$registrationSubmissionFailed(state.forms)
									})));
					}
				case 'HttpNewAccountVerified':
					if (msg.a.$ === 'Ok') {
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									forms: $author$project$State$FormState$accountVerified(state.forms)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while registering the account: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$accountVerificationFailed(state.forms)
									})));
					}
				case 'HttpHashtagTrendRefreshed':
					if (msg.a.$ === 'Ok') {
						var trend = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$updateHashtagTrend, state.cache, trend)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while retrieving hashtag trend ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpPostLiked':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpPostUnliked':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpUserFollowed':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpUserUnfollowed':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpHashtagFollowed':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpHashtagUnfollowed':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpPostPinned':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpPostUnpinned':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpMarkNotificationAsRead':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpWallFetched':
					if (msg.a.$ === 'Ok') {
						var _v15 = msg.a.a;
						var cache = _v15.a;
						var wall = _v15.b;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									wall: A2($author$project$State$WallState$from, state.wall, wall)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while receiving wall ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpFeedFetched':
					if (msg.a.$ === 'Ok') {
						var _v16 = msg.a.a;
						var cache = _v16.a;
						var feed = _v16.b;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									display: $author$project$State$AppState$FeedPage,
									feed: A2($author$project$State$FeedState$from, state.feed, feed)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while receiving feed ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpFeedChecked':
					if (msg.a.$ === 'Ok') {
						var newPosts = msg.a.a;
						return A2(
							$author$project$Update$Logic$ifLogged,
							function (_v17) {
								return $author$project$Query$Feed$scheduleFeedCheck($author$project$Update$Logic$feedDelay);
							},
							_Utils_update(
								state,
								{
									feed: A2($author$project$State$FeedState$updateNewPostsAvailable, state.feed, newPosts)
								}));
					} else {
						var err = msg.a.a;
						return A2(
							$author$project$Update$Logic$ifLogged,
							function (_v18) {
								return $author$project$Query$Feed$scheduleFeedCheck($author$project$Update$Logic$feedDelay);
							},
							A2(
								$elm$core$Debug$log,
								'Error while checking new feed: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpPinnedPostsFetched':
					if (msg.a.$ === 'Ok') {
						var _v19 = msg.a.a;
						var cache = _v19.a;
						var pinned = _v19.b;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									display: $author$project$State$AppState$PinnedPostPage,
									pinned: A2($author$project$State$PinnedState$from, state.pinned, pinned)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while receiving pinned posts ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpPostSearchResultFetched':
					if (msg.a.$ === 'Ok') {
						var _v20 = msg.a.a;
						var cache = _v20.a;
						var result = _v20.b;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									display: $author$project$State$AppState$SearchPage,
									search: A2($author$project$State$SearchState$withPostResults, state.search, result)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while receiving search result ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{display: $author$project$State$AppState$SearchPage, search: $author$project$State$SearchState$empty})));
					}
				case 'HttpUserSearchResultFetched':
					if (msg.a.$ === 'Ok') {
						var _v21 = msg.a.a;
						var cache = _v21.a;
						var result = _v21.b;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									display: $author$project$State$AppState$SearchPage,
									search: A2($author$project$State$SearchState$withUserResults, state.search, result)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while receiving search result ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{display: $author$project$State$AppState$SearchPage, search: $author$project$State$SearchState$empty})));
					}
				case 'HttpNotificationsChecked':
					if (msg.a.$ === 'Ok') {
						var hasUnread = msg.a.a;
						return A2(
							$author$project$Update$Logic$ifLogged,
							function (_v22) {
								return $author$project$Query$Notification$scheduleNotificationCheck($author$project$Update$Logic$notificationDelay);
							},
							_Utils_update(
								state,
								{
									notifications: A2($author$project$State$NotificationState$updateUnreadStatus, state.notifications, hasUnread)
								}));
					} else {
						var err = msg.a.a;
						return A2(
							$author$project$Update$Logic$ifLogged,
							function (_v23) {
								return $author$project$Query$Notification$scheduleNotificationCheck($author$project$Update$Logic$notificationDelay);
							},
							A2(
								$elm$core$Debug$log,
								'Error while checking notifications: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpNotificationsFetched':
					if (msg.a.$ === 'Ok') {
						var _v24 = msg.a.a;
						var cache = _v24.a;
						var notifs = _v24.b;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									notifications: A3($author$project$State$NotificationState$from, notifs.number, notifs.notifications, state.notifications)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while receiving notifications: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpNewTipPosted':
					if (msg.a.$ === 'Ok') {
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									display: $author$project$State$AppState$NewPostPage,
									forms: $author$project$State$FormState$clearNewTipWizardState(state.forms)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while posting new tip: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$newTipPosted(state.forms)
									})));
					}
				case 'HttpNewRepostPosted':
					if (msg.a.$ === 'Ok') {
						var $temp$msg = $author$project$Update$Msg$Back,
							$temp$state = _Utils_update(
							state,
							{
								forms: $author$project$State$FormState$clearNewRepostWizardState(state.forms)
							});
						msg = $temp$msg;
						state = $temp$state;
						continue update;
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while reposting: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$reposted(state.forms)
									})));
					}
				case 'HttpNewFreeTextPosted':
					if (msg.a.$ === 'Ok') {
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									display: $author$project$State$AppState$NewPostPage,
									forms: $author$project$State$FormState$clearNewFreeTextWizardState(state.forms)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while posting new free text: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$newFreeTextPosted(state.forms)
									})));
					}
				case 'HttpNewChallengePosted':
					if (msg.a.$ === 'Ok') {
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									display: $author$project$State$AppState$NewPostPage,
									forms: $author$project$State$FormState$clearNewChallengeWizardState(state.forms)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while posting new challenge: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$newChallengePosted(state.forms)
									})));
					}
				case 'HttpChallengePostsFetched':
					if (msg.a.$ === 'Ok') {
						var _v25 = msg.a.a;
						var cache = _v25.a;
						var tab = _v25.b.tab;
						var page = _v25.b.page;
						var challenges = _v25.c;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									challenge: A3(
										$author$project$State$ChallengeState$from,
										challenges,
										{page: page, tab: tab},
										state.challenge)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while getting challenge posts: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpChallengeDetailsFetched':
					if (msg.a.$ === 'Ok') {
						var _v26 = msg.a.a;
						var cache = _v26.a;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while fetching challenge details: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpChallengeAccepted':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpChallengeRejected':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpChallengeStepStatusReported':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpPollAnswered':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpNewPollPosted':
					if (msg.a.$ === 'Ok') {
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									display: $author$project$State$AppState$NewPostPage,
									forms: $author$project$State$FormState$clearNewPollWizardState(state.forms)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while posting new Poll: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$newPollPosted(state.forms)
									})));
					}
				case 'HttpNewEventPosted':
					if (msg.a.$ === 'Ok') {
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									display: $author$project$State$AppState$NewPostPage,
									forms: $author$project$State$FormState$clearNewEventWizardState(state.forms)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while posting new event: ' + $author$project$Query$QueryUtils$errorToString(err),
								_Utils_update(
									state,
									{
										forms: $author$project$State$FormState$newEventPosted(state.forms)
									})));
					}
				case 'HttpEventParticipationRequested':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpEventParticipationRequestCancelled':
					if (msg.a.$ === 'Ok') {
						var eventId = msg.a.a;
						var $temp$msg = $author$project$Update$Msg$RefreshEventDetails(eventId),
							$temp$state = state;
						msg = $temp$msg;
						state = $temp$state;
						continue update;
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error accepting participation to event: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpEventParticipationAccepted':
					if (msg.a.$ === 'Ok') {
						var eventId = msg.a.a;
						var $temp$msg = $author$project$Update$Msg$RefreshEventDetails(eventId),
							$temp$state = state;
						msg = $temp$msg;
						state = $temp$state;
						continue update;
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error accepting participation to event: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpEventParticipationRejected':
					if (msg.a.$ === 'Ok') {
						var eventId = msg.a.a;
						var $temp$msg = $author$project$Update$Msg$RefreshEventDetails(eventId),
							$temp$state = state;
						msg = $temp$msg;
						state = $temp$state;
						continue update;
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while rejecting participation to event: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpEventCancelled':
					if (msg.a.$ === 'Ok') {
						var eventId = msg.a.a;
						var $temp$msg = $author$project$Update$Msg$RefreshEventDetails(eventId),
							$temp$state = state;
						msg = $temp$msg;
						state = $temp$state;
						continue update;
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while cancelling event: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpEventPostsFetched':
					if (msg.a.$ === 'Ok') {
						var _v27 = msg.a.a;
						var cache = _v27.a;
						var tab = _v27.b.tab;
						var page = _v27.b.page;
						var events = _v27.c;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									event: A3(
										$author$project$State$EventState$from,
										events,
										{page: page, tab: tab},
										state.event)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while fetching event details: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpEventDetailsFetched':
					if (msg.a.$ === 'Ok') {
						var _v28 = msg.a.a;
						var cache = _v28.a;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while fetching challenge details: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpEventPendingRequestsFetched':
					if (msg.a.$ === 'Ok') {
						var _v29 = msg.a.a;
						var cache = _v29.a;
						var tab = _v29.b.tab;
						var page = _v29.b.page;
						var users = _v29.c;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									eventDetails: A3(
										$author$project$State$EventDetailsState$from,
										users,
										{page: page, tab: tab},
										state.eventDetails)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while fetching event pending requests: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpEventParticipantsFetched':
					if (msg.a.$ === 'Ok') {
						var _v30 = msg.a.a;
						var cache = _v30.a;
						var tab = _v30.b.tab;
						var page = _v30.b.page;
						var users = _v30.c;
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, cache, state.cache),
									eventDetails: A3(
										$author$project$State$EventDetailsState$from,
										users,
										{page: page, tab: tab},
										state.eventDetails)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while fetching event participants: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpConversationPageFetched':
					if (msg.a.$ === 'Ok') {
						var _v31 = msg.a.a;
						var cache = _v31.a;
						var conversationPage = _v31.b;
						var added = _Utils_ap(
							A2($author$project$State$Cache$getConversationMessages, state.cache, conversationPage.postId),
							conversationPage.messages);
						var updated = A3($author$project$State$Cache$addConversationMessages, cache, conversationPage.postId, added);
						return $author$project$Update$Logic$nocmd(
							_Utils_update(
								state,
								{
									cache: A2($author$project$State$Cache$merge, updated, state.cache)
								}));
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while getting conversation page: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpNewCommentPosted':
					if (msg.a.$ === 'Ok') {
						var postId = msg.a.a;
						return A2(
							$author$project$Update$Logic$ifLogged,
							function (user) {
								return A4($author$project$Query$Conversation$fetchConversation, state.cache, user, postId, $author$project$Data$Page$first);
							},
							state);
					} else {
						var err = msg.a.a;
						return $author$project$Update$Logic$nocmd(
							A2(
								$elm$core$Debug$log,
								'Error while getting posted comment: ' + $author$project$Query$QueryUtils$errorToString(err),
								state));
					}
				case 'HttpCommentFlagged':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpCommentUnflagged':
					return $author$project$Update$Logic$nocmd(state);
				case 'HttpLoggedOff':
					return $author$project$Update$Logic$nocmd(
						_Utils_update(
							state,
							{display: $author$project$State$AppState$LoggedOffPage, user: $author$project$State$UserState$NotLogged}));
				case 'NoOp':
					return $author$project$Update$Logic$nocmd(state);
				default:
					var other = msg;
					return $author$project$Update$Logic$nocmd(
						A2(
							$elm$core$Debug$log,
							'Unprocessed message ' + $elm$core$Debug$toString(other),
							state));
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$json$Json$Encode$string = _Json_wrap;
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$View$AppView$displayBlocked = function (state) {
	return $mdgriffith$elm_ui$Element$text('Your user has been blocked !');
};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $author$project$Update$Msg$ChangeChallengeTab = function (a) {
	return {$: 'ChangeChallengeTab', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.italic);
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$regular = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight);
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$View$Style$relFontSize = F2(
	function (ui, sz) {
		return $mdgriffith$elm_ui$Element$Font$size(ui.defaultFontSize + sz);
	});
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$View$Style$tabButton = F4(
	function (ui, label, msg, selected) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 4),
					$mdgriffith$elm_ui$Element$Font$color(
					selected ? ui.theme.tabForeground : ui.theme.disabledTabForeground),
					selected ? $mdgriffith$elm_ui$Element$Font$italic : $mdgriffith$elm_ui$Element$Font$regular,
					$mdgriffith$elm_ui$Element$Border$color(ui.theme.tabForeground),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{
						bottom: selected ? 3 : 0,
						left: 0,
						right: 0,
						top: 0
					}),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(label),
				onPress: $elm$core$Maybe$Just(msg)
			});
	});
var $author$project$View$ChallengeScreen$challengeTabButton = F4(
	function (ui, label, msg, selected) {
		return A4($author$project$View$Style$tabButton, ui, label, msg, selected);
	});
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$View$ChallengeScreen$challengeTabs = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$wrappedRow,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(5)
			]),
		_List_fromArray(
			[
				A4(
				$author$project$View$ChallengeScreen$challengeTabButton,
				state.uiStyle,
				'On going',
				$author$project$Update$Msg$ChangeChallengeTab($author$project$State$ChallengeState$OnGoingTab),
				_Utils_eq(state.challenge.currentTab, $author$project$State$ChallengeState$OnGoingTab)),
				A4(
				$author$project$View$ChallengeScreen$challengeTabButton,
				state.uiStyle,
				'Report due',
				$author$project$Update$Msg$ChangeChallengeTab($author$project$State$ChallengeState$ReportDueTab),
				_Utils_eq(state.challenge.currentTab, $author$project$State$ChallengeState$ReportDueTab)),
				A4(
				$author$project$View$ChallengeScreen$challengeTabButton,
				state.uiStyle,
				'Upcoming',
				$author$project$Update$Msg$ChangeChallengeTab($author$project$State$ChallengeState$UpcomingTab),
				_Utils_eq(state.challenge.currentTab, $author$project$State$ChallengeState$UpcomingTab)),
				A4(
				$author$project$View$ChallengeScreen$challengeTabButton,
				state.uiStyle,
				'Finished',
				$author$project$Update$Msg$ChangeChallengeTab($author$project$State$ChallengeState$FinishedTab),
				_Utils_eq(state.challenge.currentTab, $author$project$State$ChallengeState$FinishedTab)),
				A4(
				$author$project$View$ChallengeScreen$challengeTabButton,
				state.uiStyle,
				'On tracks',
				$author$project$Update$Msg$ChangeChallengeTab($author$project$State$ChallengeState$OnTracksTab),
				_Utils_eq(state.challenge.currentTab, $author$project$State$ChallengeState$OnTracksTab)),
				A4(
				$author$project$View$ChallengeScreen$challengeTabButton,
				state.uiStyle,
				'Failed',
				$author$project$Update$Msg$ChangeChallengeTab($author$project$State$ChallengeState$FailedTab),
				_Utils_eq(state.challenge.currentTab, $author$project$State$ChallengeState$FailedTab)),
				A4(
				$author$project$View$ChallengeScreen$challengeTabButton,
				state.uiStyle,
				'Authored',
				$author$project$Update$Msg$ChangeChallengeTab($author$project$State$ChallengeState$AuthoredTab),
				_Utils_eq(state.challenge.currentTab, $author$project$State$ChallengeState$AuthoredTab))
			]));
};
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $author$project$Update$Msg$ChangeChallengePage = function (a) {
	return {$: 'ChangeChallengePage', a: a};
};
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $author$project$Utils$ListUtils$takeWhile = F2(
	function (predicate, xs) {
		takeWhile:
		while (true) {
			if (!xs.b) {
				return _List_Nil;
			} else {
				var y = xs.a;
				var ys = xs.b;
				if (predicate(y)) {
					return A2(
						$elm$core$List$cons,
						y,
						A2($author$project$Utils$ListUtils$takeWhile, predicate, ys));
				} else {
					var $temp$predicate = predicate,
						$temp$xs = ys;
					predicate = $temp$predicate;
					xs = $temp$xs;
					continue takeWhile;
				}
			}
		}
	});
var $author$project$State$PostPageCache$getAllUpTo = F2(
	function (page, cache) {
		var sortedKeys = A2(
			$author$project$Utils$ListUtils$takeWhile,
			function (key) {
				return _Utils_cmp(
					key,
					$author$project$Data$Page$number(page)) < 1;
			},
			$elm$core$List$sort(
				$elm$core$Dict$keys(cache.cache)));
		var allPosts = A2(
			$elm$core$List$concatMap,
			function (p) {
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.items;
						},
						A2(
							$author$project$State$PageCache$get,
							$author$project$Data$Page$Page(p),
							cache)));
			},
			sortedKeys);
		return $elm$core$List$isEmpty(sortedKeys) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			{items: allPosts, number: page});
	});
var $author$project$State$ChallengeState$allUpToCurrentPage = function (state) {
	return A2($author$project$State$PostPageCache$getAllUpTo, state.currentPage, state.postCache);
};
var $author$project$Update$Msg$LoadMore = F2(
	function (a, b) {
		return {$: 'LoadMore', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $author$project$View$Style$bold = function (txt) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[$mdgriffith$elm_ui$Element$Font$bold]),
		$mdgriffith$elm_ui$Element$text(txt));
};
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $author$project$View$InfiniteScroll$infinitePrefix = 'infinite-scroll-';
var $author$project$View$Style$noSelectionEffect = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'box-shadow', 'none'));
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$View$Style$relSize = F3(
	function (ui, sz, x) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, sz)
				]),
			x);
	});
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $author$project$View$InfiniteScroll$infiniteScrollWithMoreButton = F5(
	function (ui, showButton, id, scrollMsg, elt) {
		var onScrollMsg = A2(
			$author$project$Update$Msg$LoadMore,
			_Utils_ap($author$project$View$InfiniteScroll$infinitePrefix, id),
			scrollMsg);
		var onScroll = function (msg) {
			return $mdgriffith$elm_ui$Element$htmlAttribute(
				A2(
					$elm$html$Html$Events$on,
					'scroll',
					$elm$json$Json$Decode$succeed(msg)));
		};
		var loadMoreButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$padding(1),
					$author$project$View$Style$noSelectionEffect,
					$mdgriffith$elm_ui$Element$Border$width(0)
				]),
			{
				label: A3(
					$author$project$View$Style$relSize,
					ui,
					3,
					$author$project$View$Style$bold('. . .')),
				onPress: $elm$core$Maybe$Just(
					A2(
						$author$project$Update$Msg$LoadMore,
						_Utils_ap($author$project$View$InfiniteScroll$infinitePrefix, id),
						scrollMsg))
			});
		var htmlId = function (ref) {
			return $mdgriffith$elm_ui$Element$htmlAttribute(
				$elm$html$Html$Attributes$id(
					_Utils_ap($author$project$View$InfiniteScroll$infinitePrefix, ref)));
		};
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$scrollbarY,
					onScroll(onScrollMsg),
					htmlId(id)
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(2)
					]),
				_List_fromArray(
					[
						elt,
						showButton ? loadMoreButton : $mdgriffith$elm_ui$Element$none
					])));
	});
var $author$project$State$GenericPage$isEmpty = function (_v0) {
	var items = _v0.items;
	return _Utils_eq(items, _List_Nil);
};
var $author$project$Data$Page$isFirst = function (_v0) {
	var n = _v0.a;
	return n === 1;
};
var $author$project$View$UIStyle$isMobile = function (device) {
	var _v0 = device._class;
	switch (_v0.$) {
		case 'Desktop':
			return false;
		case 'BigDesktop':
			return false;
		case 'Tablet':
			return false;
		default:
			return true;
	}
};
var $author$project$Data$Page$next = function (_v0) {
	var n = _v0.a;
	return $author$project$Data$Page$Page(n + 1);
};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $author$project$View$Style$loadingFixedTextLine = F3(
	function (ui, font, w) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(4)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w)),
						$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
						$mdgriffith$elm_ui$Element$Border$rounded(8),
						$mdgriffith$elm_ui$Element$Font$size(font)
					]),
				$mdgriffith$elm_ui$Element$text('')));
	});
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $author$project$View$Style$loadingTextLine = F2(
	function (ui, font) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(4)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
						$mdgriffith$elm_ui$Element$Border$rounded(8),
						$mdgriffith$elm_ui$Element$Font$size(font)
					]),
				$mdgriffith$elm_ui$Element$text('')));
	});
var $author$project$View$Style$loadingTextBlock = F3(
	function (ui, font, rowCount) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			A2(
				$elm$core$List$cons,
				A3($author$project$View$Style$loadingFixedTextLine, ui, font, 100),
				A2(
					$elm$core$List$map,
					function (_v0) {
						return A2($author$project$View$Style$loadingTextLine, ui, font);
					},
					A2($elm$core$List$range, 1, rowCount - 1))));
	});
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$View$PostRenderer$renderLoadingSinglePost = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$padding(10)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 2, left: 0, right: 0, top: 0}),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{bottom: 2, left: 0, right: 0, top: 0}),
						$mdgriffith$elm_ui$Element$Border$color(ui.theme.background)
					]),
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft]),
					_List_fromArray(
						[
							A3($author$project$View$Style$loadingFixedTextLine, ui, 12, 16),
							A3($author$project$View$Style$loadingFixedTextLine, ui, 12, 100),
							A3($author$project$View$Style$loadingFixedTextLine, ui, 12, 35)
						]))),
				A3($author$project$View$Style$loadingTextBlock, ui, 12, 3),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignLeft,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$elm$core$List$repeat,
					5,
					A3($author$project$View$Style$loadingFixedTextLine, ui, 8, 12)))
			]));
};
var $author$project$View$PostRenderer$renderLoadingPostPage = F2(
	function (ui, count) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				function (_v0) {
					return $author$project$View$PostRenderer$renderLoadingSinglePost(ui);
				},
				A2($elm$core$List$range, 1, count)));
	});
var $author$project$View$ChallengeScreen$renderLoadingPosts = function (ui) {
	return A2($author$project$View$PostRenderer$renderLoadingPostPage, ui, 2);
};
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$View$ScreenUtils$emptyScreen = F2(
	function (ui, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					A2($author$project$View$Style$relFontSize, ui, 36),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$Font$italic
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(txt)
				]));
	});
var $author$project$View$ChallengeScreen$renderNoPostPage = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'No challenges');
};
var $author$project$State$Cache$getPost = F2(
	function (cache, id) {
		return A2(
			$elm$core$Dict$get,
			$author$project$Data$Post$toString(id),
			cache.posts);
	});
var $author$project$View$PostRenderer$isRepost = function (post) {
	var _v0 = post.content;
	if (_v0.$ === 'RePost') {
		return true;
	} else {
		return false;
	}
};
var $author$project$View$ScreenUtils$neverElement = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[$mdgriffith$elm_ui$Element$Font$italic]),
	$mdgriffith$elm_ui$Element$text('You should NEVER see this'));
var $author$project$State$Cache$partnerForPost = F2(
	function (cache, postId) {
		return A2(
			$elm$core$Dict$get,
			$author$project$Data$Post$toString(postId),
			cache.partnerships);
	});
var $author$project$State$Cache$hasPartnership = F2(
	function (cache, postId) {
		return $author$project$Utils$MaybeUtils$nonEmpty(
			A2($author$project$State$Cache$partnerForPost, cache, postId));
	});
var $author$project$View$PartnershipStyle$postDecoration = F4(
	function (ui, cache, postId, elmt) {
		return A2($author$project$State$Cache$hasPartnership, cache, postId) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.partnerForeground),
					$mdgriffith$elm_ui$Element$Background$color(ui.theme.partnerBackground),
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$color($author$project$View$Theme$lightOrange),
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			elmt) : elmt;
	});
var $author$project$State$Cache$getChallenge = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.challenge;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Challenge$toString(id),
				cache.challenges));
	});
var $author$project$Update$Msg$PerformSearchFromHashtag = function (a) {
	return {$: 'PerformSearchFromHashtag', a: a};
};
var $mdgriffith$elm_ui$Element$Font$semiBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textSemiBold);
var $author$project$View$Style$hashtagStyle = F2(
	function (ui, ht) {
		var tag = ht.a;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$Font$semiBold,
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.hashtagForeground)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('#' + tag),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$PerformSearchFromHashtag(ht))
			});
	});
var $author$project$Utils$TextUtils$HashtagQuote = function (a) {
	return {$: 'HashtagQuote', a: a};
};
var $author$project$Utils$TextUtils$Str = function (a) {
	return {$: 'Str', a: a};
};
var $author$project$Utils$TextUtils$UserQuote = function (a) {
	return {$: 'UserQuote', a: a};
};
var $author$project$Utils$TextUtils$userRegex = $author$project$Utils$TextUtils$unsafeRegex('@(\\w|\\d)+');
var $author$project$Utils$TextUtils$isUser = $elm$regex$Regex$contains($author$project$Utils$TextUtils$userRegex);
var $author$project$Utils$TextUtils$parseQuotedText = function (txt) {
	var splitted = A2($elm$core$String$split, ' ', txt);
	var parse = function (xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			if (!xs.b.b) {
				var x = xs.a;
				return $author$project$Utils$TextUtils$isUser(x) ? _List_fromArray(
					[
						$author$project$Utils$TextUtils$UserQuote(x)
					]) : ($author$project$Utils$TextUtils$isHashtag(x) ? _List_fromArray(
					[
						$author$project$Utils$TextUtils$HashtagQuote(x)
					]) : _List_fromArray(
					[
						$author$project$Utils$TextUtils$Str(x)
					]));
			} else {
				var x = xs.a;
				var _v1 = xs.b;
				var y = _v1.a;
				var rest = _v1.b;
				return $author$project$Utils$TextUtils$isUser(x) ? A2(
					$elm$core$List$cons,
					$author$project$Utils$TextUtils$UserQuote(x),
					parse(
						A2($elm$core$List$cons, y, rest))) : ($author$project$Utils$TextUtils$isHashtag(x) ? A2(
					$elm$core$List$cons,
					$author$project$Utils$TextUtils$HashtagQuote(x),
					parse(
						A2($elm$core$List$cons, y, rest))) : A2(
					$elm$core$List$cons,
					$author$project$Utils$TextUtils$Str(x),
					parse(
						A2($elm$core$List$cons, y, rest))));
			}
		}
	};
	return parse(splitted);
};
var $author$project$State$AppState$PseudoPage = function (a) {
	return {$: 'PseudoPage', a: a};
};
var $author$project$View$Style$userStyle = F3(
	function (ui, pseudo, userId) {
		var page = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$AppState$PseudoPage(pseudo),
			A2($elm$core$Maybe$map, $author$project$State$AppState$UserPage, userId));
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$Font$semiBold,
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.userLinkForeground)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('@' + pseudo),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$DisplayPage(page))
			});
	});
var $author$project$View$Style$quotedText = F2(
	function (ui, str) {
		var quoted = $author$project$Utils$TextUtils$parseQuotedText(str);
		var quoteToString = function (s) {
			switch (s.$) {
				case 'Str':
					var x = s.a;
					return $mdgriffith$elm_ui$Element$text(x);
				case 'UserQuote':
					var x = s.a;
					return A3(
						$author$project$View$Style$userStyle,
						ui,
						A2($elm$core$String$dropLeft, 1, x),
						$elm$core$Maybe$Nothing);
				default:
					var x = s.a;
					return A2(
						$author$project$View$Style$hashtagStyle,
						ui,
						$author$project$Data$Hashtag$Hashtag(
							A2($elm$core$String$dropLeft, 1, x)));
			}
		};
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			A2(
				$elm$core$List$intersperse,
				$mdgriffith$elm_ui$Element$text(' '),
				A2($elm$core$List$map, quoteToString, quoted)));
	});
var $author$project$View$Style$multiLineQuotedText = F2(
	function (ui, txt) {
		var lines = A2($elm$core$String$split, '\n', txt);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(1)
				]),
			A2(
				$elm$core$List$map,
				$author$project$View$Style$quotedText(ui),
				lines));
	});
var $author$project$View$Style$postBodyStyle = F2(
	function (ui, e) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($author$project$View$Style$relFontSize, ui, 0)
				]),
			_List_fromArray(
				[e]));
	});
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $author$project$View$Theme$charcoal = A3($mdgriffith$elm_ui$Element$rgb255, 85, 87, 83);
var $author$project$View$Theme$darkRed = A3($mdgriffith$elm_ui$Element$rgb255, 164, 25, 0);
var $author$project$View$Chart$Donut$defaultConfig = {cornerRadius: 0.0, innerRadius: 24, outerRadius: 48, padAngle: 0.0};
var $elm_community$typed_svg$TypedSvg$Types$Paint = function (a) {
	return {$: 'Paint', a: a};
};
var $elm_community$typed_svg$TypedSvg$Types$Translate = F2(
	function (a, b) {
		return {$: 'Translate', a: a, b: b};
	});
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$Basics$acos = _Basics_acos;
var $folkertdev$one_true_path_experiment$LowLevel$Command$EllipticalArc = function (a) {
	return {$: 'EllipticalArc', a: a};
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$arcTo = $folkertdev$one_true_path_experiment$LowLevel$Command$EllipticalArc;
var $folkertdev$svg_path_lowlevel$Path$LowLevel$LargestArc = {$: 'LargestArc'};
var $folkertdev$one_true_path_experiment$LowLevel$Command$largestArc = $folkertdev$svg_path_lowlevel$Path$LowLevel$LargestArc;
var $folkertdev$svg_path_lowlevel$Path$LowLevel$SmallestArc = {$: 'SmallestArc'};
var $folkertdev$one_true_path_experiment$LowLevel$Command$smallestArc = $folkertdev$svg_path_lowlevel$Path$LowLevel$SmallestArc;
var $gampleman$elm_visualization$Shape$Pie$boolToArc = function (b) {
	return b ? $folkertdev$one_true_path_experiment$LowLevel$Command$largestArc : $folkertdev$one_true_path_experiment$LowLevel$Command$smallestArc;
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Clockwise = {$: 'Clockwise'};
var $folkertdev$one_true_path_experiment$LowLevel$Command$clockwise = $folkertdev$svg_path_lowlevel$Path$LowLevel$Clockwise;
var $folkertdev$svg_path_lowlevel$Path$LowLevel$CounterClockwise = {$: 'CounterClockwise'};
var $folkertdev$one_true_path_experiment$LowLevel$Command$counterClockwise = $folkertdev$svg_path_lowlevel$Path$LowLevel$CounterClockwise;
var $gampleman$elm_visualization$Shape$Pie$boolToDirection = function (b) {
	return b ? $folkertdev$one_true_path_experiment$LowLevel$Command$counterClockwise : $folkertdev$one_true_path_experiment$LowLevel$Command$clockwise;
};
var $elm$core$Basics$cos = _Basics_cos;
var $folkertdev$one_true_path_experiment$SubPath$Empty = {$: 'Empty'};
var $folkertdev$one_true_path_experiment$SubPath$empty = $folkertdev$one_true_path_experiment$SubPath$Empty;
var $gampleman$elm_visualization$Shape$Pie$epsilon = 1.0e-12;
var $elm$core$Basics$truncate = _Basics_truncate;
var $gampleman$elm_visualization$Shape$Pie$mod = F2(
	function (a, b) {
		var frac = a / b;
		return (frac - (frac | 0)) * b;
	});
var $folkertdev$one_true_path_experiment$LowLevel$Command$MoveTo = function (a) {
	return {$: 'MoveTo', a: a};
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$moveTo = $folkertdev$one_true_path_experiment$LowLevel$Command$MoveTo;
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$sin = _Basics_sin;
var $folkertdev$one_true_path_experiment$SubPath$SubPath = function (a) {
	return {$: 'SubPath', a: a};
};
var $folkertdev$elm_deque$Deque$Deque = function (a) {
	return {$: 'Deque', a: a};
};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $folkertdev$elm_deque$Internal$rebalance = function (deque) {
	var sizeF = deque.sizeF;
	var sizeR = deque.sizeR;
	var front = deque.front;
	var rear = deque.rear;
	var size1 = ((sizeF + sizeR) / 2) | 0;
	var size2 = (sizeF + sizeR) - size1;
	var balanceConstant = 4;
	if ((sizeF + sizeR) < 2) {
		return deque;
	} else {
		if (_Utils_cmp(sizeF, (balanceConstant * sizeR) + 1) > 0) {
			var newRear = _Utils_ap(
				rear,
				$elm$core$List$reverse(
					A2($elm$core$List$drop, size1, front)));
			var newFront = A2($elm$core$List$take, size1, front);
			return {front: newFront, rear: newRear, sizeF: size1, sizeR: size2};
		} else {
			if (_Utils_cmp(sizeR, (balanceConstant * sizeF) + 1) > 0) {
				var newRear = A2($elm$core$List$take, size1, rear);
				var newFront = _Utils_ap(
					front,
					$elm$core$List$reverse(
						A2($elm$core$List$drop, size1, rear)));
				return {front: newFront, rear: newRear, sizeF: size1, sizeR: size2};
			} else {
				return deque;
			}
		}
	}
};
var $folkertdev$elm_deque$Internal$fromList = function (list) {
	return $folkertdev$elm_deque$Internal$rebalance(
		{
			front: list,
			rear: _List_Nil,
			sizeF: $elm$core$List$length(list),
			sizeR: 0
		});
};
var $folkertdev$elm_deque$Deque$fromList = A2($elm$core$Basics$composeL, $folkertdev$elm_deque$Deque$Deque, $folkertdev$elm_deque$Internal$fromList);
var $folkertdev$one_true_path_experiment$SubPath$with = F2(
	function (moveto, drawtos) {
		return $folkertdev$one_true_path_experiment$SubPath$SubPath(
			{
				drawtos: $folkertdev$elm_deque$Deque$fromList(drawtos),
				moveto: moveto
			});
	});
var $gampleman$elm_visualization$Shape$Pie$arc_ = F6(
	function (x, y, radius, a0, a1, ccw) {
		var tau = 2 * $elm$core$Basics$pi;
		var r = $elm$core$Basics$abs(radius);
		var dy = r * $elm$core$Basics$sin(a0);
		var y0_ = y + dy;
		var dx = r * $elm$core$Basics$cos(a0);
		var x0_ = x + dx;
		var origin = $folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
			_Utils_Tuple2(x0_, y0_));
		var da = ccw ? (a0 - a1) : (a1 - a0);
		var cw = $gampleman$elm_visualization$Shape$Pie$boolToDirection(!ccw);
		if (!r) {
			return $folkertdev$one_true_path_experiment$SubPath$empty;
		} else {
			if (_Utils_cmp(da, tau - $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) {
				return A2(
					$folkertdev$one_true_path_experiment$SubPath$with,
					origin,
					_List_fromArray(
						[
							$folkertdev$one_true_path_experiment$LowLevel$Command$arcTo(
							_List_fromArray(
								[
									{
									arcFlag: $folkertdev$one_true_path_experiment$LowLevel$Command$largestArc,
									direction: cw,
									radii: _Utils_Tuple2(r, r),
									target: _Utils_Tuple2(x - dx, y - dy),
									xAxisRotate: 0
								}
								])),
							$folkertdev$one_true_path_experiment$LowLevel$Command$arcTo(
							_List_fromArray(
								[
									{
									arcFlag: $folkertdev$one_true_path_experiment$LowLevel$Command$largestArc,
									direction: cw,
									radii: _Utils_Tuple2(r, r),
									target: _Utils_Tuple2(x0_, y0_),
									xAxisRotate: 0
								}
								]))
						]));
			} else {
				var da_ = (da < 0) ? (A2($gampleman$elm_visualization$Shape$Pie$mod, da, tau) + tau) : da;
				return A2(
					$folkertdev$one_true_path_experiment$SubPath$with,
					origin,
					_List_fromArray(
						[
							$folkertdev$one_true_path_experiment$LowLevel$Command$arcTo(
							_List_fromArray(
								[
									{
									arcFlag: $gampleman$elm_visualization$Shape$Pie$boolToArc(
										_Utils_cmp(da_, $elm$core$Basics$pi) > -1),
									direction: cw,
									radii: _Utils_Tuple2(r, r),
									target: _Utils_Tuple2(
										x + (r * $elm$core$Basics$cos(a1)),
										y + (r * $elm$core$Basics$sin(a1))),
									xAxisRotate: 0
								}
								]))
						]));
			}
		}
	});
var $elm$core$Basics$atan2 = _Basics_atan2;
var $folkertdev$one_true_path_experiment$LowLevel$Command$ClosePath = {$: 'ClosePath'};
var $folkertdev$one_true_path_experiment$LowLevel$Command$closePath = $folkertdev$one_true_path_experiment$LowLevel$Command$ClosePath;
var $folkertdev$elm_deque$Internal$empty = {front: _List_Nil, rear: _List_Nil, sizeF: 0, sizeR: 0};
var $folkertdev$elm_deque$Internal$popBack = function (deque) {
	var front = deque.front;
	var rear = deque.rear;
	var _v0 = _Utils_Tuple2(front, rear);
	if (!_v0.b.b) {
		if (!_v0.a.b) {
			return _Utils_Tuple2($elm$core$Maybe$Nothing, $folkertdev$elm_deque$Internal$empty);
		} else {
			if (!_v0.a.b.b) {
				var _v1 = _v0.a;
				var x = _v1.a;
				return _Utils_Tuple2(
					$elm$core$Maybe$Just(x),
					$folkertdev$elm_deque$Internal$empty);
			} else {
				return _Utils_Tuple2($elm$core$Maybe$Nothing, $folkertdev$elm_deque$Internal$empty);
			}
		}
	} else {
		var _v2 = _v0.b;
		var r = _v2.a;
		var rs = _v2.b;
		return _Utils_Tuple2(
			$elm$core$Maybe$Just(r),
			$folkertdev$elm_deque$Internal$rebalance(
				{front: deque.front, rear: rs, sizeF: deque.sizeF, sizeR: deque.sizeR - 1}));
	}
};
var $folkertdev$elm_deque$Deque$unwrap = function (_v0) {
	var boundedDeque = _v0.a;
	return boundedDeque;
};
var $folkertdev$elm_deque$Deque$popBack = A2(
	$elm$core$Basics$composeL,
	A2(
		$elm$core$Basics$composeL,
		$elm$core$Tuple$mapSecond($folkertdev$elm_deque$Deque$Deque),
		$folkertdev$elm_deque$Internal$popBack),
	$folkertdev$elm_deque$Deque$unwrap);
var $folkertdev$elm_deque$Deque$mapAbstract = F2(
	function (f, _v0) {
		var _abstract = _v0.a;
		return $folkertdev$elm_deque$Deque$Deque(
			f(_abstract));
	});
var $folkertdev$elm_deque$Deque$pushBack = F2(
	function (elem, _v0) {
		var deque = _v0.a;
		return A2(
			$folkertdev$elm_deque$Deque$mapAbstract,
			$folkertdev$elm_deque$Internal$rebalance,
			$folkertdev$elm_deque$Deque$Deque(
				{
					front: deque.front,
					rear: A2($elm$core$List$cons, elem, deque.rear),
					sizeF: deque.sizeF,
					sizeR: deque.sizeR + 1
				}));
	});
var $folkertdev$one_true_path_experiment$SubPath$close = function (subpath) {
	if (subpath.$ === 'Empty') {
		return $folkertdev$one_true_path_experiment$SubPath$Empty;
	} else {
		var moveto = subpath.a.moveto;
		var drawtos = subpath.a.drawtos;
		var _v1 = $folkertdev$elm_deque$Deque$popBack(drawtos);
		if ((_v1.a.$ === 'Just') && (_v1.a.a.$ === 'ClosePath')) {
			var _v2 = _v1.a.a;
			var preceding = _v1.b;
			return subpath;
		} else {
			return $folkertdev$one_true_path_experiment$SubPath$SubPath(
				{
					drawtos: A2($folkertdev$elm_deque$Deque$pushBack, $folkertdev$one_true_path_experiment$LowLevel$Command$closePath, drawtos),
					moveto: moveto
				});
		}
	}
};
var $folkertdev$one_true_path_experiment$SubPath$firstPoint = function (_v0) {
	var moveto = _v0.moveto;
	var p = moveto.a;
	return p;
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$LineTo = function (a) {
	return {$: 'LineTo', a: a};
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$lineTo = $folkertdev$one_true_path_experiment$LowLevel$Command$LineTo;
var $folkertdev$one_true_path_experiment$SubPath$map2 = F3(
	function (f, sub1, sub2) {
		var _v0 = _Utils_Tuple2(sub1, sub2);
		if (_v0.a.$ === 'Empty') {
			if (_v0.b.$ === 'Empty') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $folkertdev$one_true_path_experiment$SubPath$Empty;
			} else {
				var _v3 = _v0.a;
				var subpath = _v0.b;
				return subpath;
			}
		} else {
			if (_v0.b.$ === 'Empty') {
				var subpath = _v0.a;
				var _v4 = _v0.b;
				return subpath;
			} else {
				var a = _v0.a.a;
				var b = _v0.b.a;
				return A2(f, a, b);
			}
		}
	});
var $folkertdev$one_true_path_experiment$SubPath$pushBack = F2(
	function (drawto, data) {
		return _Utils_update(
			data,
			{
				drawtos: A2($folkertdev$elm_deque$Deque$pushBack, drawto, data.drawtos)
			});
	});
var $folkertdev$elm_deque$Internal$length = function (deque) {
	return deque.sizeF + deque.sizeR;
};
var $folkertdev$elm_deque$Internal$isEmpty = function (deque) {
	return !$folkertdev$elm_deque$Internal$length(deque);
};
var $folkertdev$elm_deque$Deque$isEmpty = A2($elm$core$Basics$composeL, $folkertdev$elm_deque$Internal$isEmpty, $folkertdev$elm_deque$Deque$unwrap);
var $folkertdev$elm_deque$Deque$append = F2(
	function (p, q) {
		var x = p.a;
		var y = q.a;
		return $folkertdev$elm_deque$Deque$isEmpty(p) ? q : ($folkertdev$elm_deque$Deque$isEmpty(q) ? p : $folkertdev$elm_deque$Deque$Deque(
			{
				front: _Utils_ap(
					x.front,
					$elm$core$List$reverse(x.rear)),
				rear: $elm$core$List$reverse(
					_Utils_ap(
						y.front,
						$elm$core$List$reverse(y.rear))),
				sizeF: x.sizeF + x.sizeR,
				sizeR: y.sizeF + y.sizeR
			}));
	});
var $folkertdev$one_true_path_experiment$SubPath$unsafeConcatenate = F2(
	function (a, b) {
		return _Utils_update(
			a,
			{
				drawtos: A2($folkertdev$elm_deque$Deque$append, a.drawtos, b.drawtos)
			});
	});
var $folkertdev$one_true_path_experiment$SubPath$connect = function () {
	var helper = F2(
		function (right, left) {
			return $folkertdev$one_true_path_experiment$SubPath$SubPath(
				A2(
					$folkertdev$one_true_path_experiment$SubPath$unsafeConcatenate,
					A2(
						$folkertdev$one_true_path_experiment$SubPath$pushBack,
						$folkertdev$one_true_path_experiment$LowLevel$Command$lineTo(
							_List_fromArray(
								[
									$folkertdev$one_true_path_experiment$SubPath$firstPoint(right)
								])),
						left),
					right));
		});
	return $folkertdev$one_true_path_experiment$SubPath$map2(helper);
}();
var $elm$core$Basics$pow = _Basics_pow;
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $gampleman$elm_visualization$Shape$Pie$cornerTangents = F7(
	function (x0, y0, x1, y1, r1, rc, cw) {
		var y01 = y0 - y1;
		var x01 = x0 - x1;
		var r = r1 - rc;
		var lo = (cw ? rc : (-rc)) / $elm$core$Basics$sqrt(
			A2($elm$core$Basics$pow, x01, 2) + A2($elm$core$Basics$pow, y01, 2));
		var ox = lo * y01;
		var x10 = x1 + ox;
		var x11 = x0 + ox;
		var x00 = (x11 + x10) / 2;
		var oy = (-lo) * x01;
		var y10 = y1 + oy;
		var y11 = y0 + oy;
		var y00 = (y11 + y10) / 2;
		var dy = y10 - y11;
		var dx = x10 - x11;
		var dd = (x11 * y10) - (x10 * y11);
		var d2 = A2($elm$core$Basics$pow, dx, 2) + A2($elm$core$Basics$pow, dy, 2);
		var d = ((dy < 0) ? (-1) : 1) * $elm$core$Basics$sqrt(
			A2(
				$elm$core$Basics$max,
				0,
				(A2($elm$core$Basics$pow, r, 2) * d2) - A2($elm$core$Basics$pow, dd, 2)));
		var cy1 = (((-dd) * dx) + (dy * d)) / d2;
		var dy1 = cy1 - y00;
		var cy0 = (((-dd) * dx) - (dy * d)) / d2;
		var dy0 = cy0 - y00;
		var cx1 = ((dd * dy) + (dx * d)) / d2;
		var dx1 = cx1 - x00;
		var cx0 = ((dd * dy) - (dx * d)) / d2;
		var dx0 = cx0 - x00;
		var _v0 = (_Utils_cmp(
			A2($elm$core$Basics$pow, dx0, 2) + A2($elm$core$Basics$pow, dy0, 2),
			A2($elm$core$Basics$pow, dx1, 2) + A2($elm$core$Basics$pow, dy1, 2)) > 0) ? _Utils_Tuple2(cx1, cy1) : _Utils_Tuple2(cx0, cy0);
		var fcx = _v0.a;
		var fxy = _v0.b;
		return {cx: fcx, cy: fxy, x01: -ox, x11: fcx * ((r1 / r) - 1), y01: -oy, y11: fxy * ((r1 / r) - 1)};
	});
var $gampleman$elm_visualization$Shape$Pie$intersect = F8(
	function (x0, y0, x1, y1, x2, y2, x3, y3) {
		var y32 = y3 - y2;
		var y10 = y1 - y0;
		var x32 = x3 - x2;
		var x10 = x1 - x0;
		var t = ((x32 * (y0 - y2)) - (y32 * (x0 - x2))) / ((y32 * x10) - (x32 * y10));
		return _Utils_Tuple2(x0 + (t * x10), y0 + (t * y10));
	});
var $folkertdev$elm_deque$Internal$foldl = F3(
	function (f, initial, deque) {
		return function (initial_) {
			return A3($elm$core$List$foldr, f, initial_, deque.rear);
		}(
			A3($elm$core$List$foldl, f, initial, deque.front));
	});
var $folkertdev$elm_deque$Deque$foldl = F2(
	function (f, initial) {
		return A2(
			$elm$core$Basics$composeL,
			A2($folkertdev$elm_deque$Internal$foldl, f, initial),
			$folkertdev$elm_deque$Deque$unwrap);
	});
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$updateCursorState = F2(
	function (drawto, state) {
		var noControlPoint = function (currentState) {
			return _Utils_update(
				currentState,
				{previousControlPoint: $elm$core$Maybe$Nothing});
		};
		var maybeUpdateCursor = function (coordinate) {
			return _Utils_update(
				state,
				{
					cursor: A2($elm$core$Maybe$withDefault, state.cursor, coordinate)
				});
		};
		var _v0 = state.cursor;
		var cursorX = _v0.a;
		var cursorY = _v0.b;
		switch (drawto.$) {
			case 'LineTo':
				var coordinates = drawto.a;
				return noControlPoint(
					maybeUpdateCursor(
						$elm_community$list_extra$List$Extra$last(coordinates)));
			case 'CurveTo':
				var coordinates = drawto.a;
				var _v2 = $elm_community$list_extra$List$Extra$last(coordinates);
				if (_v2.$ === 'Nothing') {
					return state;
				} else {
					var _v3 = _v2.a;
					var control1 = _v3.a;
					var control2 = _v3.b;
					var target = _v3.c;
					return _Utils_update(
						state,
						{
							cursor: target,
							previousControlPoint: $elm$core$Maybe$Just(control2)
						});
				}
			case 'QuadraticBezierCurveTo':
				var coordinates = drawto.a;
				var _v4 = $elm_community$list_extra$List$Extra$last(coordinates);
				if (_v4.$ === 'Nothing') {
					return state;
				} else {
					var _v5 = _v4.a;
					var control = _v5.a;
					var target = _v5.b;
					return _Utils_update(
						state,
						{
							cursor: target,
							previousControlPoint: $elm$core$Maybe$Just(control)
						});
				}
			case 'EllipticalArc':
				var _arguments = drawto.a;
				return noControlPoint(
					maybeUpdateCursor(
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.target;
							},
							$elm_community$list_extra$List$Extra$last(_arguments))));
			default:
				return noControlPoint(state);
		}
	});
var $folkertdev$one_true_path_experiment$SubPath$finalCursorState = function (_v0) {
	var moveto = _v0.moveto;
	var drawtos = _v0.drawtos;
	var _v1 = moveto;
	var start = _v1.a;
	var initial = {cursor: start, previousControlPoint: $elm$core$Maybe$Nothing, start: start};
	return A3($folkertdev$elm_deque$Deque$foldl, $folkertdev$one_true_path_experiment$LowLevel$Command$updateCursorState, initial, drawtos);
};
var $folkertdev$one_true_path_experiment$SubPath$finalPoint = A2(
	$elm$core$Basics$composeR,
	$folkertdev$one_true_path_experiment$SubPath$finalCursorState,
	function ($) {
		return $.cursor;
	});
var $ianmackenzie$elm_units$Quantity$Quantity = function (a) {
	return {$: 'Quantity', a: a};
};
var $ianmackenzie$elm_units$Quantity$float = function (value) {
	return $ianmackenzie$elm_units$Quantity$Quantity(value);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Vector2d = function (a) {
	return {$: 'Vector2d', a: a};
};
var $ianmackenzie$elm_geometry$Vector2d$xy = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: x, y: y});
	});
var $ianmackenzie$elm_geometry$Vector2d$fromTuple = F2(
	function (toQuantity, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return A2(
			$ianmackenzie$elm_geometry$Vector2d$xy,
			toQuantity(x),
			toQuantity(y));
	});
var $folkertdev$elm_deque$Internal$map = F2(
	function (f, deque) {
		return {
			front: A2($elm$core$List$map, f, deque.front),
			rear: A2($elm$core$List$map, f, deque.rear),
			sizeF: deque.sizeF,
			sizeR: deque.sizeR
		};
	});
var $folkertdev$elm_deque$Deque$map = function (f) {
	return $folkertdev$elm_deque$Deque$mapAbstract(
		$folkertdev$elm_deque$Internal$map(f));
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$CurveTo = function (a) {
	return {$: 'CurveTo', a: a};
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$QuadraticBezierCurveTo = function (a) {
	return {$: 'QuadraticBezierCurveTo', a: a};
};
var $folkertdev$one_true_path_experiment$LowLevel$Command$mapTuple2 = F2(
	function (f, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		return _Utils_Tuple2(
			f(a),
			f(b));
	});
var $folkertdev$one_true_path_experiment$LowLevel$Command$mapTuple3 = F2(
	function (f, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		return _Utils_Tuple3(
			f(a),
			f(b),
			f(c));
	});
var $folkertdev$one_true_path_experiment$LowLevel$Command$mapCoordinateDrawTo = F2(
	function (f, drawto) {
		switch (drawto.$) {
			case 'LineTo':
				var coordinates = drawto.a;
				return $folkertdev$one_true_path_experiment$LowLevel$Command$LineTo(
					A2($elm$core$List$map, f, coordinates));
			case 'CurveTo':
				var coordinates = drawto.a;
				return $folkertdev$one_true_path_experiment$LowLevel$Command$CurveTo(
					A2(
						$elm$core$List$map,
						$folkertdev$one_true_path_experiment$LowLevel$Command$mapTuple3(f),
						coordinates));
			case 'QuadraticBezierCurveTo':
				var coordinates = drawto.a;
				return $folkertdev$one_true_path_experiment$LowLevel$Command$QuadraticBezierCurveTo(
					A2(
						$elm$core$List$map,
						$folkertdev$one_true_path_experiment$LowLevel$Command$mapTuple2(f),
						coordinates));
			case 'EllipticalArc':
				var _arguments = drawto.a;
				return $folkertdev$one_true_path_experiment$LowLevel$Command$EllipticalArc(
					A2(
						$elm$core$List$map,
						function (argument) {
							return _Utils_update(
								argument,
								{
									target: f(argument.target)
								});
						},
						_arguments));
			default:
				return $folkertdev$one_true_path_experiment$LowLevel$Command$ClosePath;
		}
	});
var $folkertdev$one_true_path_experiment$SubPath$mapCoordinateInstructions = F2(
	function (f, _v0) {
		var moveto = _v0.moveto;
		var drawtos = _v0.drawtos;
		var coordinate = moveto.a;
		return {
			drawtos: A2(
				$folkertdev$elm_deque$Deque$map,
				$folkertdev$one_true_path_experiment$LowLevel$Command$mapCoordinateDrawTo(f),
				drawtos),
			moveto: $folkertdev$one_true_path_experiment$LowLevel$Command$MoveTo(
				f(coordinate))
		};
	});
var $ianmackenzie$elm_geometry$Vector2d$minus = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: v1.x - v2.x, y: v1.y - v2.y});
	});
var $ianmackenzie$elm_geometry$Vector2d$plus = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: v1.x + v2.x, y: v1.y + v2.y});
	});
var $ianmackenzie$elm_units$Quantity$toFloat = function (_v0) {
	var value = _v0.a;
	return value;
};
var $ianmackenzie$elm_geometry$Vector2d$xComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.x);
};
var $ianmackenzie$elm_geometry$Vector2d$yComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.y);
};
var $ianmackenzie$elm_geometry$Vector2d$toTuple = F2(
	function (fromQuantity, vector) {
		return _Utils_Tuple2(
			fromQuantity(
				$ianmackenzie$elm_geometry$Vector2d$xComponent(vector)),
			fromQuantity(
				$ianmackenzie$elm_geometry$Vector2d$yComponent(vector)));
	});
var $folkertdev$one_true_path_experiment$SubPath$continue = function () {
	var helper = F2(
		function (right, left) {
			var distance = A2(
				$ianmackenzie$elm_geometry$Vector2d$minus,
				A2(
					$ianmackenzie$elm_geometry$Vector2d$fromTuple,
					$ianmackenzie$elm_units$Quantity$float,
					$folkertdev$one_true_path_experiment$SubPath$firstPoint(right)),
				A2(
					$ianmackenzie$elm_geometry$Vector2d$fromTuple,
					$ianmackenzie$elm_units$Quantity$float,
					$folkertdev$one_true_path_experiment$SubPath$finalPoint(left)));
			var mapper = A2(
				$elm$core$Basics$composeL,
				A2(
					$elm$core$Basics$composeL,
					$ianmackenzie$elm_geometry$Vector2d$toTuple($ianmackenzie$elm_units$Quantity$toFloat),
					$ianmackenzie$elm_geometry$Vector2d$plus(distance)),
				$ianmackenzie$elm_geometry$Vector2d$fromTuple($ianmackenzie$elm_units$Quantity$float));
			return $folkertdev$one_true_path_experiment$SubPath$SubPath(
				A2(
					$folkertdev$one_true_path_experiment$SubPath$unsafeConcatenate,
					left,
					A2($folkertdev$one_true_path_experiment$SubPath$mapCoordinateInstructions, mapper, right)));
		});
	return $folkertdev$one_true_path_experiment$SubPath$map2(helper);
}();
var $gampleman$elm_visualization$Shape$Pie$makeArc = F6(
	function (x, y, radius, a0, a1, ccw) {
		return $folkertdev$one_true_path_experiment$SubPath$continue(
			A6($gampleman$elm_visualization$Shape$Pie$arc_, x, y, radius, a0, a1, ccw));
	});
var $elm$core$Basics$asin = _Basics_asin;
var $gampleman$elm_visualization$Shape$Pie$myAsin = function (x) {
	return (x >= 1) ? ($elm$core$Basics$pi / 2) : ((_Utils_cmp(x, -1) < 1) ? ((-$elm$core$Basics$pi) / 2) : $elm$core$Basics$asin(x));
};
var $gampleman$elm_visualization$Shape$Pie$arc = function (arcData) {
	var a1 = arcData.endAngle - ($elm$core$Basics$pi / 2);
	var a0 = arcData.startAngle - ($elm$core$Basics$pi / 2);
	var cw = _Utils_cmp(a1, a0) > 0;
	var da = $elm$core$Basics$abs(a1 - a0);
	var _v0 = (_Utils_cmp(arcData.innerRadius, arcData.outerRadius) > 0) ? _Utils_Tuple2(arcData.outerRadius, arcData.innerRadius) : _Utils_Tuple2(arcData.innerRadius, arcData.outerRadius);
	var r0 = _v0.a;
	var r1 = _v0.b;
	var path = function () {
		if (_Utils_cmp(r1, $gampleman$elm_visualization$Shape$Pie$epsilon) < 1) {
			return _List_fromArray(
				[
					$folkertdev$one_true_path_experiment$SubPath$close(
					A2(
						$folkertdev$one_true_path_experiment$SubPath$with,
						$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
							_Utils_Tuple2(0, 0)),
						_List_Nil))
				]);
		} else {
			if (_Utils_cmp(da, (2 * $elm$core$Basics$pi) - $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) {
				var p = A7(
					$gampleman$elm_visualization$Shape$Pie$makeArc,
					0,
					0,
					r1,
					a0,
					a1,
					!cw,
					A2(
						$folkertdev$one_true_path_experiment$SubPath$with,
						$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
							_Utils_Tuple2(
								r1 * $elm$core$Basics$cos(a0),
								r1 * $elm$core$Basics$sin(a0))),
						_List_Nil));
				return (_Utils_cmp(r0, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) ? _List_fromArray(
					[
						p,
						$folkertdev$one_true_path_experiment$SubPath$close(
						A7(
							$gampleman$elm_visualization$Shape$Pie$makeArc,
							0,
							0,
							r0,
							a1,
							a0,
							cw,
							A2(
								$folkertdev$one_true_path_experiment$SubPath$with,
								$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
									_Utils_Tuple2(
										r0 * $elm$core$Basics$cos(a1),
										r0 * $elm$core$Basics$sin(a1))),
								_List_Nil)))
					]) : _List_fromArray(
					[
						$folkertdev$one_true_path_experiment$SubPath$close(p)
					]);
			} else {
				var rc = A2(
					$elm$core$Basics$min,
					$elm$core$Basics$abs(r1 - r0) / 2,
					arcData.cornerRadius);
				var ap = arcData.padAngle / 2;
				var rp = (_Utils_cmp(ap, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) ? ((arcData.padRadius > 0) ? arcData.padRadius : $elm$core$Basics$sqrt(
					A2($elm$core$Basics$pow, r0, 2) + A2($elm$core$Basics$pow, r1, 2))) : 0;
				var p0 = $gampleman$elm_visualization$Shape$Pie$myAsin(
					(rp / r0) * $elm$core$Basics$sin(ap));
				var p1 = $gampleman$elm_visualization$Shape$Pie$myAsin(
					(rp / r1) * $elm$core$Basics$sin(ap));
				var _v1 = (_Utils_cmp(rp, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) ? ((_Utils_cmp(da - (p1 * 2), $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) ? (cw ? _Utils_Tuple3(a0 + p1, a1 - p1, da - (p1 * 2)) : _Utils_Tuple3(a0 - p1, a1 + p1, da - (p1 * 2))) : _Utils_Tuple3((a0 + a1) / 2, (a0 + a1) / 2, 0)) : _Utils_Tuple3(a0, a1, da);
				var a01 = _v1.a;
				var a11 = _v1.b;
				var da1 = _v1.c;
				var x01 = r1 * $elm$core$Basics$cos(a01);
				var y01 = r1 * $elm$core$Basics$sin(a01);
				var x11 = r1 * $elm$core$Basics$cos(a11);
				var y11 = r1 * $elm$core$Basics$sin(a11);
				var _v2 = (_Utils_cmp(rp, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) ? ((_Utils_cmp(da - (p0 * 2), $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) ? (cw ? _Utils_Tuple3(a0 + p0, a1 - p0, da - (p0 * 2)) : _Utils_Tuple3(a0 - p0, a1 + p0, da - (p0 * 2))) : _Utils_Tuple3((a0 + a1) / 2, (a0 + a1) / 2, 0)) : _Utils_Tuple3(a0, a1, da);
				var a00 = _v2.a;
				var a10 = _v2.b;
				var da0 = _v2.c;
				var x00 = r0 * $elm$core$Basics$cos(a00);
				var y00 = r0 * $elm$core$Basics$sin(a00);
				var x10 = r0 * $elm$core$Basics$cos(a10);
				var y10 = r0 * $elm$core$Basics$sin(a10);
				var _v3 = (_Utils_cmp(da0, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) ? A8($gampleman$elm_visualization$Shape$Pie$intersect, x01, y01, x00, y00, x11, y11, x10, y10) : _Utils_Tuple2(x10, y10);
				var ocx = _v3.a;
				var ocy = _v3.b;
				var lc = $elm$core$Basics$sqrt(
					A2($elm$core$Basics$pow, ocx, 2) + A2($elm$core$Basics$pow, ocy, 2));
				var _v4 = _Utils_Tuple2(x11 - ocx, y11 - ocy);
				var bx = _v4.a;
				var by = _v4.b;
				var _v5 = _Utils_Tuple2(x01 - ocx, y01 - ocy);
				var ax = _v5.a;
				var ay = _v5.b;
				var kc = 1 / $elm$core$Basics$sin(
					$elm$core$Basics$acos(
						((ax * bx) + (ay * by)) / ($elm$core$Basics$sqrt(
							A2($elm$core$Basics$pow, ax, 2) + A2($elm$core$Basics$pow, ay, 2)) * $elm$core$Basics$sqrt(
							A2($elm$core$Basics$pow, bx, 2) + A2($elm$core$Basics$pow, by, 2)))) / 2);
				var _v6 = ((_Utils_cmp(rc, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) && (_Utils_cmp(da, $elm$core$Basics$pi) < 0)) ? _Utils_Tuple2(
					A2($elm$core$Basics$min, rc, (r0 - lc) / (kc - 1)),
					A2($elm$core$Basics$min, rc, (r1 - lc) / (kc + 1))) : _Utils_Tuple2(rc, rc);
				var rc0 = _v6.a;
				var rc1 = _v6.b;
				var outerRing = function () {
					if (_Utils_cmp(da1, $gampleman$elm_visualization$Shape$Pie$epsilon) < 1) {
						return A2(
							$folkertdev$one_true_path_experiment$SubPath$with,
							$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
								_Utils_Tuple2(x01, y01)),
							_List_Nil);
					} else {
						if (_Utils_cmp(rc1, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) {
							var t1 = A7($gampleman$elm_visualization$Shape$Pie$cornerTangents, x11, y11, x10, y10, r1, rc1, cw);
							var t0 = A7($gampleman$elm_visualization$Shape$Pie$cornerTangents, x00, y00, x01, y01, r1, rc1, cw);
							var p = A2(
								$folkertdev$one_true_path_experiment$SubPath$with,
								$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
									_Utils_Tuple2(t0.cx + t0.x01, t0.cy + t0.y01)),
								_List_Nil);
							return (_Utils_cmp(rc1, rc) < 0) ? A7(
								$gampleman$elm_visualization$Shape$Pie$makeArc,
								t0.cx,
								t0.cy,
								rc1,
								A2($elm$core$Basics$atan2, t0.y01, t0.x01),
								A2($elm$core$Basics$atan2, t1.y01, t1.x01),
								!cw,
								p) : A7(
								$gampleman$elm_visualization$Shape$Pie$makeArc,
								t1.cx,
								t1.cy,
								rc1,
								A2($elm$core$Basics$atan2, t1.y11, t1.x11),
								A2($elm$core$Basics$atan2, t1.y01, t1.x01),
								!cw,
								A7(
									$gampleman$elm_visualization$Shape$Pie$makeArc,
									0,
									0,
									r1,
									A2($elm$core$Basics$atan2, t0.cy + t0.y11, t0.cx + t0.x11),
									A2($elm$core$Basics$atan2, t1.cy + t1.y11, t1.cx + t1.x11),
									!cw,
									A7(
										$gampleman$elm_visualization$Shape$Pie$makeArc,
										t0.cx,
										t0.cy,
										rc1,
										A2($elm$core$Basics$atan2, t0.y01, t0.x01),
										A2($elm$core$Basics$atan2, t0.y11, t0.x11),
										!cw,
										p)));
						} else {
							return A7(
								$gampleman$elm_visualization$Shape$Pie$makeArc,
								0,
								0,
								r1,
								a01,
								a11,
								!cw,
								A2(
									$folkertdev$one_true_path_experiment$SubPath$with,
									$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
										_Utils_Tuple2(x01, y01)),
									_List_Nil));
						}
					}
				}();
				if ((_Utils_cmp(r0, $gampleman$elm_visualization$Shape$Pie$epsilon) < 1) || (_Utils_cmp(da0, $gampleman$elm_visualization$Shape$Pie$epsilon) < 1)) {
					return _List_fromArray(
						[
							$folkertdev$one_true_path_experiment$SubPath$close(
							A2(
								$folkertdev$one_true_path_experiment$SubPath$connect,
								A2(
									$folkertdev$one_true_path_experiment$SubPath$with,
									$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
										_Utils_Tuple2(x10, y10)),
									_List_Nil),
								outerRing))
						]);
				} else {
					if (_Utils_cmp(rc0, $gampleman$elm_visualization$Shape$Pie$epsilon) > 0) {
						var t1 = A7($gampleman$elm_visualization$Shape$Pie$cornerTangents, x01, y01, x00, y00, r0, -rc0, cw);
						var t0 = A7($gampleman$elm_visualization$Shape$Pie$cornerTangents, x10, y10, x11, y11, r0, -rc0, cw);
						var p = A2(
							$folkertdev$one_true_path_experiment$SubPath$connect,
							A2(
								$folkertdev$one_true_path_experiment$SubPath$with,
								$folkertdev$one_true_path_experiment$LowLevel$Command$moveTo(
									_Utils_Tuple2(t0.cx + t0.x01, t0.cy + t0.y01)),
								_List_Nil),
							outerRing);
						return (_Utils_cmp(rc0, rc) < 0) ? _List_fromArray(
							[
								$folkertdev$one_true_path_experiment$SubPath$close(
								A7(
									$gampleman$elm_visualization$Shape$Pie$makeArc,
									t0.cx,
									t0.cy,
									rc0,
									A2($elm$core$Basics$atan2, t0.y01, t0.x01),
									A2($elm$core$Basics$atan2, t1.y01, t1.x01),
									!cw,
									p))
							]) : _List_fromArray(
							[
								$folkertdev$one_true_path_experiment$SubPath$close(
								A7(
									$gampleman$elm_visualization$Shape$Pie$makeArc,
									t1.cx,
									t1.cy,
									rc0,
									A2($elm$core$Basics$atan2, t1.y11, t1.x11),
									A2($elm$core$Basics$atan2, t1.y01, t1.x01),
									!cw,
									A7(
										$gampleman$elm_visualization$Shape$Pie$makeArc,
										0,
										0,
										r0,
										A2($elm$core$Basics$atan2, t0.cy + t0.y11, t0.cx + t0.x11),
										A2($elm$core$Basics$atan2, t1.cy + t1.y11, t1.cx + t1.x11),
										cw,
										A7(
											$gampleman$elm_visualization$Shape$Pie$makeArc,
											t0.cx,
											t0.cy,
											rc0,
											A2($elm$core$Basics$atan2, t0.y01, t0.x01),
											A2($elm$core$Basics$atan2, t0.y11, t0.x11),
											!cw,
											p))))
							]);
					} else {
						return _List_fromArray(
							[
								$folkertdev$one_true_path_experiment$SubPath$close(
								A2(
									$folkertdev$one_true_path_experiment$SubPath$connect,
									A6($gampleman$elm_visualization$Shape$Pie$arc_, 0, 0, r0, a10, a00, cw),
									outerRing))
							]);
					}
				}
			}
		}
	}();
	return path;
};
var $gampleman$elm_visualization$Shape$arc = $gampleman$elm_visualization$Shape$Pie$arc;
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.red, components.green, components.blue, components.alpha);
};
var $mdgriffith$elm_ui$Element$toRgb = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $author$project$View$Chart$Donut$convertColor = function (color) {
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(color);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return $avh4$elm_color$Color$fromRgba(
		{alpha: alpha, blue: blue, green: green, red: red});
};
var $gampleman$elm_visualization$Shape$defaultPieConfig = {cornerRadius: 0, endAngle: 2 * $elm$core$Basics$pi, innerRadius: 0, outerRadius: 100, padAngle: 0, padRadius: 0, sortingFn: $elm$core$Basics$compare, startAngle: 0, valueFn: $elm$core$Basics$identity};
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $folkertdev$elm_deque$Deque$empty = $folkertdev$elm_deque$Deque$Deque($folkertdev$elm_deque$Internal$empty);
var $folkertdev$one_true_path_experiment$LowLevel$Command$merge = F2(
	function (instruction1, instruction2) {
		var _v0 = _Utils_Tuple2(instruction1, instruction2);
		_v0$5:
		while (true) {
			switch (_v0.a.$) {
				case 'LineTo':
					if (_v0.b.$ === 'LineTo') {
						var p1 = _v0.a.a;
						var p2 = _v0.b.a;
						return $elm$core$Result$Ok(
							$folkertdev$one_true_path_experiment$LowLevel$Command$LineTo(
								_Utils_ap(p1, p2)));
					} else {
						break _v0$5;
					}
				case 'CurveTo':
					if (_v0.b.$ === 'CurveTo') {
						var p1 = _v0.a.a;
						var p2 = _v0.b.a;
						return $elm$core$Result$Ok(
							$folkertdev$one_true_path_experiment$LowLevel$Command$CurveTo(
								_Utils_ap(p1, p2)));
					} else {
						break _v0$5;
					}
				case 'QuadraticBezierCurveTo':
					if (_v0.b.$ === 'QuadraticBezierCurveTo') {
						var p1 = _v0.a.a;
						var p2 = _v0.b.a;
						return $elm$core$Result$Ok(
							$folkertdev$one_true_path_experiment$LowLevel$Command$QuadraticBezierCurveTo(
								_Utils_ap(p1, p2)));
					} else {
						break _v0$5;
					}
				case 'EllipticalArc':
					if (_v0.b.$ === 'EllipticalArc') {
						var p1 = _v0.a.a;
						var p2 = _v0.b.a;
						return $elm$core$Result$Ok(
							$folkertdev$one_true_path_experiment$LowLevel$Command$EllipticalArc(
								_Utils_ap(p1, p2)));
					} else {
						break _v0$5;
					}
				default:
					if (_v0.b.$ === 'ClosePath') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return $elm$core$Result$Ok($folkertdev$one_true_path_experiment$LowLevel$Command$ClosePath);
					} else {
						break _v0$5;
					}
			}
		}
		return $elm$core$Result$Err(
			_Utils_Tuple2(instruction1, instruction2));
	});
var $folkertdev$elm_deque$Internal$toList = function (deque) {
	return _Utils_ap(
		deque.front,
		$elm$core$List$reverse(deque.rear));
};
var $folkertdev$elm_deque$Deque$toList = A2($elm$core$Basics$composeL, $folkertdev$elm_deque$Internal$toList, $folkertdev$elm_deque$Deque$unwrap);
var $folkertdev$one_true_path_experiment$SubPath$compressHelper = function (drawtos) {
	var folder = F2(
		function (instruction, _v3) {
			var previous = _v3.a;
			var accum = _v3.b;
			var _v2 = A2($folkertdev$one_true_path_experiment$LowLevel$Command$merge, previous, instruction);
			if (_v2.$ === 'Ok') {
				var merged = _v2.a;
				return _Utils_Tuple2(merged, accum);
			} else {
				return _Utils_Tuple2(
					instruction,
					A2($elm$core$List$cons, previous, accum));
			}
		});
	var _v0 = $folkertdev$elm_deque$Deque$toList(drawtos);
	if (!_v0.b) {
		return $folkertdev$elm_deque$Deque$empty;
	} else {
		var first = _v0.a;
		var rest = _v0.b;
		return $folkertdev$elm_deque$Deque$fromList(
			$elm$core$List$reverse(
				function (_v1) {
					var a = _v1.a;
					var b = _v1.b;
					return A2($elm$core$List$cons, a, b);
				}(
					A3(
						$elm$core$List$foldl,
						folder,
						_Utils_Tuple2(first, _List_Nil),
						rest))));
	}
};
var $folkertdev$one_true_path_experiment$SubPath$compress = function (subpath) {
	if (subpath.$ === 'Empty') {
		return $folkertdev$one_true_path_experiment$SubPath$Empty;
	} else {
		var data = subpath.a;
		return $folkertdev$one_true_path_experiment$SubPath$SubPath(
			_Utils_update(
				data,
				{
					drawtos: $folkertdev$one_true_path_experiment$SubPath$compressHelper(data.drawtos)
				}));
	}
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$DecimalPlaces = function (a) {
	return {$: 'DecimalPlaces', a: a};
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$decimalPlaces = $folkertdev$svg_path_lowlevel$Path$LowLevel$DecimalPlaces;
var $folkertdev$one_true_path_experiment$SubPath$defaultConfig = {decimalPlaces: $elm$core$Maybe$Nothing, mergeAdjacent: false};
var $folkertdev$one_true_path_experiment$SubPath$optionFolder = F2(
	function (option, config) {
		if (option.$ === 'DecimalPlaces') {
			var n = option.a;
			return _Utils_update(
				config,
				{
					decimalPlaces: $elm$core$Maybe$Just(n)
				});
		} else {
			return _Utils_update(
				config,
				{mergeAdjacent: true});
		}
	});
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute = {$: 'Absolute'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ClosePath = {$: 'ClosePath'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$CurveTo = F2(
	function (a, b) {
		return {$: 'CurveTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$EllipticalArc = F2(
	function (a, b) {
		return {$: 'EllipticalArc', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo = F2(
	function (a, b) {
		return {$: 'LineTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$QuadraticBezierCurveTo = F2(
	function (a, b) {
		return {$: 'QuadraticBezierCurveTo', a: a, b: b};
	});
var $folkertdev$one_true_path_experiment$LowLevel$Command$toLowLevelDrawTo = function (drawto) {
	switch (drawto.$) {
		case 'LineTo':
			var coordinates = drawto.a;
			return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute, coordinates);
		case 'CurveTo':
			var coordinates = drawto.a;
			return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$CurveTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute, coordinates);
		case 'QuadraticBezierCurveTo':
			var coordinates = drawto.a;
			return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$QuadraticBezierCurveTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute, coordinates);
		case 'EllipticalArc':
			var _arguments = drawto.a;
			return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$EllipticalArc, $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute, _arguments);
		default:
			return $folkertdev$svg_path_lowlevel$Path$LowLevel$ClosePath;
	}
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$MoveTo = F2(
	function (a, b) {
		return {$: 'MoveTo', a: a, b: b};
	});
var $folkertdev$one_true_path_experiment$LowLevel$Command$toLowLevelMoveTo = function (_v0) {
	var target = _v0.a;
	return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$MoveTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute, target);
};
var $folkertdev$one_true_path_experiment$SubPath$toLowLevel = function (subpath) {
	if (subpath.$ === 'Empty') {
		return $elm$core$Maybe$Nothing;
	} else {
		var moveto = subpath.a.moveto;
		var drawtos = subpath.a.drawtos;
		return $elm$core$Maybe$Just(
			{
				drawtos: A2(
					$elm$core$List$map,
					$folkertdev$one_true_path_experiment$LowLevel$Command$toLowLevelDrawTo,
					$folkertdev$elm_deque$Deque$toList(drawtos)),
				moveto: $folkertdev$one_true_path_experiment$LowLevel$Command$toLowLevelMoveTo(moveto)
			});
	}
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$defaultConfig = {floatFormatter: $elm$core$String$fromFloat};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$roundTo = F2(
	function (n, value) {
		if (!n) {
			return $elm$core$String$fromInt(
				$elm$core$Basics$round(value));
		} else {
			var sign = (value < 0.0) ? '-' : '';
			var exp = A2($elm$core$Basics$pow, 10, n);
			var raised = $elm$core$Basics$abs(
				$elm$core$Basics$round(value * exp));
			var decimals = raised % exp;
			return (!decimals) ? _Utils_ap(
				sign,
				$elm$core$String$fromInt((raised / exp) | 0)) : (sign + ($elm$core$String$fromInt((raised / exp) | 0) + ('.' + $elm$core$String$fromInt(decimals))));
		}
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$optionFolder = F2(
	function (option, config) {
		var n = option.a;
		return _Utils_update(
			config,
			{
				floatFormatter: $folkertdev$svg_path_lowlevel$Path$LowLevel$roundTo(n)
			});
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$accumulateOptions = A2($elm$core$List$foldl, $folkertdev$svg_path_lowlevel$Path$LowLevel$optionFolder, $folkertdev$svg_path_lowlevel$Path$LowLevel$defaultConfig);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$isEmpty = function (command) {
	switch (command.$) {
		case 'LineTo':
			var mode = command.a;
			var coordinates = command.b;
			return $elm$core$List$isEmpty(coordinates);
		case 'Horizontal':
			var mode = command.a;
			var coordinates = command.b;
			return $elm$core$List$isEmpty(coordinates);
		case 'Vertical':
			var mode = command.a;
			var coordinates = command.b;
			return $elm$core$List$isEmpty(coordinates);
		case 'CurveTo':
			var mode = command.a;
			var coordinates = command.b;
			return $elm$core$List$isEmpty(coordinates);
		case 'SmoothCurveTo':
			var mode = command.a;
			var coordinates = command.b;
			return $elm$core$List$isEmpty(coordinates);
		case 'QuadraticBezierCurveTo':
			var mode = command.a;
			var coordinates = command.b;
			return $elm$core$List$isEmpty(coordinates);
		case 'SmoothQuadraticBezierCurveTo':
			var mode = command.a;
			var coordinates = command.b;
			return $elm$core$List$isEmpty(coordinates);
		case 'EllipticalArc':
			var mode = command.a;
			var _arguments = command.b;
			return $elm$core$List$isEmpty(_arguments);
		default:
			return false;
	}
};
var $elm$core$Char$toLower = _Char_toLower;
var $elm$core$Char$toUpper = _Char_toUpper;
var $folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter = F2(
	function (mode, character) {
		if (mode.$ === 'Absolute') {
			return $elm$core$String$fromChar(
				$elm$core$Char$toUpper(character));
		} else {
			return $elm$core$String$fromChar(
				$elm$core$Char$toLower(character));
		}
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate = F2(
	function (config, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return config.floatFormatter(x) + (',' + config.floatFormatter(y));
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate2 = F2(
	function (config, _v0) {
		var c1 = _v0.a;
		var c2 = _v0.b;
		return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, c1) + (' ' + A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, c2));
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate3 = F2(
	function (config, _v0) {
		var c1 = _v0.a;
		var c2 = _v0.b;
		var c3 = _v0.c;
		return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, c1) + (' ' + (A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, c2) + (' ' + A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, c3))));
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$encodeFlags = function (_v0) {
	var arcFlag = _v0.a;
	var direction = _v0.b;
	var _v1 = _Utils_Tuple2(arcFlag, direction);
	if (_v1.a.$ === 'LargestArc') {
		if (_v1.b.$ === 'Clockwise') {
			var _v2 = _v1.a;
			var _v3 = _v1.b;
			return _Utils_Tuple2(1, 0);
		} else {
			var _v6 = _v1.a;
			var _v7 = _v1.b;
			return _Utils_Tuple2(1, 1);
		}
	} else {
		if (_v1.b.$ === 'Clockwise') {
			var _v4 = _v1.a;
			var _v5 = _v1.b;
			return _Utils_Tuple2(0, 0);
		} else {
			var _v8 = _v1.a;
			var _v9 = _v1.b;
			return _Utils_Tuple2(0, 1);
		}
	}
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyEllipticalArcArgument = F2(
	function (config, _v0) {
		var radii = _v0.radii;
		var xAxisRotate = _v0.xAxisRotate;
		var arcFlag = _v0.arcFlag;
		var direction = _v0.direction;
		var target = _v0.target;
		var _v1 = $folkertdev$svg_path_lowlevel$Path$LowLevel$encodeFlags(
			_Utils_Tuple2(arcFlag, direction));
		var arc = _v1.a;
		var sweep = _v1.b;
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, radii),
					$elm$core$String$fromFloat(xAxisRotate),
					$elm$core$String$fromInt(arc),
					$elm$core$String$fromInt(sweep),
					A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, target)
				]));
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyDrawTo = F2(
	function (config, command) {
		if ($folkertdev$svg_path_lowlevel$Path$LowLevel$isEmpty(command)) {
			return '';
		} else {
			switch (command.$) {
				case 'LineTo':
					var mode = command.a;
					var coordinates = command.b;
					return _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('L')),
						A2(
							$elm$core$String$join,
							' ',
							A2(
								$elm$core$List$map,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate(config),
								coordinates)));
				case 'Horizontal':
					var mode = command.a;
					var coordinates = command.b;
					return $elm$core$List$isEmpty(coordinates) ? '' : _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('H')),
						A2(
							$elm$core$String$join,
							' ',
							A2($elm$core$List$map, $elm$core$String$fromFloat, coordinates)));
				case 'Vertical':
					var mode = command.a;
					var coordinates = command.b;
					return _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('V')),
						A2(
							$elm$core$String$join,
							' ',
							A2($elm$core$List$map, $elm$core$String$fromFloat, coordinates)));
				case 'CurveTo':
					var mode = command.a;
					var coordinates = command.b;
					return _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('C')),
						A2(
							$elm$core$String$join,
							' ',
							A2(
								$elm$core$List$map,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate3(config),
								coordinates)));
				case 'SmoothCurveTo':
					var mode = command.a;
					var coordinates = command.b;
					return _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('S')),
						A2(
							$elm$core$String$join,
							' ',
							A2(
								$elm$core$List$map,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate2(config),
								coordinates)));
				case 'QuadraticBezierCurveTo':
					var mode = command.a;
					var coordinates = command.b;
					return _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('Q')),
						A2(
							$elm$core$String$join,
							' ',
							A2(
								$elm$core$List$map,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate2(config),
								coordinates)));
				case 'SmoothQuadraticBezierCurveTo':
					var mode = command.a;
					var coordinates = command.b;
					return _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('T')),
						A2(
							$elm$core$String$join,
							' ',
							A2(
								$elm$core$List$map,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate(config),
								coordinates)));
				case 'EllipticalArc':
					var mode = command.a;
					var _arguments = command.b;
					return _Utils_ap(
						A2(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCharacter,
							mode,
							_Utils_chr('A')),
						A2(
							$elm$core$String$join,
							' ',
							A2(
								$elm$core$List$map,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyEllipticalArcArgument(config),
								_arguments)));
				default:
					return 'Z';
			}
		}
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyMoveTo = F2(
	function (config, _v0) {
		var mode = _v0.a;
		var coordinate = _v0.b;
		if (mode.$ === 'Absolute') {
			return 'M' + A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, coordinate);
		} else {
			return 'm' + A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyCoordinate, config, coordinate);
		}
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$toStringSubPath = F2(
	function (config, _v0) {
		var moveto = _v0.moveto;
		var drawtos = _v0.drawtos;
		return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyMoveTo, config, moveto) + (' ' + A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$folkertdev$svg_path_lowlevel$Path$LowLevel$stringifyDrawTo(config),
				drawtos)));
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$toStringWith = F2(
	function (options, subpaths) {
		var config = $folkertdev$svg_path_lowlevel$Path$LowLevel$accumulateOptions(options);
		return A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$folkertdev$svg_path_lowlevel$Path$LowLevel$toStringSubPath(config),
				subpaths));
	});
var $folkertdev$one_true_path_experiment$SubPath$toStringWith = F2(
	function (options, subpath) {
		var config = A3($elm$core$List$foldl, $folkertdev$one_true_path_experiment$SubPath$optionFolder, $folkertdev$one_true_path_experiment$SubPath$defaultConfig, options);
		var lowLevelOptions = function () {
			var _v0 = config.decimalPlaces;
			if (_v0.$ === 'Nothing') {
				return _List_Nil;
			} else {
				var n = _v0.a;
				return _List_fromArray(
					[
						$folkertdev$svg_path_lowlevel$Path$LowLevel$decimalPlaces(n)
					]);
			}
		}();
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeL,
					$folkertdev$svg_path_lowlevel$Path$LowLevel$toStringWith(lowLevelOptions),
					$elm$core$List$singleton),
				$folkertdev$one_true_path_experiment$SubPath$toLowLevel(
					(config.mergeAdjacent ? $folkertdev$one_true_path_experiment$SubPath$compress : $elm$core$Basics$identity)(subpath))));
	});
var $folkertdev$one_true_path_experiment$SubPath$toString = function (subpath) {
	return A2($folkertdev$one_true_path_experiment$SubPath$toStringWith, _List_Nil, subpath);
};
var $folkertdev$one_true_path_experiment$Path$toString = A2(
	$elm$core$Basics$composeL,
	$elm$core$String$join(' '),
	$elm$core$List$map($folkertdev$one_true_path_experiment$SubPath$toString));
var $folkertdev$one_true_path_experiment$Path$element = F2(
	function (path, attributes) {
		return A2(
			$elm$svg$Svg$path,
			A2(
				$elm$core$List$cons,
				$elm$svg$Svg$Attributes$d(
					$folkertdev$one_true_path_experiment$Path$toString(path)),
				attributes),
			_List_Nil);
	});
var $elm_community$typed_svg$TypedSvg$Core$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $avh4$elm_color$Color$toCssString = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var roundTo = function (x) {
		return $elm$core$Basics$round(x * 1000) / 1000;
	};
	var pct = function (x) {
		return $elm$core$Basics$round(x * 10000) / 100;
	};
	return $elm$core$String$concat(
		_List_fromArray(
			[
				'rgba(',
				$elm$core$String$fromFloat(
				pct(r)),
				'%,',
				$elm$core$String$fromFloat(
				pct(g)),
				'%,',
				$elm$core$String$fromFloat(
				pct(b)),
				'%,',
				$elm$core$String$fromFloat(
				roundTo(a)),
				')'
			]));
};
var $elm_community$typed_svg$TypedSvg$TypesToStrings$paintToString = function (paint) {
	switch (paint.$) {
		case 'Paint':
			var color = paint.a;
			return $avh4$elm_color$Color$toCssString(color);
		case 'CSSVariable':
			var string = paint.a;
			return $elm$core$String$concat(
				_List_fromArray(
					['var(' + (string + ')')]));
		case 'Reference':
			var string = paint.a;
			return $elm$core$String$concat(
				_List_fromArray(
					['url(#', string, ')']));
		case 'ContextFill':
			return 'context-fill';
		case 'ContextStroke':
			return 'context-stroke';
		default:
			return 'none';
	}
};
var $elm_community$typed_svg$TypedSvg$Attributes$fill = A2(
	$elm$core$Basics$composeL,
	$elm_community$typed_svg$TypedSvg$Core$attribute('fill'),
	$elm_community$typed_svg$TypedSvg$TypesToStrings$paintToString);
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $elm_community$typed_svg$TypedSvg$Core$node = $elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var $elm_community$typed_svg$TypedSvg$g = $elm_community$typed_svg$TypedSvg$Core$node('g');
var $elm_community$typed_svg$TypedSvg$TypesToStrings$lengthToString = function (length) {
	switch (length.$) {
		case 'Cm':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'cm';
		case 'Em':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'em';
		case 'Ex':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'ex';
		case 'In':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'in';
		case 'Mm':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'mm';
		case 'Num':
			var x = length.a;
			return $elm$core$String$fromFloat(x);
		case 'Pc':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'pc';
		case 'Percent':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + '%';
		case 'Pt':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'pt';
		case 'Px':
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'px';
		default:
			var x = length.a;
			return $elm$core$String$fromFloat(x) + 'rem';
	}
};
var $elm_community$typed_svg$TypedSvg$Attributes$height = function (length) {
	return A2(
		$elm_community$typed_svg$TypedSvg$Core$attribute,
		'height',
		$elm_community$typed_svg$TypedSvg$TypesToStrings$lengthToString(length));
};
var $elm_community$typed_svg$TypedSvg$Types$Px = function (a) {
	return {$: 'Px', a: a};
};
var $elm_community$typed_svg$TypedSvg$Types$px = $elm_community$typed_svg$TypedSvg$Types$Px;
var $elm_community$typed_svg$TypedSvg$Attributes$InPx$height = function (value) {
	return $elm_community$typed_svg$TypedSvg$Attributes$height(
		$elm_community$typed_svg$TypedSvg$Types$px(value));
};
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$List$sortWith = _List_sortWith;
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $gampleman$elm_visualization$Shape$Pie$pie = F2(
	function (settings, data) {
		var unsafeGet = F2(
			function (index, array) {
				unsafeGet:
				while (true) {
					var _v0 = A2($elm$core$Array$get, index, array);
					if (_v0.$ === 'Just') {
						var v = _v0.a;
						return v;
					} else {
						var $temp$index = index,
							$temp$array = array;
						index = $temp$index;
						array = $temp$array;
						continue unsafeGet;
					}
				}
			});
		var summer = F2(
			function (a, b) {
				var v = settings.valueFn(a);
				return (v > 0) ? (v + b) : b;
			});
		var sum = A3($elm$core$List$foldr, summer, 0, data);
		var sortedIndices = A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$elm$core$List$map($elm$core$Tuple$first),
				$elm$core$List$sortWith(
					F2(
						function (_v2, _v3) {
							var a = _v2.b;
							var b = _v3.b;
							return A2(settings.sortingFn, a, b);
						}))),
			$elm$core$List$indexedMap($elm$core$Tuple$pair));
		var dataArray = $elm$core$Array$fromList(data);
		var da = A2(
			$elm$core$Basics$min,
			2 * $elm$core$Basics$pi,
			A2($elm$core$Basics$max, (-2) * $elm$core$Basics$pi, settings.endAngle - settings.startAngle));
		var p = A2(
			$elm$core$Basics$min,
			$elm$core$Basics$abs(da) / $elm$core$List$length(data),
			settings.padAngle);
		var pa = p * ((da < 0) ? (-1) : 1);
		var k = (!sum) ? 0 : ((da - ($elm$core$List$length(data) * pa)) / sum);
		var computeValue = F2(
			function (el, angle) {
				var value = settings.valueFn(el);
				return {
					cornerRadius: settings.cornerRadius,
					endAngle: (angle + ((value > 0) ? (value * k) : 0)) + pa,
					innerRadius: settings.innerRadius,
					outerRadius: settings.outerRadius,
					padAngle: p,
					padRadius: settings.padRadius,
					startAngle: angle
				};
			});
		var helper = F2(
			function (index, _v1) {
				var angle = _v1.a;
				var result = _v1.b;
				var r = A2(
					computeValue,
					A2(unsafeGet, index, dataArray),
					angle);
				return _Utils_Tuple2(
					r.endAngle,
					A3($elm$core$Dict$insert, index, r, result));
			});
		return $elm$core$Dict$values(
			A3(
				$elm$core$List$foldl,
				helper,
				_Utils_Tuple2(settings.startAngle, $elm$core$Dict$empty),
				sortedIndices(data)).b);
	});
var $gampleman$elm_visualization$Shape$pie = $gampleman$elm_visualization$Shape$Pie$pie;
var $elm_community$typed_svg$TypedSvg$Attributes$stroke = A2(
	$elm$core$Basics$composeL,
	$elm_community$typed_svg$TypedSvg$Core$attribute('stroke'),
	$elm_community$typed_svg$TypedSvg$TypesToStrings$paintToString);
var $elm_community$typed_svg$TypedSvg$svg = $elm_community$typed_svg$TypedSvg$Core$node('svg');
var $elm_community$typed_svg$TypedSvg$TypesToStrings$transformToString = function (xform) {
	var tr = F2(
		function (name, args) {
			return $elm$core$String$concat(
				_List_fromArray(
					[
						name,
						'(',
						A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, $elm$core$String$fromFloat, args)),
						')'
					]));
		});
	switch (xform.$) {
		case 'Matrix':
			var a = xform.a;
			var b = xform.b;
			var c = xform.c;
			var d = xform.d;
			var e = xform.e;
			var f = xform.f;
			return A2(
				tr,
				'matrix',
				_List_fromArray(
					[a, b, c, d, e, f]));
		case 'Rotate':
			var a = xform.a;
			var x = xform.b;
			var y = xform.c;
			return A2(
				tr,
				'rotate',
				_List_fromArray(
					[a, x, y]));
		case 'Scale':
			var x = xform.a;
			var y = xform.b;
			return A2(
				tr,
				'scale',
				_List_fromArray(
					[x, y]));
		case 'SkewX':
			var x = xform.a;
			return A2(
				tr,
				'skewX',
				_List_fromArray(
					[x]));
		case 'SkewY':
			var y = xform.a;
			return A2(
				tr,
				'skewY',
				_List_fromArray(
					[y]));
		default:
			var x = xform.a;
			var y = xform.b;
			return A2(
				tr,
				'translate',
				_List_fromArray(
					[x, y]));
	}
};
var $elm_community$typed_svg$TypedSvg$Attributes$transform = function (transforms) {
	return A2(
		$elm_community$typed_svg$TypedSvg$Core$attribute,
		'transform',
		A2(
			$elm$core$String$join,
			' ',
			A2($elm$core$List$map, $elm_community$typed_svg$TypedSvg$TypesToStrings$transformToString, transforms)));
};
var $elm_community$typed_svg$TypedSvg$Attributes$width = function (length) {
	return A2(
		$elm_community$typed_svg$TypedSvg$Core$attribute,
		'width',
		$elm_community$typed_svg$TypedSvg$TypesToStrings$lengthToString(length));
};
var $elm_community$typed_svg$TypedSvg$Attributes$InPx$width = function (value) {
	return $elm_community$typed_svg$TypedSvg$Attributes$width(
		$elm_community$typed_svg$TypedSvg$Types$px(value));
};
var $author$project$View$Chart$Donut$drawDoubleChart = F5(
	function (ui, outerConfig, outerModel, innerConfig, innerModel) {
		var outerRadius = outerConfig.outerRadius;
		var outerPieData = A2(
			$gampleman$elm_visualization$Shape$pie,
			_Utils_update(
				$gampleman$elm_visualization$Shape$defaultPieConfig,
				{
					cornerRadius: outerConfig.cornerRadius,
					innerRadius: outerConfig.innerRadius,
					outerRadius: outerConfig.outerRadius,
					padAngle: outerConfig.padAngle,
					sortingFn: F2(
						function (_v3, _v4) {
							return $elm$core$Basics$EQ;
						})
				}),
			A2($elm$core$List$map, $elm$core$Tuple$first, outerModel));
		var outerColorData = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$View$Chart$Donut$convertColor),
			outerModel);
		var outerZippedData = A3($elm$core$List$map2, $elm$core$Tuple$pair, outerColorData, outerPieData);
		var makeSlice = function (_v2) {
			var color = _v2.a;
			var datum = _v2.b;
			return A2(
				$folkertdev$one_true_path_experiment$Path$element,
				$gampleman$elm_visualization$Shape$arc(datum),
				_List_fromArray(
					[
						$elm_community$typed_svg$TypedSvg$Attributes$fill(
						$elm_community$typed_svg$TypedSvg$Types$Paint(color)),
						$elm_community$typed_svg$TypedSvg$Attributes$stroke(
						$elm_community$typed_svg$TypedSvg$Types$Paint(
							$author$project$View$Chart$Donut$convertColor(ui.theme.appBackground)))
					]));
		};
		var innerRadius = innerConfig.outerRadius;
		var innerPieData = A2(
			$gampleman$elm_visualization$Shape$pie,
			_Utils_update(
				$gampleman$elm_visualization$Shape$defaultPieConfig,
				{
					cornerRadius: innerConfig.cornerRadius,
					innerRadius: innerConfig.innerRadius,
					outerRadius: innerConfig.outerRadius,
					padAngle: innerConfig.padAngle,
					sortingFn: F2(
						function (_v0, _v1) {
							return $elm$core$Basics$EQ;
						})
				}),
			A2($elm$core$List$map, $elm$core$Tuple$first, innerModel));
		var innerColorData = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$View$Chart$Donut$convertColor),
			innerModel);
		var innerZippedData = A3($elm$core$List$map2, $elm$core$Tuple$pair, innerColorData, innerPieData);
		return A2(
			$elm_community$typed_svg$TypedSvg$svg,
			_List_fromArray(
				[
					$elm_community$typed_svg$TypedSvg$Attributes$InPx$width(outerRadius * 2),
					$elm_community$typed_svg$TypedSvg$Attributes$InPx$height(outerRadius * 2)
				]),
			_List_fromArray(
				[
					A2(
					$elm_community$typed_svg$TypedSvg$g,
					_List_fromArray(
						[
							$elm_community$typed_svg$TypedSvg$Attributes$transform(
							_List_fromArray(
								[
									A2($elm_community$typed_svg$TypedSvg$Types$Translate, outerRadius, outerRadius)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm_community$typed_svg$TypedSvg$g,
							_List_Nil,
							_Utils_ap(
								A2($elm$core$List$map, makeSlice, outerZippedData),
								A2($elm$core$List$map, makeSlice, innerZippedData)))
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $author$project$View$Chart$Donut$doubleDonutWithConfig = F5(
	function (ui, outerconfig, outerData, innerconfig, innerData) {
		return $mdgriffith$elm_ui$Element$html(
			A5($author$project$View$Chart$Donut$drawDoubleChart, ui, outerconfig, outerData, innerconfig, innerData));
	});
var $author$project$View$Chart$Donut$doubleTinyDonut = F3(
	function (ui, outerData, innerData) {
		var outerConfig = _Utils_update(
			$author$project$View$Chart$Donut$defaultConfig,
			{innerRadius: 16.0, outerRadius: 24.0});
		var innerConfig = _Utils_update(
			$author$project$View$Chart$Donut$defaultConfig,
			{innerRadius: 8.0, outerRadius: 16.0});
		return A5($author$project$View$Chart$Donut$doubleDonutWithConfig, ui, outerConfig, outerData, innerConfig, innerData);
	});
var $author$project$View$Theme$lightGreen = A3($mdgriffith$elm_ui$Element$rgb255, 138, 226, 52);
var $author$project$View$Theme$orange = A3($mdgriffith$elm_ui$Element$rgb255, 245, 121, 0);
var $author$project$View$PostRenderer$renderChallengeStatistics = F2(
	function (ui, stats) {
		var contestants = stats.acceptedCount;
		var total = stats.elapsedPeriodCount * contestants;
		var failure = stats.failureCount / total;
		var partial = stats.partialSuccessCount / total;
		var skipped = stats.skippedCount / total;
		var success = stats.successCount / total;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					A2($author$project$View$Style$relFontSize, ui, -2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					A3(
						$author$project$View$Chart$Donut$doubleTinyDonut,
						ui,
						_List_fromArray(
							[
								_Utils_Tuple2(skipped, $author$project$View$Theme$charcoal),
								_Utils_Tuple2(failure, $author$project$View$Theme$darkRed),
								_Utils_Tuple2(partial, $author$project$View$Theme$orange),
								_Utils_Tuple2(success, $author$project$View$Theme$lightGreen)
							]),
						_List_fromArray(
							[
								_Utils_Tuple2(stats.elapsedPeriodCount, $author$project$View$Theme$lightPurple),
								_Utils_Tuple2(stats.totalPeriodCount, $author$project$View$Theme$grey)
							]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$Style$bold(
						$elm$core$String$fromInt(contestants) + ' contestant(s)'))
				]));
	});
var $author$project$View$Style$empty = $mdgriffith$elm_ui$Element$none;
var $author$project$View$Style$verticalSeparator = F2(
	function (thickness, color) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$color(color),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 0, left: 0, right: thickness, top: 0})
						]),
					$author$project$View$Style$empty),
					A2($mdgriffith$elm_ui$Element$el, _List_Nil, $author$project$View$Style$empty)
				]));
	});
var $author$project$View$PostRenderer$renderChallengePost = F3(
	function (ui, cache, post) {
		var _v0 = post.content;
		if (_v0.$ === 'ChallengePost') {
			var id = _v0.a;
			var _v1 = A2($author$project$State$Cache$getChallenge, cache, id);
			if (_v1.$ === 'Just') {
				var challenge = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$none,
							A2(
								$elm$core$Maybe$map,
								$author$project$View$PostRenderer$renderChallengeStatistics(ui),
								A2($author$project$State$Cache$getChallengeStatistics, cache, id))),
							A2($author$project$View$Style$verticalSeparator, 1, ui.theme.background),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10),
									$mdgriffith$elm_ui$Element$alignTop,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$semiBold,
											A2($author$project$View$Style$relFontSize, ui, 0)
										]),
									A2($author$project$View$Style$quotedText, ui, challenge.title)),
									A2(
									$author$project$View$Style$postBodyStyle,
									ui,
									A2($author$project$View$Style$multiLineQuotedText, ui, challenge.content))
								]))
						]));
			} else {
				return A2(
					$author$project$View$Style$postBodyStyle,
					ui,
					$mdgriffith$elm_ui$Element$text(
						$author$project$Data$Challenge$toString(id)));
			}
		} else {
			return $author$project$View$ScreenUtils$neverElement;
		}
	});
var $author$project$State$Cache$isConversationOpened = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.opened;
				},
				A2(
					$elm$core$Dict$get,
					$author$project$Data$Post$toString(id),
					cache.conversations)));
	});
var $author$project$State$Cache$isConversationClosed = F2(
	function (cache, id) {
		return !A2($author$project$State$Cache$isConversationOpened, cache, id);
	});
var $author$project$State$Cache$getUserPseudo = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$map,
			function (x) {
				return x.pseudo;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$User$toString(id),
				cache.users));
	});
var $author$project$State$Cache$isFlagged = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.flagged;
				},
				A2(
					$elm$core$Dict$get,
					$author$project$Data$Conversation$toString(id),
					cache.flaggedMessages)));
	});
var $author$project$View$Style$postFooterStyle = F2(
	function (ui, e) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($author$project$View$Style$relFontSize, ui, 0),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			e);
	});
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$DateTime = function (a) {
	return {$: 'DateTime', a: a};
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Date = function (a) {
	return {$: 'Date', a: a};
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day = function (a) {
	return {$: 'Day', a: a};
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Year = function (a) {
	return {$: 'Year', a: a};
};
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromPosix = function (posix) {
	return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Date(
		{
			day: $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(
				A2($elm$time$Time$toDay, $elm$time$Time$utc, posix)),
			month: A2($elm$time$Time$toMonth, $elm$time$Time$utc, posix),
			year: $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Year(
				A2($elm$time$Time$toYear, $elm$time$Time$utc, posix))
		});
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Hour = function (a) {
	return {$: 'Hour', a: a};
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Millisecond = function (a) {
	return {$: 'Millisecond', a: a};
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Minute = function (a) {
	return {$: 'Minute', a: a};
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Second = function (a) {
	return {$: 'Second', a: a};
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Time = function (a) {
	return {$: 'Time', a: a};
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$fromPosix = function (posix) {
	return $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Time(
		{
			hours: $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Hour(
				A2($elm$time$Time$toHour, $elm$time$Time$utc, posix)),
			milliseconds: $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Millisecond(
				A2($elm$time$Time$toMillis, $elm$time$Time$utc, posix)),
			minutes: $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Minute(
				A2($elm$time$Time$toMinute, $elm$time$Time$utc, posix)),
			seconds: $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Second(
				A2($elm$time$Time$toSecond, $elm$time$Time$utc, posix))
		});
};
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$fromPosix = function (timePosix) {
	return $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$DateTime(
		{
			date: $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromPosix(timePosix),
			time: $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$fromPosix(timePosix)
		});
};
var $PanagiotisGeorgiadis$elm_datetime$DateTime$fromPosix = $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$fromPosix;
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getDate = function (_v0) {
	var date = _v0.a.date;
	return date;
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayToInt = function (_v0) {
	var day = _v0.a;
	return day;
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getDay = function (_v0) {
	var date = _v0.a;
	return date.day;
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$getDay = A2($elm$core$Basics$composeL, $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayToInt, $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getDay);
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getDay = A2($elm$core$Basics$composeL, $PanagiotisGeorgiadis$elm_datetime$Calendar$getDay, $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getDate);
var $PanagiotisGeorgiadis$elm_datetime$DateTime$getDay = $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getDay;
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getMonth = function (_v0) {
	var month = _v0.a.month;
	return month;
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$getMonth = $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getMonth;
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getMonth = A2($elm$core$Basics$composeL, $PanagiotisGeorgiadis$elm_datetime$Calendar$getMonth, $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getDate);
var $PanagiotisGeorgiadis$elm_datetime$DateTime$getMonth = $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getMonth;
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getYear = function (_v0) {
	var year = _v0.a.year;
	return year;
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$yearToInt = function (_v0) {
	var year = _v0.a;
	return year;
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$getYear = A2($elm$core$Basics$composeL, $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$yearToInt, $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getYear);
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getYear = A2($elm$core$Basics$composeL, $PanagiotisGeorgiadis$elm_datetime$Calendar$getYear, $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getDate);
var $PanagiotisGeorgiadis$elm_datetime$DateTime$getYear = $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$getYear;
var $author$project$Utils$DateUtils$formatDate = function (_v0) {
	var tmstp = _v0.a;
	var date = $PanagiotisGeorgiadis$elm_datetime$DateTime$fromPosix(
		$elm$time$Time$millisToPosix(tmstp));
	var day = $elm$core$String$fromInt(
		$PanagiotisGeorgiadis$elm_datetime$DateTime$getDay(date));
	var month = $elm$core$Debug$toString(
		$PanagiotisGeorgiadis$elm_datetime$DateTime$getMonth(date));
	var year = $elm$core$String$fromInt(
		$PanagiotisGeorgiadis$elm_datetime$DateTime$getYear(date));
	return '' + (day + (' ' + (month + (' ' + year))));
};
var $author$project$Utils$DateUtils$formatRelativeTo = F2(
	function (_v0, _v1) {
		var now = _v0.a;
		var tmstp = _v1.a;
		return ($elm$core$Basics$abs(now - tmstp) <= 60000) ? 'now' : ((_Utils_cmp(
			$elm$core$Basics$abs(now - tmstp),
			60 * 60000) < 1) ? ($elm$core$String$fromInt(
			$elm$core$Basics$abs(((now - tmstp) / 60000) | 0)) + ' min(s)') : ((_Utils_cmp(
			$elm$core$Basics$abs(now - tmstp),
			(24 * 60) * 60000) < 1) ? ($elm$core$String$fromInt(
			$elm$core$Basics$abs(((now - tmstp) / 3600000) | 0)) + ' hour(s)') : ((_Utils_cmp(
			$elm$core$Basics$abs(now - tmstp),
			((7 * 24) * 60) * 60000) < 1) ? ($elm$core$String$fromInt(
			$elm$core$Basics$abs(((now - tmstp) / (24 * 3600000)) | 0)) + ' day(s)') : $author$project$Utils$DateUtils$formatDate(
			$author$project$Data$Schedule$UTC(tmstp)))));
	});
var $author$project$View$PostRenderer$renderCommentDate = F2(
	function (reftime, timestamp) {
		return $mdgriffith$elm_ui$Element$text(
			A2($author$project$Utils$DateUtils$formatRelativeTo, reftime, timestamp));
	});
var $author$project$Update$Msg$FlagComment = function (a) {
	return {$: 'FlagComment', a: a};
};
var $author$project$Update$Msg$UnflagComment = function (a) {
	return {$: 'UnflagComment', a: a};
};
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$FlagOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M880 305H624V192c0-17.7-14.3-32-32-32H184v-40c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V640h248v113c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V337c0-17.7-14.3-32-32-32zM184 568V232h368v336H184zm656 145H504v-73h112c4.4 0 8-3.6 8-8V377h216v336z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$flagOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$FlagOutlined$viewWithAttributes;
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $lemol$ant_design_icons_elm_ui$Ant$Icon$defaultProps = {fill: $elm$core$Maybe$Nothing, height: $elm$core$Maybe$Nothing, rotate: $elm$core$Maybe$Nothing, spin: false, style: _List_Nil, twoToneColor: $elm$core$Maybe$Nothing, width: $elm$core$Maybe$Nothing};
var $lemol$ant_design_icons_elm_ui$Ant$Icon$fromAttributes = function () {
	var f = F2(
		function (act, acc) {
			switch (act.$) {
				case 'Spin':
					return _Utils_update(
						acc,
						{spin: true});
				case 'Rotate':
					var x = act.a;
					return _Utils_update(
						acc,
						{
							rotate: $elm$core$Maybe$Just(x)
						});
				case 'Width':
					var x = act.a;
					return _Utils_update(
						acc,
						{
							width: $elm$core$Maybe$Just(x)
						});
				case 'Height':
					var x = act.a;
					return _Utils_update(
						acc,
						{
							height: $elm$core$Maybe$Just(x)
						});
				case 'Fill':
					var x = act.a;
					return _Utils_update(
						acc,
						{
							fill: $elm$core$Maybe$Just(x)
						});
				case 'Style':
					var x = act.a;
					return _Utils_update(
						acc,
						{style: x});
				default:
					var x = act.a;
					return _Utils_update(
						acc,
						{
							twoToneColor: $elm$core$Maybe$Just(x)
						});
			}
		});
	return A2($elm$core$List$foldl, f, $lemol$ant_design_icons_elm_ui$Ant$Icon$defaultProps);
}();
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $lemol$ant_design_icons_elm_ui$Ant$Icon$iconBase = F3(
	function (theme, attrs, svgIcon) {
		var props = $lemol$ant_design_icons_elm_ui$Ant$Icon$fromAttributes(attrs);
		var rotate_ = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$rotate, props.rotate)));
		var spin_ = props.spin ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'animation', 'loadingCircle 1s infinite linear')
			]) : _List_Nil;
		var svgAttributes = _Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$width('1em'),
					$elm$svg$Svg$Attributes$height('1em'),
					$elm$svg$Svg$Attributes$fill('currentColor')
				]),
			spin_);
		var width_ = A2($elm$core$Maybe$withDefault, 1 * 14, props.width);
		var height_ = A2($elm$core$Maybe$withDefault, 1 * 14, props.width);
		var fill_ = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Font$color, props.fill)));
		var elAttributes = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(
					A2($elm$core$Basics$max, width_, height_))
				]),
			_Utils_ap(rotate_, fill_));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			elAttributes,
			$mdgriffith$elm_ui$Element$html(
				svgIcon(svgAttributes)));
	});
var $lemol$ant_design_icons_elm_ui$Ant$Icon$icon = $lemol$ant_design_icons_elm_ui$Ant$Icon$iconBase(
	{});
var $lemol$ant_design_icons_elm_ui$Ant$Icons$flagOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$flagOutlined);
};
var $lemol$ant_design_icons_elm_ui$Ant$Icon$Height = function (a) {
	return {$: 'Height', a: a};
};
var $lemol$ant_design_icons_elm_ui$Ant$Icon$height = $lemol$ant_design_icons_elm_ui$Ant$Icon$Height;
var $lemol$ant_design_icons_elm_ui$Ant$Icon$Width = function (a) {
	return {$: 'Width', a: a};
};
var $lemol$ant_design_icons_elm_ui$Ant$Icon$width = $lemol$ant_design_icons_elm_ui$Ant$Icon$Width;
var $author$project$View$Icons$toWidthHeight = function (_v0) {
	var w = _v0.a;
	var h = _v0.b;
	return _List_fromArray(
		[
			$lemol$ant_design_icons_elm_ui$Ant$Icon$width(w),
			$lemol$ant_design_icons_elm_ui$Ant$Icon$height(h)
		]);
};
var $author$project$View$Icons$flag = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$flagOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$FlagFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M880 305H624V192c0-17.7-14.3-32-32-32H184v-40c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V640h248v113c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V337c0-17.7-14.3-32-32-32z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$flagFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$FlagFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$flagFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$flagFilled);
};
var $author$project$View$Icons$flagged = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$flagFilled);
var $author$project$State$Cache$isFlaggedByUser = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.flaggedByUser;
				},
				A2(
					$elm$core$Dict$get,
					$author$project$Data$Conversation$toString(id),
					cache.flaggedMessages)));
	});
var $author$project$View$PostRenderer$renderFlagAction = F3(
	function (ui, cache, message) {
		var flaggedByUser = A2($author$project$State$Cache$isFlaggedByUser, cache, message.id);
		var icon = flaggedByUser ? $author$project$View$Icons$flagged : $author$project$View$Icons$flag;
		var col = flaggedByUser ? ui.theme.alertColor : ui.theme.background;
		var action = (flaggedByUser ? $author$project$Update$Msg$UnflagComment : $author$project$Update$Msg$FlagComment)(message.id);
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(0)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(col)
						]),
					icon(ui.tiny)),
				onPress: $elm$core$Maybe$Just(action)
			});
	});
var $author$project$View$PostRenderer$renderFlagWarning = F2(
	function (ui, flagged) {
		return flagged ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$darkRed)
				]),
			A2(
				$author$project$View$Style$postFooterStyle,
				ui,
				$mdgriffith$elm_ui$Element$text('*** This message has been reported ***'))) : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$View$Style$rightGap = F2(
	function (sp, x) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: sp, top: 0})
				]),
			x);
	});
var $author$project$View$PostRenderer$renderConversationMessage = F5(
	function (ui, tmstp, cache, _v0, message) {
		var pseudo = A2(
			$elm$core$Maybe$withDefault,
			'<unknown>',
			A2($author$project$State$Cache$getUserPseudo, cache, message.author));
		var flagged = A2($author$project$State$Cache$isFlagged, cache, message.id);
		var contentStyle = flagged ? A2(
			$elm$core$Basics$composeR,
			$author$project$View$Style$postBodyStyle(ui),
			$mdgriffith$elm_ui$Element$el(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(ui.theme.flaggedForeground),
						$mdgriffith$elm_ui$Element$Font$italic
					]))) : $author$project$View$Style$postBodyStyle(ui);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$spacing(1)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$View$Style$postBodyStyle,
							ui,
							A3(
								$author$project$View$Style$userStyle,
								ui,
								pseudo,
								$elm$core$Maybe$Just(message.author))),
							A2(
							$author$project$View$Style$rightGap,
							5,
							A2(
								$author$project$View$Style$postFooterStyle,
								ui,
								A2($author$project$View$PostRenderer$renderCommentDate, tmstp, message.timestamp))),
							A2(
							$author$project$View$Style$rightGap,
							20,
							A3($author$project$View$PostRenderer$renderFlagAction, ui, cache, message)),
							A2($author$project$View$PostRenderer$renderFlagWarning, ui, flagged)
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 15, right: 0, top: 0})
						]),
					contentStyle(
						A2($author$project$View$Style$multiLineQuotedText, ui, message.content)))
				]));
	});
var $author$project$Update$Msg$PostNewComment = F2(
	function (a, b) {
		return {$: 'PostNewComment', a: a, b: b};
	});
var $author$project$Update$Msg$UpdateNewPostComment = F2(
	function (a, b) {
		return {$: 'UpdateNewPostComment', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Bottom);
var $author$project$State$Cache$getComment = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.comment;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Post$toString(id),
				cache.conversations));
	});
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: $elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var $author$project$Utils$TextUtils$isEmpty = A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$isEmpty);
var $author$project$Utils$TextUtils$nonEmpty = A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Utils$TextUtils$isEmpty);
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $author$project$View$Style$placeholderStyle = F2(
	function (ui, txt) {
		return $elm$core$Maybe$Just(
			A2(
				$mdgriffith$elm_ui$Element$Input$placeholder,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$italic,
						$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldPlaceHolder)
					]),
				$mdgriffith$elm_ui$Element$text(txt)));
	});
var $author$project$View$PostRenderer$renderMessageInput = F3(
	function (ui, cache, postId) {
		var currentComment = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($author$project$State$Cache$getComment, cache, postId));
		var valid = $author$project$Utils$TextUtils$nonEmpty(currentComment);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$multiline,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							A2($author$project$View$Style$relFontSize, ui, 1),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.textFieldBackground)
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('hidden comment'),
						onChange: function (txt) {
							return A2($author$project$Update$Msg$UpdateNewPostComment, postId, txt);
						},
						placeholder: A2($author$project$View$Style$placeholderStyle, ui, 'Enter a comment ...'),
						spellcheck: true,
						text: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($author$project$State$Cache$getComment, cache, postId))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$alignBottom,
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background)
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('Post'),
						onPress: valid ? $elm$core$Maybe$Just(
							A2(
								$author$project$Update$Msg$PostNewComment,
								postId,
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2($author$project$State$Cache$getComment, cache, postId)))) : $elm$core$Maybe$Nothing
					})
				]));
	});
var $author$project$Update$Msg$LoadMoreComment = F2(
	function (a, b) {
		return {$: 'LoadMoreComment', a: a, b: b};
	});
var $author$project$View$Style$horizontalSeparator = F2(
	function (thickness, color) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$color(color),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: thickness, left: 0, right: 0, top: 0})
						]),
					$author$project$View$Style$empty),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$author$project$View$Style$empty)
				]));
	});
var $author$project$Data$Conversation$pageSize = 10;
var $author$project$View$PostRenderer$renderMoreMessageSeparator = F3(
	function (ui, cache, postId) {
		var messagesCacheSize = $elm$core$List$length(
			A2($author$project$State$Cache$getConversationMessages, cache, postId));
		var nextPage = ((messagesCacheSize / $author$project$Data$Conversation$pageSize) | 0) + 1;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$Border$width(0),
							A2($author$project$View$Style$relFontSize, ui, 0),
							$mdgriffith$elm_ui$Element$padding(5)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground)
								]),
							$mdgriffith$elm_ui$Element$text('More ...')),
						onPress: $elm$core$Maybe$Just(
							A2(
								$author$project$Update$Msg$LoadMoreComment,
								postId,
								$author$project$Data$Page$Page(nextPage)))
					}),
					A2($author$project$View$Style$horizontalSeparator, 1, ui.theme.background)
				]));
	});
var $author$project$View$PostRenderer$renderOpenedConversation = F4(
	function (ui, tmstp, cache, postId) {
		var messages = A2($author$project$State$Cache$getConversationMessages, cache, postId);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(7),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 10, right: 0, top: 0})
				]),
			_Utils_ap(
				_List_fromArray(
					[
						A3($author$project$View$PostRenderer$renderMessageInput, ui, cache, postId)
					]),
				_Utils_ap(
					A2(
						$elm$core$List$map,
						A4($author$project$View$PostRenderer$renderConversationMessage, ui, tmstp, cache, postId),
						messages),
					_List_fromArray(
						[
							A3($author$project$View$PostRenderer$renderMoreMessageSeparator, ui, cache, postId)
						]))));
	});
var $author$project$View$PostRenderer$renderConversation = F4(
	function (ui, tmstp, cache, postId) {
		var closed = A2($author$project$State$Cache$isConversationClosed, cache, postId);
		return closed ? $mdgriffith$elm_ui$Element$none : A4($author$project$View$PostRenderer$renderOpenedConversation, ui, tmstp, cache, postId);
	});
var $author$project$State$Cache$getEvent = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.event;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Event$toString(id),
				cache.events));
	});
var $author$project$State$Cache$getEventParticipantCount = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.participants;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Event$toString(id),
				cache.events));
	});
var $author$project$View$Theme$blue = A3($mdgriffith$elm_ui$Element$rgb255, 52, 101, 164);
var $author$project$Data$Location$formatAddress = function (address) {
	if (address.$ === 'Address') {
		var street = address.a;
		var zipCode = address.b;
		var name = address.c.a;
		return A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$filter,
				A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not),
				_List_fromArray(
					[
						A2($elm$core$Maybe$withDefault, '', street),
						A2(
						$elm$core$Maybe$withDefault,
						'',
						A2(
							$elm$core$Maybe$map,
							function (_v1) {
								var zc = _v1.a;
								return zc;
							},
							zipCode)),
						name
					])));
	} else {
		return '<Invalid address>';
	}
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Data$Location$toMapUrl = F2(
	function (zoom, loc) {
		switch (loc.$) {
			case 'MapUrl':
				var url = loc.a;
				return url;
			case 'GeoLocation':
				var lat = loc.a.a;
				var _long = loc.b.a;
				return $author$project$Data$Url$Url(
					'https://www.openstreetmap.org/?mlat=' + ($elm$core$String$fromFloat(lat) + ('&mlon=' + ($elm$core$String$fromFloat(_long) + ('#map=' + ($elm$core$String$fromInt(zoom) + ('/' + ($elm$core$String$fromFloat(lat) + ('/' + $elm$core$String$fromFloat(_long))))))))));
			default:
				return $author$project$Data$Url$Url('https://www.openstreetmap.org');
		}
	});
var $author$project$View$PostRenderer$renderLocation = F2(
	function (ui, loc) {
		switch (loc.$) {
			case 'Online':
				var url = loc.a.a;
				return A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(ui.theme.linkForeground)
								]),
							$mdgriffith$elm_ui$Element$text('online')),
						url: url
					});
			case 'MapUrl':
				var url = loc.a.a;
				return A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(ui.theme.linkForeground)
								]),
							$mdgriffith$elm_ui$Element$text('See on maps')),
						url: url
					});
			case 'GeoLocation':
				var geo = loc;
				var _v1 = A2($author$project$Data$Location$toMapUrl, 17, geo);
				var url = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(ui.theme.linkForeground)
								]),
							$mdgriffith$elm_ui$Element$text('See on maps')),
						url: url
					});
			default:
				var address = loc;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$blue),
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					$mdgriffith$elm_ui$Element$text(
						$author$project$Data$Location$formatAddress(address)));
		}
	});
var $author$project$Data$Schedule$day = function (_v0) {
	var ms = _v0.a;
	return A2(
		$elm$time$Time$toDay,
		$elm$time$Time$utc,
		$elm$time$Time$millisToPosix(ms));
};
var $author$project$Utils$TextUtils$format2Digits = function (n) {
	return _Utils_ap(
		((n >= 0) && (n <= 9)) ? '0' : '',
		$elm$core$String$fromInt(n));
};
var $author$project$Data$Schedule$month = function (_v0) {
	var ms = _v0.a;
	var _v1 = A2(
		$elm$time$Time$toMonth,
		$elm$time$Time$utc,
		$elm$time$Time$millisToPosix(ms));
	switch (_v1.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $author$project$Data$Schedule$weekDay = function (_v0) {
	var ms = _v0.a;
	var _v1 = A2(
		$elm$time$Time$toWeekday,
		$elm$time$Time$utc,
		$elm$time$Time$millisToPosix(ms));
	switch (_v1.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $author$project$Data$Schedule$year = function (_v0) {
	var ms = _v0.a;
	return A2(
		$elm$time$Time$toYear,
		$elm$time$Time$utc,
		$elm$time$Time$millisToPosix(ms));
};
var $author$project$View$PostRenderer$renderNextDate = F2(
	function (ui, schedule) {
		var timestamp = $author$project$Data$Schedule$start(schedule);
		var weekday = $mdgriffith$elm_ui$Element$text(
			$author$project$Data$Schedule$weekDay(timestamp));
		var year = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			$mdgriffith$elm_ui$Element$text(
				$author$project$Utils$TextUtils$format4Digits(
					$author$project$Data$Schedule$year(timestamp))));
		var month = $mdgriffith$elm_ui$Element$text(
			$author$project$Data$Schedule$month(timestamp));
		var day = $mdgriffith$elm_ui$Element$text(
			$author$project$Utils$TextUtils$format2Digits(
				$author$project$Data$Schedule$day(timestamp)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$Border$rounded(3)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerY,
							A2($author$project$View$Style$relFontSize, ui, 2),
							$mdgriffith$elm_ui$Element$Font$semiBold,
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$padding(2),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					year),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							A2($author$project$View$Style$relFontSize, ui, 0),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 3, left: 3, right: 3, top: 0})
						]),
					weekday),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.background),
							A2($author$project$View$Style$relFontSize, ui, 4),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 3, left: 3, right: 3, top: 0})
						]),
					day),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							A2($author$project$View$Style$relFontSize, ui, 0),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 3, left: 3, right: 3, top: 0})
						]),
					month)
				]));
	});
var $author$project$View$PostRenderer$renderEventPost = F3(
	function (ui, cache, post) {
		var _v0 = post.content;
		if (_v0.$ === 'EventPost') {
			var id = _v0.a;
			var _v1 = A2($author$project$State$Cache$getEvent, cache, id);
			if (_v1.$ === 'Just') {
				var event = _v1.a;
				var openSlots = A2(
					$elm$core$Maybe$map,
					function (n) {
						return event.maxParticipants - n;
					},
					A2($author$project$State$Cache$getEventParticipantCount, cache, id));
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2($author$project$View$PostRenderer$renderNextDate, ui, event.schedule),
							A2($author$project$View$Style$verticalSeparator, 1, ui.theme.background),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignLeft,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(3)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$alignTop
										]),
									A2(
										$author$project$View$Style$postBodyStyle,
										ui,
										A2($author$project$View$Style$multiLineQuotedText, ui, event.description))),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignLeft,
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A3(
											$author$project$View$Style$relSize,
											ui,
											0,
											$author$project$View$Style$bold('When:')),
											A3(
											$author$project$View$Style$relSize,
											ui,
											0,
											$mdgriffith$elm_ui$Element$text(
												$author$project$Utils$DateUtils$formatDate(
													$author$project$Data$Schedule$start(event.schedule))))
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignLeft,
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A3(
											$author$project$View$Style$relSize,
											ui,
											0,
											$author$project$View$Style$bold('Where:')),
											A2($author$project$View$PostRenderer$renderLocation, ui, event.location)
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignLeft,
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A3(
											$author$project$View$Style$relSize,
											ui,
											0,
											$author$project$View$Style$bold('Max participants:')),
											A3(
											$author$project$View$Style$relSize,
											ui,
											0,
											$mdgriffith$elm_ui$Element$text(
												$elm$core$String$fromInt(event.maxParticipants)))
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignLeft,
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A3(
											$author$project$View$Style$relSize,
											ui,
											0,
											$author$project$View$Style$bold('Remaining slots:')),
											A3(
											$author$project$View$Style$relSize,
											ui,
											0,
											$mdgriffith$elm_ui$Element$text(
												A2(
													$elm$core$Maybe$withDefault,
													'-',
													A2($elm$core$Maybe$map, $elm$core$String$fromInt, openSlots))))
										]))
								]))
						]));
			} else {
				return A2(
					$author$project$View$Style$postBodyStyle,
					ui,
					$mdgriffith$elm_ui$Element$text(
						$author$project$Data$Event$toString(id)));
			}
		} else {
			return $author$project$View$ScreenUtils$neverElement;
		}
	});
var $author$project$Update$Msg$ClosePostConversation = function (a) {
	return {$: 'ClosePostConversation', a: a};
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$MessageFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M924.3 338.4a447.57 447.57 0 00-96.1-143.3 443.09 443.09 0 00-143-96.3A443.91 443.91 0 00512 64h-2c-60.5.3-119 12.3-174.1 35.9a444.08 444.08 0 00-141.7 96.5 445 445 0 00-95 142.8A449.89 449.89 0 0065 514.1c.3 69.4 16.9 138.3 47.9 199.9v152c0 25.4 20.6 46 45.9 46h151.8a447.72 447.72 0 00199.5 48h2.1c59.8 0 117.7-11.6 172.3-34.3A443.2 443.2 0 00827 830.5c41.2-40.9 73.6-88.7 96.3-142 23.5-55.2 35.5-113.9 35.8-174.5.2-60.9-11.6-120-34.8-175.6zM312.4 560c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.4 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$messageFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$MessageFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$messageFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$messageFilled);
};
var $author$project$View$Icons$closeConversation = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$messageFilled);
var $author$project$View$Style$closeConversationButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
				]),
			{
				label: $author$project$View$Icons$closeConversation(ui.tiny),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$ClosePostConversation(id))
			});
	});
var $author$project$State$Cache$containsLike = F2(
	function (cache, postId) {
		return A2(
			$elm$core$Set$member,
			$author$project$Data$Post$toString(postId),
			cache.liked);
	});
var $author$project$State$Cache$containsPinned = F2(
	function (cache, postId) {
		return A2(
			$elm$core$Set$member,
			$author$project$Data$Post$toString(postId),
			cache.pinned);
	});
var $author$project$State$Cache$getConversationSize = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.messageCount;
				},
				A2(
					$elm$core$Dict$get,
					$author$project$Data$Post$toString(id),
					cache.conversations)));
	});
var $author$project$State$Cache$getLikeCount = F2(
	function (cache, postId) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Post$toString(postId),
				cache.likeCount));
	});
var $author$project$View$Style$invert = function (ui) {
	return $mdgriffith$elm_ui$Element$el(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(ui.theme.foreground),
				$mdgriffith$elm_ui$Element$Font$color(ui.theme.background)
			]));
};
var $author$project$Update$Msg$LikePost = function (a) {
	return {$: 'LikePost', a: a};
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$HeartOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M923 283.6a260.04 260.04 0 00-56.9-82.8 264.4 264.4 0 00-84-55.5A265.34 265.34 0 00679.7 125c-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 00-56.9 82.8c-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3.1-35.3-7-69.6-20.9-101.9zM512 814.8S156 586.7 156 385.5C156 283.6 240.3 201 344.3 201c73.1 0 136.5 40.8 167.7 100.4C543.2 241.8 606.6 201 679.7 201c104 0 188.3 82.6 188.3 184.5 0 201.2-356 429.3-356 429.3z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$heartOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$HeartOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$heartOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$heartOutlined);
};
var $author$project$View$Icons$unlike = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$heartOutlined);
var $author$project$View$Style$likeButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
				]),
			{
				label: $author$project$View$Icons$unlike(ui.tiny),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$LikePost(id))
			});
	});
var $author$project$Update$Msg$OpenPostConversation = function (a) {
	return {$: 'OpenPostConversation', a: a};
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$MessageOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M464 512a48 48 0 1096 0 48 48 0 10-96 0zm200 0a48 48 0 1096 0 48 48 0 10-96 0zm-400 0a48 48 0 1096 0 48 48 0 10-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 00-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 00-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 00112 714v152a46 46 0 0046 46h152.1A449.4 449.4 0 00510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 00142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$messageOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$MessageOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$messageOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$messageOutlined);
};
var $author$project$View$Icons$openConversation = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$messageOutlined);
var $author$project$View$Style$openConversationButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
				]),
			{
				label: $author$project$View$Icons$openConversation(ui.tiny),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$OpenPostConversation(id))
			});
	});
var $author$project$Update$Msg$PinPost = function (a) {
	return {$: 'PinPost', a: a};
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$PushpinOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M878.3 392.1L631.9 145.7c-6.5-6.5-15-9.7-23.5-9.7s-17 3.2-23.5 9.7L423.8 306.9c-12.2-1.4-24.5-2-36.8-2-73.2 0-146.4 24.1-206.5 72.3a33.23 33.23 0 00-2.7 49.4l181.7 181.7-215.4 215.2a15.8 15.8 0 00-4.6 9.8l-3.4 37.2c-.9 9.4 6.6 17.4 15.9 17.4.5 0 1 0 1.5-.1l37.2-3.4c3.7-.3 7.2-2 9.8-4.6l215.4-215.4 181.7 181.7c6.5 6.5 15 9.7 23.5 9.7 9.7 0 19.3-4.2 25.9-12.4 56.3-70.3 79.7-158.3 70.2-243.4l161.1-161.1c12.9-12.8 12.9-33.8 0-46.8zM666.2 549.3l-24.5 24.5 3.8 34.4a259.92 259.92 0 01-30.4 153.9L262 408.8c12.9-7.1 26.3-13.1 40.3-17.9 27.2-9.4 55.7-14.1 84.7-14.1 9.6 0 19.3.5 28.9 1.6l34.4 3.8 24.5-24.5L608.5 224 800 415.5 666.2 549.3z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$pushpinOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$PushpinOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$pushpinOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$pushpinOutlined);
};
var $author$project$View$Icons$unpinned = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$pushpinOutlined);
var $author$project$View$Style$pinButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
				]),
			{
				label: $author$project$View$Icons$unpinned(ui.tiny),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$PinPost(id))
			});
	});
var $author$project$Update$Msg$Repost = function (a) {
	return {$: 'Repost', a: a};
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$ShareAltOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M752 664c-28.5 0-54.8 10-75.4 26.7L469.4 540.8a160.68 160.68 0 000-57.6l207.2-149.9C697.2 350 723.5 360 752 360c66.2 0 120-53.8 120-120s-53.8-120-120-120-120 53.8-120 120c0 11.6 1.6 22.7 4.7 33.3L439.9 415.8C410.7 377.1 364.3 352 312 352c-88.4 0-160 71.6-160 160s71.6 160 160 160c52.3 0 98.7-25.1 127.9-63.8l196.8 142.5c-3.1 10.6-4.7 21.8-4.7 33.3 0 66.2 53.8 120 120 120s120-53.8 120-120-53.8-120-120-120zm0-476c28.7 0 52 23.3 52 52s-23.3 52-52 52-52-23.3-52-52 23.3-52 52-52zM312 600c-48.5 0-88-39.5-88-88s39.5-88 88-88 88 39.5 88 88-39.5 88-88 88zm440 236c-28.7 0-52-23.3-52-52s23.3-52 52-52 52 23.3 52 52-23.3 52-52 52z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$shareAltOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$ShareAltOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$shareAltOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$shareAltOutlined);
};
var $author$project$View$Icons$repost = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$shareAltOutlined);
var $author$project$View$Style$repostButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
				]),
			{
				label: $author$project$View$Icons$repost(ui.tiny),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$Repost(id))
			});
	});
var $author$project$Update$Msg$UnlikePost = function (a) {
	return {$: 'UnlikePost', a: a};
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$HeartFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M923 283.6a260.04 260.04 0 00-56.9-82.8 264.4 264.4 0 00-84-55.5A265.34 265.34 0 00679.7 125c-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 00-56.9 82.8c-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3.1-35.3-7-69.6-20.9-101.9z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$heartFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$HeartFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$heartFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$heartFilled);
};
var $author$project$View$Icons$like = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$heartFilled);
var $author$project$View$Style$unlikeButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
				]),
			{
				label: $author$project$View$Icons$like(ui.tiny),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$UnlikePost(id))
			});
	});
var $author$project$Update$Msg$UnpinPost = function (a) {
	return {$: 'UnpinPost', a: a};
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$PushpinFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M878.3 392.1L631.9 145.7c-6.5-6.5-15-9.7-23.5-9.7s-17 3.2-23.5 9.7L423.8 306.9c-12.2-1.4-24.5-2-36.8-2-73.2 0-146.4 24.1-206.5 72.3-15.4 12.3-16.6 35.4-2.7 49.4l181.7 181.7-215.4 215.2a15.8 15.8 0 00-4.6 9.8l-3.4 37.2c-.9 9.4 6.6 17.4 15.9 17.4.5 0 1 0 1.5-.1l37.2-3.4c3.7-.3 7.2-2 9.8-4.6l215.4-215.4 181.7 181.7c6.5 6.5 15 9.7 23.5 9.7 9.7 0 19.3-4.2 25.9-12.4 56.3-70.3 79.7-158.3 70.2-243.4l161.1-161.1c12.9-12.8 12.9-33.8 0-46.8z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$pushpinFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$PushpinFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$pushpinFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$pushpinFilled);
};
var $author$project$View$Icons$pinned = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$pushpinFilled);
var $author$project$View$Style$unpinButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
				]),
			{
				label: $author$project$View$Icons$pinned(ui.tiny),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$UnpinPost(id))
			});
	});
var $author$project$View$PostRenderer$renderFooter = F3(
	function (ui, cache, post) {
		var openedConversation = A2($author$project$State$Cache$isConversationOpened, cache, post.id);
		var likes = A2($author$project$State$Cache$getLikeCount, cache, post.id);
		var isPinned = A2($author$project$State$Cache$containsPinned, cache, post.id);
		var hasLiked = A2($author$project$State$Cache$containsLike, cache, post.id);
		var comments = A2($author$project$State$Cache$getConversationSize, cache, post.id);
		return A2(
			$author$project$View$Style$postFooterStyle,
			ui,
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(5),
							$mdgriffith$elm_ui$Element$alignLeft
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							A2(
								$author$project$View$Style$invert,
								ui,
								(isPinned ? $author$project$View$Style$unpinButtonStyle(ui) : $author$project$View$Style$pinButtonStyle(ui))(post.id))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$italic,
									A2($author$project$View$Style$relFontSize, ui, -2)
								]),
							A2(
								$author$project$View$Style$invert,
								ui,
								A2($author$project$View$Style$repostButtonStyle, ui, post.id))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							A2(
								$author$project$View$Style$invert,
								ui,
								(hasLiked ? $author$project$View$Style$unlikeButtonStyle(ui) : $author$project$View$Style$likeButtonStyle(ui))(post.id))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$italic,
									A2($author$project$View$Style$relFontSize, ui, -2)
								]),
							$mdgriffith$elm_ui$Element$text(
								'x' + $elm$core$String$fromInt(likes))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							A2(
								$author$project$View$Style$invert,
								ui,
								(openedConversation ? $author$project$View$Style$closeConversationButtonStyle(ui) : $author$project$View$Style$openConversationButtonStyle(ui))(post.id))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$italic,
									A2($author$project$View$Style$relFontSize, ui, -2)
								]),
							$mdgriffith$elm_ui$Element$text(
								'x ' + $elm$core$String$fromInt(comments)))
						]))));
	});
var $author$project$View$PostRenderer$renderFreeTextPost = F3(
	function (ui, cache, post) {
		var _v0 = post.content;
		if (_v0.$ === 'FreeTextPost') {
			var content = _v0.a;
			var sources = _v0.b;
			return A2(
				$author$project$View$Style$postBodyStyle,
				ui,
				A2($author$project$View$Style$multiLineQuotedText, ui, content));
		} else {
			return $author$project$View$ScreenUtils$neverElement;
		}
	});
var $author$project$State$Cache$containsFollowingUser = F2(
	function (cache, user) {
		return A2(
			$elm$core$Set$member,
			$author$project$Data$User$toString(user),
			cache.followingUsers);
	});
var $author$project$Update$Msg$FollowUser = function (a) {
	return {$: 'FollowUser', a: a};
};
var $author$project$View$Style$followButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(4)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Follow'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$FollowUser(id))
			});
	});
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$RiseOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M917 211.1l-199.2 24c-6.6.8-9.4 8.9-4.7 13.6l59.3 59.3-226 226-101.8-101.7c-6.3-6.3-16.4-6.2-22.6 0L100.3 754.1a8.03 8.03 0 000 11.3l45 45.2c3.1 3.1 8.2 3.1 11.3 0L433.3 534 535 635.7c6.3 6.2 16.4 6.2 22.6 0L829 364.5l59.3 59.3a8.01 8.01 0 0013.6-4.7l24-199.2c.7-5.1-3.7-9.5-8.9-8.8z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$riseOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$RiseOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$riseOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$riseOutlined);
};
var $author$project$View$Icons$challenge = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$riseOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$CalendarOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$calendarOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$CalendarOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$calendarOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$calendarOutlined);
};
var $author$project$View$Icons$event = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$calendarOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$PieChartOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M864 518H506V160c0-4.4-3.6-8-8-8h-26a398.46 398.46 0 00-282.8 117.1 398.19 398.19 0 00-85.7 127.1A397.61 397.61 0 0072 552a398.46 398.46 0 00117.1 282.8c36.7 36.7 79.5 65.6 127.1 85.7A397.61 397.61 0 00472 952a398.46 398.46 0 00282.8-117.1c36.7-36.7 65.6-79.5 85.7-127.1A397.61 397.61 0 00872 552v-26c0-4.4-3.6-8-8-8zM705.7 787.8A331.59 331.59 0 01470.4 884c-88.1-.4-170.9-34.9-233.2-97.2C174.5 724.1 140 640.7 140 552c0-88.7 34.5-172.1 97.2-234.8 54.6-54.6 124.9-87.9 200.8-95.5V586h364.3c-7.7 76.3-41.3 147-96.6 201.8zM952 462.4l-2.6-28.2c-8.5-92.1-49.4-179-115.2-244.6A399.4 399.4 0 00589 74.6L560.7 72c-4.7-.4-8.7 3.2-8.7 7.9V464c0 4.4 3.6 8 8 8l384-1c4.7 0 8.4-4 8-8.6zm-332.2-58.2V147.6a332.24 332.24 0 01166.4 89.8c45.7 45.6 77 103.6 90 166.1l-256.4.7z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$pieChartOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$PieChartOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$pieChartOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$pieChartOutlined);
};
var $author$project$View$Icons$poll = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$pieChartOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$UserOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M858.5 763.6a374 374 0 00-80.6-119.5 375.63 375.63 0 00-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 00-80.6 119.5A371.7 371.7 0 00136 901.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 008-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$userOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$UserOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$userOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$userOutlined);
};
var $author$project$View$Icons$post = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$userOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$BulbFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M348 676.1C250 619.4 184 513.4 184 392c0-181.1 146.9-328 328-328s328 146.9 328 328c0 121.4-66 227.4-164 284.1V792c0 17.7-14.3 32-32 32H380c-17.7 0-32-14.3-32-32V676.1zM392 888h240c4.4 0 8 3.6 8 8v32c0 17.7-14.3 32-32 32H416c-17.7 0-32-14.3-32-32v-32c0-4.4 3.6-8 8-8z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$bulbFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$BulbFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$bulbFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$bulbFilled);
};
var $author$project$View$Icons$tip = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$bulbFilled);
var $author$project$View$PostRenderer$postLogo = F2(
	function (ui, post) {
		var render = $mdgriffith$elm_ui$Element$el(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(20)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(20)),
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY
				]));
		var center = A2(
			$elm$core$Basics$composeR,
			$mdgriffith$elm_ui$Element$el(
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])),
			render);
		var _v0 = post.content;
		switch (_v0.$) {
			case 'RePost':
				return center(
					$author$project$View$Icons$repost(ui.tiny));
			case 'EventPost':
				return center(
					$author$project$View$Icons$event(ui.tiny));
			case 'ChallengePost':
				return center(
					$author$project$View$Icons$challenge(ui.tiny));
			case 'TipPost':
				return center(
					$author$project$View$Icons$tip(ui.tiny));
			case 'PollPost':
				return center(
					$author$project$View$Icons$poll(ui.tiny));
			default:
				return center(
					$author$project$View$Icons$post(ui.tiny));
		}
	});
var $author$project$View$Style$headerDateStyle = function (ui) {
	return $mdgriffith$elm_ui$Element$el(
		_List_fromArray(
			[
				A2($author$project$View$Style$relFontSize, ui, -2)
			]));
};
var $author$project$View$PostRenderer$renderDate = F3(
	function (ui, reftime, timestamp) {
		return A2(
			$author$project$View$Style$headerDateStyle,
			ui,
			$mdgriffith$elm_ui$Element$text(
				A2($author$project$Utils$DateUtils$formatRelativeTo, reftime, timestamp)));
	});
var $author$project$State$Cache$getUser = F2(
	function (cache, id) {
		return A2(
			$elm$core$Dict$get,
			$author$project$Data$User$toString(id),
			cache.users);
	});
var $author$project$View$Style$userPseudoStyle = F2(
	function (pseudo, userId) {
		var page = A2(
			$elm$core$Maybe$withDefault,
			$author$project$State$AppState$PseudoPage(pseudo),
			A2($elm$core$Maybe$map, $author$project$State$AppState$UserPage, userId));
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic, $mdgriffith$elm_ui$Element$Font$semiBold]),
			{
				label: $mdgriffith$elm_ui$Element$text('@' + pseudo),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$DisplayPage(page))
			});
	});
var $author$project$View$PostRenderer$renderUser = F2(
	function (cache, userId) {
		var _v0 = A2($author$project$State$Cache$getUser, cache, userId);
		if (_v0.$ === 'Just') {
			var user = _v0.a;
			return A2(
				$author$project$View$Style$userPseudoStyle,
				user.pseudo,
				$elm$core$Maybe$Just(user.id));
		} else {
			return $mdgriffith$elm_ui$Element$text(
				$author$project$Data$User$toString(userId));
		}
	});
var $author$project$Update$Msg$CancelEventParticipation = function (a) {
	return {$: 'CancelEventParticipation', a: a};
};
var $author$project$State$AppState$ChallengeDetailsPage = function (a) {
	return {$: 'ChallengeDetailsPage', a: a};
};
var $author$project$Update$Msg$RequestEventParticipation = function (a) {
	return {$: 'RequestEventParticipation', a: a};
};
var $author$project$View$Style$buttonBarStyle = F2(
	function (attrs, buttons) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			attrs,
			A2(
				$elm$core$List$intersperse,
				A2(
					$mdgriffith$elm_ui$Element$el,
					attrs,
					$mdgriffith$elm_ui$Element$text('|')),
				A2(
					$elm$core$List$map,
					function (_v0) {
						var txt = _v0.a;
						var action = _v0.b;
						return A2(
							$mdgriffith$elm_ui$Element$Input$button,
							attrs,
							{
								label: $mdgriffith$elm_ui$Element$text(txt),
								onPress: $elm$core$Maybe$Just(action)
							});
					},
					buttons)));
	});
var $author$project$State$Cache$getChallengeOutcomeStatus = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.outcomeStatus;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Challenge$toString(id),
				cache.challenges));
	});
var $author$project$State$Cache$getEventCancelledStatus = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.cancelled;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Event$toString(id),
				cache.events));
	});
var $author$project$State$Cache$getEventParticipationRequestStatus = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.requested;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Event$toString(id),
				cache.events));
	});
var $author$project$State$Cache$getEventParticipationStatus = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.participating;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Event$toString(id),
				cache.events));
	});
var $author$project$State$Cache$getPartner = F2(
	function (cache, id) {
		return A2(
			$elm$core$Dict$get,
			$author$project$Data$Partner$toString(id),
			cache.partners);
	});
var $author$project$View$Style$postButtonBarStyle = F2(
	function (ui, _v0) {
		var txt = _v0.a;
		var action = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, -1),
					$mdgriffith$elm_ui$Element$Font$semiBold
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(txt),
				onPress: $elm$core$Maybe$Just(action)
			});
	});
var $author$project$View$PostRenderer$withVerticalSeparator = F3(
	function (w, col, xs) {
		return A2(
			$elm$core$List$intersperse,
			A2($author$project$View$Style$verticalSeparator, w, col),
			A2(
				$elm$core$List$filter,
				function (el) {
					return !_Utils_eq(el, $mdgriffith$elm_ui$Element$none);
				},
				xs));
	});
var $author$project$View$PostRenderer$specialPostActions = F3(
	function (ui, cache, post) {
		var partnerUserId = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.userId;
			},
			A2(
				$elm$core$Maybe$andThen,
				$author$project$State$Cache$getPartner(cache),
				A2($author$project$State$Cache$partnerForPost, cache, post.id)));
		var partnerAction = A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$none,
			A2(
				$elm$core$Maybe$map,
				function (userId) {
					return A2(
						$author$project$View$Style$buttonBarStyle,
						_List_fromArray(
							[
								A2($author$project$View$Style$relFontSize, ui, -1),
								$mdgriffith$elm_ui$Element$Font$semiBold
							]),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'View Partner',
								$author$project$Update$Msg$DisplayPage(
									$author$project$State$AppState$UserPage(userId)))
							]));
				},
				partnerUserId));
		var _v0 = post.content;
		switch (_v0.$) {
			case 'ChallengePost':
				var id = _v0.a;
				var challengeText = function () {
					var _v1 = A2($author$project$State$Cache$getChallengeOutcomeStatus, cache, id);
					_v1$3:
					while (true) {
						if (_v1.$ === 'Just') {
							switch (_v1.a.$) {
								case 'OnTracks':
									var _v2 = _v1.a;
									return 'Report';
								case 'NotYetTaken':
									var _v3 = _v1.a;
									return 'Take challenge';
								case 'Failed':
									var _v4 = _v1.a;
									return 'Failed';
								default:
									break _v1$3;
							}
						} else {
							break _v1$3;
						}
					}
					return 'View challenge';
				}();
				var actionButtons = A2(
					$elm$core$List$map,
					$author$project$View$Style$postButtonBarStyle(ui),
					_List_fromArray(
						[
							_Utils_Tuple2(
							challengeText,
							$author$project$Update$Msg$DisplayPage(
								$author$project$State$AppState$ChallengeDetailsPage(id)))
						]));
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$spacing(3)
						]),
					A3(
						$author$project$View$PostRenderer$withVerticalSeparator,
						1,
						ui.theme.background,
						_Utils_ap(
							actionButtons,
							_List_fromArray(
								[partnerAction]))));
			case 'EventPost':
				var id = _v0.a;
				var viewAction = _Utils_Tuple2(
					'View event',
					$author$project$Update$Msg$DisplayPage(
						$author$project$State$AppState$EventDetailsPage(id)));
				var actions = function () {
					var _v5 = _Utils_Tuple3(
						A2($author$project$State$Cache$getEventCancelledStatus, cache, id),
						A2($author$project$State$Cache$getEventParticipationRequestStatus, cache, id),
						A2($author$project$State$Cache$getEventParticipationStatus, cache, id));
					_v5$0:
					while (true) {
						_v5$1:
						while (true) {
							_v5$3:
							while (true) {
								if (_v5.b.$ === 'Just') {
									if (_v5.c.$ === 'Just') {
										if (_v5.c.a) {
											if ((_v5.a.$ === 'Just') && _v5.a.a) {
												break _v5$0;
											} else {
												break _v5$1;
											}
										} else {
											if (_v5.b.a) {
												if ((_v5.a.$ === 'Just') && _v5.a.a) {
													break _v5$0;
												} else {
													return _List_fromArray(
														[
															_Utils_Tuple2(
															'Cancel participation request',
															$author$project$Update$Msg$CancelEventParticipation(id)),
															viewAction
														]);
												}
											} else {
												if ((_v5.a.$ === 'Just') && _v5.a.a) {
													break _v5$0;
												} else {
													break _v5$3;
												}
											}
										}
									} else {
										if ((_v5.a.$ === 'Just') && _v5.a.a) {
											break _v5$0;
										} else {
											if (!_v5.b.a) {
												break _v5$3;
											} else {
												return _List_fromArray(
													[viewAction]);
											}
										}
									}
								} else {
									if ((_v5.a.$ === 'Just') && _v5.a.a) {
										break _v5$0;
									} else {
										if ((_v5.c.$ === 'Just') && _v5.c.a) {
											break _v5$1;
										} else {
											var _v6 = _v5.b;
											return _List_fromArray(
												[
													_Utils_Tuple2(
													'Request participation',
													$author$project$Update$Msg$RequestEventParticipation(id)),
													viewAction
												]);
										}
									}
								}
							}
							return _List_fromArray(
								[
									_Utils_Tuple2(
									'Request participation',
									$author$project$Update$Msg$RequestEventParticipation(id)),
									viewAction
								]);
						}
						return _List_fromArray(
							[
								_Utils_Tuple2(
								'Cancel participation',
								$author$project$Update$Msg$CancelEventParticipation(id)),
								viewAction
							]);
					}
					return _List_fromArray(
						[
							_Utils_Tuple2('Event has been cancelled', $author$project$Update$Msg$NoOp)
						]);
				}();
				var actionButtons = A2(
					$elm$core$List$map,
					$author$project$View$Style$postButtonBarStyle(ui),
					actions);
				return A2(
					$mdgriffith$elm_ui$Element$wrappedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$spacing(3)
						]),
					A3(
						$author$project$View$PostRenderer$withVerticalSeparator,
						1,
						ui.theme.background,
						_Utils_ap(
							actionButtons,
							_List_fromArray(
								[partnerAction]))));
			default:
				return partnerAction;
		}
	});
var $author$project$View$Style$standard = function (ui) {
	return $mdgriffith$elm_ui$Element$el(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
				$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground)
			]));
};
var $author$project$Update$Msg$UnfollowUser = function (a) {
	return {$: 'UnfollowUser', a: a};
};
var $author$project$View$Style$unfollowButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(4)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Unfollow'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$UnfollowUser(id))
			});
	});
var $author$project$View$PostRenderer$renderHeader = F4(
	function (ui, tmstp, cache, post) {
		var isFollowing = A2($author$project$State$Cache$containsFollowingUser, cache, post.author);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 2, left: 0, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 2, left: 0, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$Border$color(ui.theme.background)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft]),
					A2(
						$author$project$View$Style$standard,
						ui,
						A2($author$project$View$PostRenderer$postLogo, ui, post))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft]),
					A3(
						$author$project$View$Style$relSize,
						ui,
						0,
						A2($author$project$View$PostRenderer$renderUser, cache, post.author))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft]),
					(isFollowing ? $author$project$View$Style$unfollowButtonStyle(ui) : $author$project$View$Style$followButtonStyle(ui))(post.author)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft]),
					A3($author$project$View$PostRenderer$renderDate, ui, tmstp, post.created)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 10, right: 0, top: 0})
						]),
					A3($author$project$View$PostRenderer$specialPostActions, ui, cache, post))
				]));
	});
var $author$project$State$Cache$getPollAnswered = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.answered;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Poll$toString(id),
				cache.polls));
	});
var $author$project$Utils$ListUtils$nth = function (n) {
	return A2(
		$elm$core$Basics$composeL,
		$elm$core$List$head,
		$elm$core$List$drop(n));
};
var $author$project$View$Chart$ColorScheme$colorAt = F2(
	function (n, scheme) {
		return A2(
			$elm$core$Maybe$withDefault,
			scheme._default,
			A2($author$project$Utils$ListUtils$nth, n, scheme.colors));
	});
var $author$project$View$Chart$ColorScheme$size = function (scheme) {
	return $elm$core$List$length(scheme.colors);
};
var $author$project$View$Chart$ColorScheme$cycledColorAt = F2(
	function (n, scheme) {
		return A2(
			$author$project$View$Chart$ColorScheme$colorAt,
			A2(
				$elm$core$Basics$modBy,
				$author$project$View$Chart$ColorScheme$size(scheme),
				n),
			scheme);
	});
var $author$project$Data$Poll$emptyPollStats = function (poll) {
	return $author$project$Data$Poll$PollStats(
		A2(
			$elm$core$List$map,
			function (x) {
				return {count: 0, option: x};
			},
			poll.options));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$CheckSquareFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM695.5 365.7l-210.6 292a31.8 31.8 0 01-51.7 0L308.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H689c6.5 0 10.3 7.4 6.5 12.7z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$checkSquareFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$CheckSquareFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$checkSquareFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$checkSquareFilled);
};
var $author$project$View$Icons$square = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$checkSquareFilled);
var $author$project$View$Chart$ChartUtils$legendEntry = F3(
	function (ui, attrs, _v0) {
		var label = _v0.a;
		var color = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignLeft]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$color(color),
							$mdgriffith$elm_ui$Element$padding(1)
						]),
					$author$project$View$Icons$square(ui.tiny)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					attrs,
					$mdgriffith$elm_ui$Element$text(label))
				]));
	});
var $author$project$View$Chart$ChartUtils$legend = F3(
	function (ui, attrs, entries) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A2(
				$elm$core$List$map,
				A2($author$project$View$Chart$ChartUtils$legendEntry, ui, attrs),
				entries));
	});
var $author$project$Data$Poll$normalizePollStats = F2(
	function (poll, _v0) {
		var stats = _v0.a;
		var containOption = F2(
			function (xs, opt) {
				return A3(
					$elm$core$Basics$composeL,
					$elm$core$Basics$not,
					$elm$core$List$isEmpty,
					A2(
						$elm$core$List$filter,
						function (x) {
							return _Utils_eq(x.option, opt);
						},
						xs));
			});
		var _v1 = $author$project$Data$Poll$emptyPollStats(poll);
		var empty = _v1.a;
		var notProvided = A2(
			$elm$core$List$filter,
			function (entry) {
				return !A2(containOption, stats, entry.option);
			},
			empty);
		return $author$project$Data$Poll$PollStats(
			_Utils_ap(stats, notProvided));
	});
var $author$project$Data$Poll$optionAsString = function (_v0) {
	var str = _v0.a;
	return str;
};
var $author$project$View$Theme$lightBrown = A3($mdgriffith$elm_ui$Element$rgb255, 233, 185, 110);
var $author$project$View$Theme$purple = A3($mdgriffith$elm_ui$Element$rgb255, 117, 80, 123);
var $author$project$View$Theme$yellow = A3($mdgriffith$elm_ui$Element$rgb255, 237, 212, 0);
var $author$project$View$Chart$ColorScheme$pollPieChartScheme = {
	colors: _List_fromArray(
		[$author$project$View$Theme$darkOrange, $author$project$View$Theme$lightGreen, $author$project$View$Theme$charcoal, $author$project$View$Theme$darkRed, $author$project$View$Theme$lightBlue, $author$project$View$Theme$yellow, $author$project$View$Theme$lightPurple, $author$project$View$Theme$lightBrown]),
	_default: $author$project$View$Theme$purple
};
var $author$project$Data$Poll$respondents = function (_v0) {
	var stats = _v0.a;
	return A3(
		$elm$core$List$foldl,
		F2(
			function (x, y) {
				return x.count + y;
			}),
		0,
		stats);
};
var $author$project$View$Chart$Donut$drawChart = F3(
	function (ui, config, model) {
		var radius = config.outerRadius;
		var pieData = A2(
			$gampleman$elm_visualization$Shape$pie,
			_Utils_update(
				$gampleman$elm_visualization$Shape$defaultPieConfig,
				{
					cornerRadius: config.cornerRadius,
					innerRadius: config.innerRadius,
					outerRadius: config.outerRadius,
					padAngle: config.padAngle,
					sortingFn: F2(
						function (_v1, _v2) {
							return $elm$core$Basics$EQ;
						})
				}),
			A2($elm$core$List$map, $elm$core$Tuple$first, model));
		var makeSlice = function (_v0) {
			var color = _v0.a;
			var datum = _v0.b;
			return A2(
				$folkertdev$one_true_path_experiment$Path$element,
				$gampleman$elm_visualization$Shape$arc(datum),
				_List_fromArray(
					[
						$elm_community$typed_svg$TypedSvg$Attributes$fill(
						$elm_community$typed_svg$TypedSvg$Types$Paint(color)),
						$elm_community$typed_svg$TypedSvg$Attributes$stroke(
						$elm_community$typed_svg$TypedSvg$Types$Paint(
							$author$project$View$Chart$Donut$convertColor(ui.theme.background)))
					]));
		};
		var colorData = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$View$Chart$Donut$convertColor),
			model);
		var zippedData = A3($elm$core$List$map2, $elm$core$Tuple$pair, colorData, pieData);
		return A2(
			$elm_community$typed_svg$TypedSvg$svg,
			_List_fromArray(
				[
					$elm_community$typed_svg$TypedSvg$Attributes$InPx$width(radius * 2),
					$elm_community$typed_svg$TypedSvg$Attributes$InPx$height(radius * 2)
				]),
			_List_fromArray(
				[
					A2(
					$elm_community$typed_svg$TypedSvg$g,
					_List_fromArray(
						[
							$elm_community$typed_svg$TypedSvg$Attributes$transform(
							_List_fromArray(
								[
									A2($elm_community$typed_svg$TypedSvg$Types$Translate, radius, radius)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm_community$typed_svg$TypedSvg$g,
							_List_Nil,
							A2($elm$core$List$map, makeSlice, zippedData))
						]))
				]));
	});
var $author$project$View$Chart$Donut$donutWithConfig = F3(
	function (ui, config, data) {
		return $mdgriffith$elm_ui$Element$html(
			A3($author$project$View$Chart$Donut$drawChart, ui, config, data));
	});
var $author$project$View$Chart$Donut$smallPieChart = F2(
	function (ui, data) {
		var config = _Utils_update(
			$author$project$View$Chart$Donut$defaultConfig,
			{innerRadius: 5.0, outerRadius: 32.0});
		return A3($author$project$View$Chart$Donut$donutWithConfig, ui, config, data);
	});
var $author$project$View$PostRenderer$renderAnsweredPoll = F3(
	function (ui, cache, poll) {
		var pollScheme = $author$project$View$Chart$ColorScheme$pollPieChartScheme;
		var _v0 = A2(
			$author$project$Data$Poll$normalizePollStats,
			poll,
			A2(
				$elm$core$Maybe$withDefault,
				$author$project$Data$Poll$emptyPollStats(poll),
				A2($author$project$State$Cache$getPollStats, cache, poll.id)));
		var stats = _v0.a;
		var legendData = A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, entry) {
					return _Utils_Tuple2(
						$author$project$Data$Poll$optionAsString(entry.option),
						A2($author$project$View$Chart$ColorScheme$cycledColorAt, index, pollScheme));
				}),
			stats);
		var respondentCount = $author$project$Data$Poll$respondents(
			$author$project$Data$Poll$PollStats(stats));
		var sum = respondentCount;
		var donutData = A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, entry) {
					return _Utils_Tuple2(
						(100.0 * entry.count) / sum,
						A2($author$project$View$Chart$ColorScheme$cycledColorAt, index, pollScheme));
				}),
			stats);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$author$project$View$Style$postBodyStyle,
					ui,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$bold]),
						A2($author$project$View$Style$multiLineQuotedText, ui, poll.title))),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: 0, left: 0, right: 5, top: 0}),
									$mdgriffith$elm_ui$Element$spacing(5),
									A2($author$project$View$Style$relFontSize, ui, -2)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
									A2($author$project$View$Chart$Donut$smallPieChart, ui, donutData)),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignRight]),
									$author$project$View$Style$bold(
										$elm$core$String$fromInt(respondentCount) + ' respondent(s)'))
								])),
							A2($author$project$View$Style$verticalSeparator, 1, ui.theme.background),
							A3(
							$author$project$View$Chart$ChartUtils$legend,
							ui,
							_List_fromArray(
								[
									A2($author$project$View$Style$relFontSize, ui, 1)
								]),
							legendData)
						]))
				]));
	});
var $author$project$Update$Msg$AnswerPoll = F2(
	function (a, b) {
		return {$: 'AnswerPoll', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 'Label', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$labelAbove = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$Above);
var $mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 'Option', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$defaultRadioOption = F2(
	function (optionLabel, status) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$Border$rounded(7),
							function () {
							if (status.$ === 'Selected') {
								return $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
							} else {
								return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
							}
						}(),
							$mdgriffith$elm_ui$Element$Border$width(
							function () {
								switch (status.$) {
									case 'Idle':
										return 1;
									case 'Focused':
										return 1;
									default:
										return 5;
								}
							}()),
							$mdgriffith$elm_ui$Element$Border$color(
							function () {
								switch (status.$) {
									case 'Idle':
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									case 'Focused':
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									default:
										return A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255);
								}
							}())
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Internal$Model$htmlClass('unfocusable')
						]),
					optionLabel)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$option = F2(
	function (val, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$Option,
			val,
			$mdgriffith$elm_ui$Element$Input$defaultRadioOption(txt));
	});
var $mdgriffith$elm_ui$Element$Input$Column = {$: 'Column'};
var $mdgriffith$elm_ui$Element$Input$AfterFound = {$: 'AfterFound'};
var $mdgriffith$elm_ui$Element$Input$BeforeFound = {$: 'BeforeFound'};
var $mdgriffith$elm_ui$Element$Input$Idle = {$: 'Idle'};
var $mdgriffith$elm_ui$Element$Input$NotFound = {$: 'NotFound'};
var $mdgriffith$elm_ui$Element$Input$Selected = {$: 'Selected'};
var $mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					attributes)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var $mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var found = _v0.a;
				var has = _v0.b;
				switch (x.$) {
					case 'NoAttribute':
						return _Utils_Tuple2(found, has);
					case 'Class':
						var key = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Attr':
						var attr = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'StyleClass':
						var style = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Width':
						var width = x.a;
						return A2($elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'width', has));
					case 'Height':
						var height = x.a;
						return A2($elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'height', has));
					case 'Describe':
						var description = x.a;
						return A2($elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'described', has));
					case 'Nearby':
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'AlignX':
						return A2($elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-x', has));
					case 'AlignY':
						return A2($elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-y', has));
					default:
						return A2($elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Set$empty),
		attrs).a;
};
var $mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2($elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			$mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var $mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var $mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var $mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				attributes),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var $mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _v14) {
				var found = _v14.a;
				var prev = _v14.b;
				var nxt = _v14.c;
				var val = opt.a;
				switch (found.$) {
					case 'NotFound':
						return _Utils_eq(
							$elm$core$Maybe$Just(val),
							input.selected) ? _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$BeforeFound, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 'BeforeFound':
						return _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$AfterFound, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_v11) {
			var val = _v11.a;
			var view = _v11.b;
			var status = _Utils_eq(
				$elm$core$Maybe$Just(val),
				input.selected) ? $mdgriffith$elm_ui$Element$Input$Selected : $mdgriffith$elm_ui$Element$Input$Idle;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$pointer,
						function () {
						if (orientation.$ === 'Row') {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink);
						} else {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
						}
					}(),
						$mdgriffith$elm_ui$Element$Events$onClick(
						input.onChange(val)),
						function () {
						if (status.$ === 'Selected') {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _v5 = input.options;
			if (!_v5.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v6 = _v5.a;
				var val = _v6.a;
				return function (_v7) {
					var found = _v7.a;
					var b = _v7.b;
					var a = _v7.c;
					switch (found.$) {
						case 'NotFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 'BeforeFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						$elm$core$List$foldl,
						track,
						_Utils_Tuple3($mdgriffith$elm_ui$Element$Input$NotFound, val, val),
						input.options));
			}
		}();
		var optionArea = function () {
			if (orientation.$ === 'Row') {
				return A2(
					$mdgriffith$elm_ui$Element$Input$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$column,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			}
		}();
		var events = A2(
			$mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_v3$3:
				while (true) {
					switch (attr.$) {
						case 'Width':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Height':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Attr':
							return true;
						default:
							break _v3$3;
					}
				}
				return false;
			});
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$alignLeft),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Element$Input$tabindex(0)),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$Region$announce),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 'Nothing') {
								return $elm$core$Maybe$Nothing;
							} else {
								var _v1 = prevNext.a;
								var prev = _v1.a;
								var next = _v1.b;
								return $elm$core$Maybe$Just(
									$mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return $elm$core$Maybe$Just(
													input.onChange(prev));
											} else {
												if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$upArrow)) {
													return $elm$core$Maybe$Just(
														input.onChange(prev));
												} else {
													if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return $elm$core$Maybe$Just(
															input.onChange(next));
													} else {
														if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$downArrow)) {
															return $elm$core$Maybe$Just(
																input.onChange(next));
														} else {
															if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space)) {
																var _v2 = input.selected;
																if (_v2.$ === 'Nothing') {
																	return $elm$core$Maybe$Just(
																		input.onChange(prev));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															} else {
																return $elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.label,
			optionArea);
	});
var $mdgriffith$elm_ui$Element$Input$radio = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Column);
var $author$project$View$PostRenderer$renderUnansweredPoll = F3(
	function (ui, cache, poll) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelAbove,
					_List_Nil,
					A2(
						$author$project$View$Style$postBodyStyle,
						ui,
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							A2($author$project$View$Style$multiLineQuotedText, ui, poll.title)))),
				onChange: $author$project$Update$Msg$AnswerPoll(poll.id),
				options: A2(
					$elm$core$List$map,
					function (_v0) {
						var opt = _v0.a;
						return A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Data$Poll$PollOption(opt),
							A2(
								$author$project$View$Style$postBodyStyle,
								ui,
								A2($author$project$View$Style$multiLineQuotedText, ui, opt)));
					},
					poll.options),
				selected: $elm$core$Maybe$Nothing
			});
	});
var $author$project$View$PostRenderer$renderPollPost = F3(
	function (ui, cache, post) {
		var _v0 = post.content;
		if (_v0.$ === 'PollPost') {
			var id = _v0.a;
			var _v1 = _Utils_Tuple2(
				A2($author$project$State$Cache$getPoll, cache, id),
				A2($author$project$State$Cache$getPollAnswered, cache, id));
			if (_v1.a.$ === 'Just') {
				if ((_v1.b.$ === 'Just') && _v1.b.a) {
					var poll = _v1.a.a;
					return A3($author$project$View$PostRenderer$renderAnsweredPoll, ui, cache, poll);
				} else {
					var poll = _v1.a.a;
					return A3($author$project$View$PostRenderer$renderUnansweredPoll, ui, cache, poll);
				}
			} else {
				var _v2 = _v1.a;
				return A2(
					$author$project$View$Style$postBodyStyle,
					ui,
					$mdgriffith$elm_ui$Element$text(
						$author$project$Data$Poll$toString(id)));
			}
		} else {
			return $author$project$View$ScreenUtils$neverElement;
		}
	});
var $author$project$State$Cache$getTip = F2(
	function (cache, id) {
		return A2(
			$elm$core$Dict$get,
			$author$project$Data$Tip$toString(id),
			cache.tips);
	});
var $author$project$View$PostRenderer$renderTipPost = F3(
	function (ui, cache, post) {
		var _v0 = post.content;
		if (_v0.$ === 'TipPost') {
			var id = _v0.a;
			var _v1 = A2($author$project$State$Cache$getTip, cache, id);
			if (_v1.$ === 'Just') {
				var tip = _v1.a;
				return A2(
					$author$project$View$Style$postBodyStyle,
					ui,
					A2($author$project$View$Style$multiLineQuotedText, ui, tip.content));
			} else {
				return A2(
					$author$project$View$Style$postBodyStyle,
					ui,
					$mdgriffith$elm_ui$Element$text(
						$author$project$Data$Tip$toString(id)));
			}
		} else {
			return $author$project$View$ScreenUtils$neverElement;
		}
	});
var $author$project$View$PostRenderer$renderPost = F4(
	function (ui, tmstp, cache, post) {
		var reposted = $author$project$View$PostRenderer$isRepost(post);
		return A4(
			$author$project$View$PartnershipStyle$postDecoration,
			ui,
			cache,
			post.id,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignLeft,
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$padding(10)
					]),
				_List_fromArray(
					[
						A4($author$project$View$PostRenderer$renderHeader, ui, tmstp, cache, post),
						A4($author$project$View$PostRenderer$renderPostContent, ui, tmstp, cache, post),
						(!reposted) ? A3($author$project$View$PostRenderer$renderFooter, ui, cache, post) : $mdgriffith$elm_ui$Element$none,
						A4($author$project$View$PostRenderer$renderConversation, ui, tmstp, cache, post.id)
					])));
	});
var $author$project$View$PostRenderer$renderPostContent = F4(
	function (ui, tmstp, cache, post) {
		var _v1 = post.content;
		switch (_v1.$) {
			case 'RePost':
				return A4($author$project$View$PostRenderer$renderRepostPost, ui, tmstp, cache, post);
			case 'EventPost':
				return A3($author$project$View$PostRenderer$renderEventPost, ui, cache, post);
			case 'ChallengePost':
				return A3($author$project$View$PostRenderer$renderChallengePost, ui, cache, post);
			case 'TipPost':
				return A3($author$project$View$PostRenderer$renderTipPost, ui, cache, post);
			case 'PollPost':
				return A3($author$project$View$PostRenderer$renderPollPost, ui, cache, post);
			default:
				return A3($author$project$View$PostRenderer$renderFreeTextPost, ui, cache, post);
		}
	});
var $author$project$View$PostRenderer$renderPostId = F4(
	function (ui, tmstp, cache, postId) {
		return A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$text(
				'<Unable to render post ' + ($author$project$Data$Post$toString(postId) + '>')),
			A2(
				$elm$core$Maybe$map,
				A3($author$project$View$PostRenderer$renderPost, ui, tmstp, cache),
				A2($author$project$State$Cache$getPost, cache, postId)));
	});
var $author$project$View$PostRenderer$renderRepostPost = F4(
	function (ui, tmstp, cache, post) {
		var _v0 = post.content;
		if (_v0.$ === 'RePost') {
			var id = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 5, left: 20, right: 0, top: 5})
					]),
				A4($author$project$View$PostRenderer$renderPostId, ui, tmstp, cache, id));
		} else {
			return $author$project$View$ScreenUtils$neverElement;
		}
	});
var $author$project$View$ChallengeScreen$renderSinglePost = $author$project$View$PostRenderer$renderPostId;
var $author$project$View$ChallengeScreen$renderPostPage = F2(
	function (state, page) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$View$ChallengeScreen$renderSinglePost, state.uiStyle, state.timestamp, state.cache),
				page.items));
	});
var $author$project$View$ChallengeScreen$renderChallengeTabContent = function (state) {
	var _v0 = $author$project$State$ChallengeState$allUpToCurrentPage(state.challenge);
	if (_v0.$ === 'Nothing') {
		return $author$project$View$ChallengeScreen$renderLoadingPosts(state.uiStyle);
	} else {
		var posts = _v0.a;
		return ($author$project$State$GenericPage$isEmpty(posts) && $author$project$Data$Page$isFirst(posts.number)) ? $author$project$View$ChallengeScreen$renderNoPostPage(state.uiStyle) : A5(
			$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
			state.uiStyle,
			$author$project$View$UIStyle$isMobile(state.device),
			'challenge',
			$author$project$Update$Msg$ChangeChallengePage(
				$author$project$Data$Page$next(state.challenge.currentPage)),
			A2($author$project$View$ChallengeScreen$renderPostPage, state, posts));
	}
};
var $author$project$View$ChallengeScreen$challengeScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$padding(5)
			]),
		_List_fromArray(
			[
				$author$project$View$ChallengeScreen$challengeTabs(state),
				$author$project$View$ChallengeScreen$renderChallengeTabContent(state)
			]));
};
var $author$project$View$AppView$displayChallenge = $author$project$View$ChallengeScreen$challengeScreen;
var $author$project$View$ChallengeDetailsView$isChallengeAccepted = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (x) {
					return _Utils_eq(x, $author$project$Data$Challenge$Accepted) || _Utils_eq(x, $author$project$Data$Challenge$OnTracks);
				},
				A2($author$project$State$Cache$getChallengeOutcomeStatus, cache, id)));
	});
var $author$project$View$Style$italic = function (txt) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[$mdgriffith$elm_ui$Element$Font$italic]),
		$mdgriffith$elm_ui$Element$text(txt));
};
var $author$project$View$Theme$lightGrey = A3($mdgriffith$elm_ui$Element$rgb255, 238, 238, 236);
var $author$project$View$Chart$Donut$smallDonut = F2(
	function (ui, data) {
		var config = _Utils_update(
			$author$project$View$Chart$Donut$defaultConfig,
			{innerRadius: 24.0, outerRadius: 32.0});
		return A3($author$project$View$Chart$Donut$donutWithConfig, ui, config, data);
	});
var $author$project$View$ChallengeDetailsView$renderChallengeStatisticsDonut = F2(
	function (ui, stats) {
		var contestants = stats.acceptedCount;
		var total = stats.elapsedPeriodCount * contestants;
		var failure = stats.failureCount / total;
		var partial = stats.partialSuccessCount / total;
		var skipped = stats.skippedCount / total;
		var success = stats.successCount / total;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			A2(
				$author$project$View$Chart$Donut$smallDonut,
				ui,
				_List_fromArray(
					[
						_Utils_Tuple2(skipped, $author$project$View$Theme$lightGrey),
						_Utils_Tuple2(failure, $author$project$View$Theme$darkRed),
						_Utils_Tuple2(partial, $author$project$View$Theme$darkOrange),
						_Utils_Tuple2(success, $author$project$View$Theme$lightGreen)
					])));
	});
var $author$project$View$Chart$ChartUtils$rightLegendPanel = F4(
	function (ui, attrs, entries, comp) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					comp,
					A3($author$project$View$Chart$ChartUtils$legend, ui, attrs, entries)
				]));
	});
var $author$project$View$ChallengeDetailsView$renderChallengeStatistics = F3(
	function (ui, measure, maybeStats) {
		if (maybeStats.$ === 'Nothing') {
			return $author$project$View$Style$italic('Not available');
		} else {
			var stats = maybeStats.a;
			var totalReport = ((stats.successCount + stats.failureCount) + stats.skippedCount) + stats.partialSuccessCount;
			var successRate = (!stats.elapsedPeriodCount) ? 100 : ((!totalReport) ? 0 : (((stats.successCount + (0.5 * stats.partialSuccessCount)) / totalReport) * 100.0));
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				_List_fromArray(
					[
						A4(
						$author$project$View$Chart$ChartUtils$rightLegendPanel,
						ui,
						_List_fromArray(
							[
								A2($author$project$View$Style$relFontSize, ui, 0)
							]),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'Skipped: ' + $elm$core$String$fromInt(stats.skippedCount),
								$author$project$View$Theme$lightGrey),
								_Utils_Tuple2(
								'Failed: ' + $elm$core$String$fromInt(stats.failureCount),
								$author$project$View$Theme$darkRed),
								_Utils_Tuple2(
								'Partial: ' + $elm$core$String$fromInt(stats.partialSuccessCount),
								$author$project$View$Theme$darkOrange),
								_Utils_Tuple2(
								'Success: ' + $elm$core$String$fromInt(stats.successCount),
								$author$project$View$Theme$lightGreen)
							]),
						A2($author$project$View$ChallengeDetailsView$renderChallengeStatisticsDonut, ui, stats)),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								A2($author$project$View$Style$relFontSize, ui, 0),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								'- There is currently ' + ($elm$core$String$fromInt(stats.acceptedCount) + ' contestant(s).')),
								$mdgriffith$elm_ui$Element$text(
								'- ' + ($elm$core$String$fromInt(stats.rejectedCount) + ' have rejected this challenge.')),
								$mdgriffith$elm_ui$Element$text(
								'- ' + ($elm$core$String$fromInt(stats.elapsedPeriodCount) + (' report period(s) have passed. ' + ($elm$core$String$fromInt(stats.totalPeriodCount - stats.elapsedPeriodCount) + ' remaining.')))),
								$mdgriffith$elm_ui$Element$text(
								'- At the moment, success rate is ' + ($elm$core$String$fromFloat(successRate) + '%.'))
							]))
					]));
		}
	});
var $author$project$Data$Schedule$before = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		return _Utils_cmp(a, b) < 0;
	});
var $author$project$View$ChallengeDetailsView$cutoffReportDate = F2(
	function (_v0, dates) {
		cutoffReportDate:
		while (true) {
			var now = _v0.a;
			if (!dates.b) {
				return $author$project$Data$Schedule$UTC(now);
			} else {
				if (!dates.b.b) {
					var x = dates.a.a;
					return (_Utils_cmp(now, x) < 0) ? $author$project$Data$Schedule$UTC(now) : $author$project$Data$Schedule$UTC(x);
				} else {
					var x = dates.a.a;
					var _v2 = dates.b;
					var y = _v2.a.a;
					var xs = _v2.b;
					if ((_Utils_cmp(now, x) > -1) && (_Utils_cmp(now, y) < 0)) {
						return $author$project$Data$Schedule$UTC(x);
					} else {
						var $temp$_v0 = $author$project$Data$Schedule$UTC(now),
							$temp$dates = A2(
							$elm$core$List$cons,
							$author$project$Data$Schedule$UTC(y),
							xs);
						_v0 = $temp$_v0;
						dates = $temp$dates;
						continue cutoffReportDate;
					}
				}
			}
		}
	});
var $author$project$Update$Msg$ReportChallengeStepStatus = F3(
	function (a, b, c) {
		return {$: 'ReportChallengeStepStatus', a: a, b: b, c: c};
	});
var $author$project$View$ChallengeDetailsView$reportButton = F4(
	function (ui, label, msg, currentStatus) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 0),
					$mdgriffith$elm_ui$Element$Font$color(
					currentStatus ? ui.theme.enabledButton : ui.theme.disabledButton),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(label),
				onPress: $elm$core$Maybe$Just(msg)
			});
	});
var $author$project$View$ChallengeDetailsView$failureButton = F4(
	function (ui, id, index, maybeStatus) {
		return A4(
			$author$project$View$ChallengeDetailsView$reportButton,
			ui,
			'Failure',
			A3($author$project$Update$Msg$ReportChallengeStepStatus, id, index, $author$project$Data$Challenge$Failure),
			_Utils_eq(
				maybeStatus,
				$elm$core$Maybe$Just($author$project$Data$Challenge$Failure)));
	});
var $author$project$View$ChallengeDetailsView$partialSuccessButton = F4(
	function (ui, id, index, maybeStatus) {
		return A4(
			$author$project$View$ChallengeDetailsView$reportButton,
			ui,
			'Partial success  |',
			A3($author$project$Update$Msg$ReportChallengeStepStatus, id, index, $author$project$Data$Challenge$PartialSuccess),
			_Utils_eq(
				maybeStatus,
				$elm$core$Maybe$Just($author$project$Data$Challenge$PartialSuccess)));
	});
var $author$project$View$ChallengeDetailsView$skipButton = F4(
	function (ui, id, index, maybeStatus) {
		return A4(
			$author$project$View$ChallengeDetailsView$reportButton,
			ui,
			'Skip  |',
			A3($author$project$Update$Msg$ReportChallengeStepStatus, id, index, $author$project$Data$Challenge$Skipped),
			_Utils_eq(
				maybeStatus,
				$elm$core$Maybe$Just($author$project$Data$Challenge$Skipped)));
	});
var $author$project$View$ChallengeDetailsView$successButton = F4(
	function (ui, id, index, maybeStatus) {
		return A4(
			$author$project$View$ChallengeDetailsView$reportButton,
			ui,
			'Success  |',
			A3($author$project$Update$Msg$ReportChallengeStepStatus, id, index, $author$project$Data$Challenge$Success),
			_Utils_eq(
				maybeStatus,
				$elm$core$Maybe$Just($author$project$Data$Challenge$Success)));
	});
var $author$project$View$ChallengeDetailsView$renderStepReportButtons = F4(
	function (ui, challenge, index, maybeReported) {
		var measure = challenge.measure;
		var challengeId = challenge.id;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A4($author$project$View$ChallengeDetailsView$successButton, ui, challengeId, index, maybeReported),
					(measure.maxPartial > 0) ? A4($author$project$View$ChallengeDetailsView$partialSuccessButton, ui, challengeId, index, maybeReported) : $author$project$View$Style$empty,
					(measure.maxSkip > 0) ? A4($author$project$View$ChallengeDetailsView$skipButton, ui, challengeId, index, maybeReported) : $author$project$View$Style$empty,
					A4($author$project$View$ChallengeDetailsView$failureButton, ui, challengeId, index, maybeReported)
				]));
	});
var $author$project$Utils$ListUtils$find = F2(
	function (predicate, lst) {
		find:
		while (true) {
			if (!lst.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = lst.a;
				var xs = lst.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(x);
				} else {
					var $temp$predicate = predicate,
						$temp$lst = xs;
					predicate = $temp$predicate;
					lst = $temp$lst;
					continue find;
				}
			}
		}
	});
var $author$project$Data$Challenge$stepReport = F2(
	function (step, stepReports) {
		return A2(
			$author$project$Utils$ListUtils$find,
			function (x) {
				return _Utils_eq(x.step, step);
			},
			stepReports);
	});
var $author$project$View$ChallengeDetailsView$renderReportDates = F5(
	function (ui, now, challenge, dates, reported) {
		var cutoff = A2($author$project$View$ChallengeDetailsView$cutoffReportDate, now, dates);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(2)
				]),
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, date) {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(10),
									$mdgriffith$elm_ui$Element$padding(2)
								]),
							_List_fromArray(
								[
									(A2($author$project$Data$Schedule$before, date, cutoff) ? $author$project$View$Style$bold : $author$project$View$Style$italic)(
									$author$project$Utils$DateUtils$formatDate(date)),
									A2($author$project$Data$Schedule$before, date, cutoff) ? A4(
									$author$project$View$ChallengeDetailsView$renderStepReportButtons,
									ui,
									challenge,
									index + 1,
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.status;
										},
										A2($author$project$Data$Challenge$stepReport, index + 1, reported))) : $author$project$View$Style$empty
								]));
					}),
				dates));
	});
var $author$project$Data$Schedule$formatDuration = function (_v0) {
	var millis = _v0.a;
	return _Utils_eq(millis, ((24 * 60) * 60) * 1000) ? 'Daily' : (_Utils_eq(millis, (((7 * 24) * 60) * 60) * 1000) ? 'Weekly' : '<Unknown>');
};
var $author$project$View$ChallengeDetailsView$renderReportSchedule = F2(
	function (_v0, schedule) {
		var now = _v0.a;
		if (schedule.$ === 'OneOff') {
			var end = schedule.b;
			return $mdgriffith$elm_ui$Element$text(
				'One-off, report after ' + $author$project$Utils$DateUtils$formatDate(end));
		} else {
			var start = schedule.a;
			var repeat = schedule.c;
			var end = schedule.d;
			return $mdgriffith$elm_ui$Element$text(
				$author$project$Data$Schedule$formatDuration(repeat));
		}
	});
var $author$project$View$ChallengeDetailsView$renderSuccessMeasure = function (measure) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_Nil,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				(!measure.maxFailure) ? '- You cannot fail any attempt' : ('- You can fail up to ' + ($elm$core$String$fromInt(measure.maxFailure) + ' attempt(s)'))),
				$mdgriffith$elm_ui$Element$text(
				(!measure.maxSkip) ? '- You cannot skip any attempt' : ('- You can skip up to ' + ($elm$core$String$fromInt(measure.maxSkip) + ' attempt(s)'))),
				$mdgriffith$elm_ui$Element$text(
				(!measure.maxPartial) ? '- You cannot report any partial success' : ('- You can report up to ' + ($elm$core$String$fromInt(measure.maxPartial) + ' partial success(es)')))
			]));
};
var $author$project$State$Cache$getChallengeReportDates = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.reportDates;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Challenge$toString(id),
				cache.challenges));
	});
var $author$project$View$ChallengeDetailsView$reportDates = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($author$project$State$Cache$getChallengeReportDates, cache, id));
	});
var $author$project$View$ChallengeDetailsView$reportedSteps = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($author$project$State$Cache$getChallengeStepReports, cache, id));
	});
var $author$project$View$Style$titledElementStyle = F3(
	function (ui, title, content) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$semiBold,
							A2($author$project$View$Style$relFontSize, ui, 2)
						]),
					$mdgriffith$elm_ui$Element$text(title)),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					_List_fromArray(
						[content]))
				]));
	});
var $author$project$View$Style$titledTextStyle = F3(
	function (ui, title, content) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$semiBold,
							A2($author$project$View$Style$relFontSize, ui, 2)
						]),
					A2($author$project$View$Style$quotedText, ui, title)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					A2($author$project$View$Style$multiLineQuotedText, ui, content))
				]));
	});
var $author$project$View$ChallengeDetailsView$renderChallenge = F2(
	function (state, challenge) {
		var isAccepted = A2($author$project$View$ChallengeDetailsView$isChallengeAccepted, state.cache, challenge.id);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$alignLeft
						]),
					$author$project$View$Icons$challenge(state.uiStyle.large)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$spacing(20),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A3($author$project$View$Style$titledTextStyle, state.uiStyle, challenge.title, challenge.content),
							A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'How your success will be evaluated ?',
							$author$project$View$ChallengeDetailsView$renderSuccessMeasure(challenge.measure)),
							A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'When do you need to report ?',
							A2($author$project$View$ChallengeDetailsView$renderReportSchedule, state.timestamp, challenge.schedule)),
							A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'How people are doing ?',
							A3(
								$author$project$View$ChallengeDetailsView$renderChallengeStatistics,
								state.uiStyle,
								challenge.measure,
								A2($author$project$State$Cache$getChallengeStatistics, state.cache, challenge.id))),
							isAccepted ? A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'Report',
							A5(
								$author$project$View$ChallengeDetailsView$renderReportDates,
								state.uiStyle,
								state.timestamp,
								challenge,
								A2($author$project$View$ChallengeDetailsView$reportDates, state.cache, challenge.id),
								A2($author$project$View$ChallengeDetailsView$reportedSteps, state.cache, challenge.id))) : $author$project$View$Style$empty
						]))
				]));
	});
var $author$project$View$ChallengeDetailsView$renderChallengeNotFoundPage = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'Challenge cannot be found');
};
var $author$project$Data$Challenge$isChallengeActive = F2(
	function (_v0, challenge) {
		var now = _v0.a;
		var _v1 = $author$project$Data$Schedule$end(challenge.schedule);
		var end = _v1.a;
		return _Utils_cmp(now, end) < 0;
	});
var $author$project$Data$Challenge$isChallengeStarted = F2(
	function (_v0, challenge) {
		var now = _v0.a;
		var _v1 = $author$project$Data$Schedule$start(challenge.schedule);
		var start = _v1.a;
		return _Utils_cmp(now, start) > 0;
	});
var $author$project$Data$Challenge$isChallengeClosed = F2(
	function (now, challenge) {
		return (!A2($author$project$Data$Challenge$isChallengeStarted, now, challenge)) && (!A2($author$project$Data$Challenge$isChallengeActive, now, challenge));
	});
var $author$project$View$ChallengeDetailsView$isChallengeFailed = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (x) {
					return _Utils_eq(x, $author$project$Data$Challenge$Failed);
				},
				A2($author$project$State$Cache$getChallengeOutcomeStatus, cache, id)));
	});
var $author$project$Update$Msg$AcceptChallenge = function (a) {
	return {$: 'AcceptChallenge', a: a};
};
var $author$project$Update$Msg$RejectChallenge = function (a) {
	return {$: 'RejectChallenge', a: a};
};
var $author$project$View$ChallengeDetailsView$renderChallengeButtons = F2(
	function (ui, challenge) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 1),
							A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$rounded(5)
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('Accept'),
						onPress: $elm$core$Maybe$Just(
							$author$project$Update$Msg$AcceptChallenge(challenge.id))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 1),
							A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$rounded(5)
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('Reject'),
						onPress: $elm$core$Maybe$Just(
							$author$project$Update$Msg$RejectChallenge(challenge.id))
					})
				]));
	});
var $author$project$View$ChallengeDetailsView$renderNewChallengerHeader = F3(
	function (ui, cache, userId) {
		var maybeUser = A2($author$project$State$Cache$getUser, cache, userId);
		var pseudo = A2(
			$elm$core$Maybe$withDefault,
			'<Unknown>',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.pseudo;
				},
				maybeUser));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Will you accept the challenge from  '),
					A3(
					$author$project$View$Style$userStyle,
					ui,
					pseudo,
					$elm$core$Maybe$Just(userId)),
					$mdgriffith$elm_ui$Element$text(' ?')
				]));
	});
var $author$project$View$ChallengeDetailsView$renderChallengerHeader = F3(
	function (state, userId, challenge) {
		return A2($author$project$Data$Challenge$isChallengeClosed, state.timestamp, challenge) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$italic
				]),
			$mdgriffith$elm_ui$Element$text('This challenge is now closed.')) : (A2($author$project$View$ChallengeDetailsView$isChallengeAccepted, state.cache, challenge.id) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('You have accepted this challenge !')) : (A2($author$project$View$ChallengeDetailsView$isChallengeFailed, state.cache, challenge.id) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('You have FAILED this challenge.')) : (_Utils_eq(
			A2($author$project$State$Cache$getChallengeOutcomeStatus, state.cache, challenge.id),
			$elm$core$Maybe$Just($author$project$Data$Challenge$Rejected)) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('You have rejected this challenge !')) : (_Utils_eq(
			A2($author$project$State$Cache$getChallengeOutcomeStatus, state.cache, challenge.id),
			$elm$core$Maybe$Just($author$project$Data$Challenge$Completed)) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('You have completed this challenge !')) : A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 2)
				]),
			_List_fromArray(
				[
					A3($author$project$View$ChallengeDetailsView$renderNewChallengerHeader, state.uiStyle, state.cache, userId),
					$mdgriffith$elm_ui$Element$text('  '),
					A2($author$project$View$ChallengeDetailsView$renderChallengeButtons, state.uiStyle, challenge)
				]))))));
	});
var $author$project$View$ChallengeDetailsView$challengeDetailsScreen = F2(
	function (state, challengeId) {
		var maybeChallenge = A2($author$project$State$Cache$getChallenge, state.cache, challengeId);
		var maybeAuthor = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.author;
			},
			maybeChallenge);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$padding(20)
				]),
			function () {
				var _v0 = _Utils_Tuple2(maybeChallenge, maybeAuthor);
				if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
					var challenge = _v0.a.a;
					var userId = _v0.b.a;
					return _List_fromArray(
						[
							A3($author$project$View$ChallengeDetailsView$renderChallengerHeader, state, userId, challenge),
							A2($author$project$View$ChallengeDetailsView$renderChallenge, state, challenge)
						]);
				} else {
					return _List_fromArray(
						[
							$author$project$View$ChallengeDetailsView$renderChallengeNotFoundPage(state.uiStyle)
						]);
				}
			}());
	});
var $author$project$View$AppView$displayChallengeDetails = $author$project$View$ChallengeDetailsView$challengeDetailsScreen;
var $author$project$Update$Msg$ChangeEventTab = function (a) {
	return {$: 'ChangeEventTab', a: a};
};
var $author$project$View$EventScreen$eventTabButton = F4(
	function (ui, label, msg, selected) {
		return A4($author$project$View$Style$tabButton, ui, label, msg, selected);
	});
var $author$project$View$EventScreen$eventTabs = F2(
	function (ui, state) {
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A4(
					$author$project$View$EventScreen$eventTabButton,
					ui,
					'Incoming',
					$author$project$Update$Msg$ChangeEventTab($author$project$State$EventState$IncomingEventTab),
					_Utils_eq(state.currentTab, $author$project$State$EventState$IncomingEventTab)),
					A4(
					$author$project$View$EventScreen$eventTabButton,
					ui,
					'Accepted',
					$author$project$Update$Msg$ChangeEventTab($author$project$State$EventState$ParticipationAcceptedEventTab),
					_Utils_eq(state.currentTab, $author$project$State$EventState$ParticipationAcceptedEventTab)),
					A4(
					$author$project$View$EventScreen$eventTabButton,
					ui,
					'Requested',
					$author$project$Update$Msg$ChangeEventTab($author$project$State$EventState$RequestedEventTab),
					_Utils_eq(state.currentTab, $author$project$State$EventState$RequestedEventTab)),
					A4(
					$author$project$View$EventScreen$eventTabButton,
					ui,
					'Cancelled',
					$author$project$Update$Msg$ChangeEventTab($author$project$State$EventState$CancelledEventTab),
					_Utils_eq(state.currentTab, $author$project$State$EventState$CancelledEventTab)),
					A4(
					$author$project$View$EventScreen$eventTabButton,
					ui,
					'Participated',
					$author$project$Update$Msg$ChangeEventTab($author$project$State$EventState$ParticipatedEventTab),
					_Utils_eq(state.currentTab, $author$project$State$EventState$ParticipatedEventTab)),
					A4(
					$author$project$View$EventScreen$eventTabButton,
					ui,
					'Organized',
					$author$project$Update$Msg$ChangeEventTab($author$project$State$EventState$OrganizedEventTab),
					_Utils_eq(state.currentTab, $author$project$State$EventState$OrganizedEventTab))
				]));
	});
var $author$project$Update$Msg$ChangeEventPage = function (a) {
	return {$: 'ChangeEventPage', a: a};
};
var $author$project$State$EventState$allUpToCurrentPage = function (state) {
	return A2($author$project$State$PostPageCache$getAllUpTo, state.currentPage, state.postCache);
};
var $author$project$View$EventScreen$renderLoadingPosts = function (ui) {
	return A2($author$project$View$PostRenderer$renderLoadingPostPage, ui, 2);
};
var $author$project$View$EventScreen$renderNoPostPage = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'No events');
};
var $author$project$View$EventScreen$renderSinglePost = $author$project$View$PostRenderer$renderPostId;
var $author$project$View$EventScreen$renderPostPage = F2(
	function (state, page) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$View$EventScreen$renderSinglePost, state.uiStyle, state.timestamp, state.cache),
				page.items));
	});
var $author$project$View$EventScreen$renderEventTabContent = function (state) {
	var _v0 = $author$project$State$EventState$allUpToCurrentPage(state.event);
	if (_v0.$ === 'Nothing') {
		return $author$project$View$EventScreen$renderLoadingPosts(state.uiStyle);
	} else {
		var posts = _v0.a;
		return ($author$project$State$GenericPage$isEmpty(posts) && $author$project$Data$Page$isFirst(posts.number)) ? $author$project$View$EventScreen$renderNoPostPage(state.uiStyle) : A5(
			$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
			state.uiStyle,
			$author$project$View$UIStyle$isMobile(state.device),
			'event',
			$author$project$Update$Msg$ChangeEventPage(
				$author$project$Data$Page$next(state.event.currentPage)),
			A2($author$project$View$EventScreen$renderPostPage, state, posts));
	}
};
var $author$project$View$EventScreen$eventScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$padding(5)
			]),
		_List_fromArray(
			[
				A2($author$project$View$EventScreen$eventTabs, state.uiStyle, state.event),
				$author$project$View$EventScreen$renderEventTabContent(state)
			]));
};
var $author$project$View$AppView$displayEvent = $author$project$View$EventScreen$eventScreen;
var $author$project$State$UserState$currentUser = function (state) {
	if (state.$ === 'LoggedIn') {
		var user = state.a;
		return $elm$core$Maybe$Just(user);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Update$Msg$ChangeEventDetailsTab = F2(
	function (a, b) {
		return {$: 'ChangeEventDetailsTab', a: a, b: b};
	});
var $author$project$State$EventDetailsState$EventDiscussionTab = {$: 'EventDiscussionTab'};
var $author$project$View$EventDetailsView$eventDetailsTabButton = F4(
	function (ui, label, msg, selected) {
		return A4($author$project$View$Style$tabButton, ui, label, msg, selected);
	});
var $author$project$View$EventDetailsView$renderEventDetailsTabs = F3(
	function (state, event, isOwner) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A4(
					$author$project$View$EventDetailsView$eventDetailsTabButton,
					state.uiStyle,
					'Details',
					A2($author$project$Update$Msg$ChangeEventDetailsTab, event.id, $author$project$State$EventDetailsState$EventDetailsTab),
					_Utils_eq(state.eventDetails.currentTab, $author$project$State$EventDetailsState$EventDetailsTab)),
					A4(
					$author$project$View$EventDetailsView$eventDetailsTabButton,
					state.uiStyle,
					'Pending Requests',
					A2($author$project$Update$Msg$ChangeEventDetailsTab, event.id, $author$project$State$EventDetailsState$PendingRequestsTab),
					_Utils_eq(state.eventDetails.currentTab, $author$project$State$EventDetailsState$PendingRequestsTab)),
					A4(
					$author$project$View$EventDetailsView$eventDetailsTabButton,
					state.uiStyle,
					'Participants',
					A2($author$project$Update$Msg$ChangeEventDetailsTab, event.id, $author$project$State$EventDetailsState$ParticipantsTab),
					_Utils_eq(state.eventDetails.currentTab, $author$project$State$EventDetailsState$ParticipantsTab)),
					A4(
					$author$project$View$EventDetailsView$eventDetailsTabButton,
					state.uiStyle,
					'Discussion',
					A2($author$project$Update$Msg$ChangeEventDetailsTab, event.id, $author$project$State$EventDetailsState$EventDiscussionTab),
					_Utils_eq(state.eventDetails.currentTab, $author$project$State$EventDetailsState$EventDiscussionTab))
				]));
	});
var $author$project$View$EventDetailsView$hasEventParticipationBeenAccepted = F2(
	function (cache, eventId) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2($author$project$State$Cache$getEventParticipationStatus, cache, eventId));
	});
var $author$project$View$EventDetailsView$hasEventParticipationBeenRequested = F2(
	function (cache, eventId) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2($author$project$State$Cache$getEventParticipationRequestStatus, cache, eventId));
	});
var $author$project$View$EventDetailsView$isEventIdCancelled = F2(
	function (cache, eventId) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2($author$project$State$Cache$getEventCancelledStatus, cache, eventId));
	});
var $author$project$View$EventDetailsView$isEventCancelled = F2(
	function (cache, event) {
		return A2($author$project$View$EventDetailsView$isEventIdCancelled, cache, event.id);
	});
var $author$project$View$EventDetailsView$isEventClosed = F2(
	function (_v0, event) {
		var now = _v0.a;
		var _v1 = $author$project$Data$Schedule$start(event.schedule);
		var utc = _v1.a;
		return _Utils_cmp(now, utc) > 0;
	});
var $author$project$Update$Msg$CancelEvent = function (a) {
	return {$: 'CancelEvent', a: a};
};
var $author$project$View$EventDetailsView$renderCancelButton = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Cancel Event'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$CancelEvent(id))
			});
	});
var $author$project$View$EventDetailsView$renderCancelParticipationButton = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Cancel participation'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$CancelEventParticipation(id))
			});
	});
var $author$project$View$EventDetailsView$renderRequestParticipationButton = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Request participation'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$RequestEventParticipation(id))
			});
	});
var $author$project$View$EventDetailsView$renderEventButtons = F3(
	function (state, eventId, isOwner) {
		var cancelled = A2($author$project$View$EventDetailsView$isEventIdCancelled, state.cache, eventId);
		return cancelled ? $mdgriffith$elm_ui$Element$none : (isOwner ? A2($author$project$View$EventDetailsView$renderCancelButton, state.uiStyle, eventId) : ((A2($author$project$View$EventDetailsView$hasEventParticipationBeenRequested, state.cache, eventId) || A2($author$project$View$EventDetailsView$hasEventParticipationBeenAccepted, state.cache, eventId)) ? A2($author$project$View$EventDetailsView$renderCancelParticipationButton, state.uiStyle, eventId) : A2($author$project$View$EventDetailsView$renderRequestParticipationButton, state.uiStyle, eventId)));
	});
var $author$project$View$EventDetailsView$renderEventHeader = F3(
	function (state, isEventOwner, event) {
		var status = A2($author$project$View$EventDetailsView$isEventClosed, state.timestamp, event) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$italic
				]),
			$mdgriffith$elm_ui$Element$text('This event is now CLOSED.')) : (A2($author$project$View$EventDetailsView$isEventCancelled, state.cache, event) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('This event is ** CANCELLED **')) : (isEventOwner ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('You are the organizer of this event.')) : (A2($author$project$View$EventDetailsView$hasEventParticipationBeenAccepted, state.cache, event.id) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('You are PARTICIPATING to this event.')) : (A2($author$project$View$EventDetailsView$hasEventParticipationBeenRequested, state.cache, event.id) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text('You have a PENDING request for this event.')) : A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 5),
					$mdgriffith$elm_ui$Element$Font$italic
				]),
			$mdgriffith$elm_ui$Element$text('This event is opened.'))))));
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 2)
				]),
			_List_fromArray(
				[
					status,
					$mdgriffith$elm_ui$Element$text('  '),
					A3($author$project$View$EventDetailsView$renderEventButtons, state, event.id, isEventOwner)
				]));
	});
var $author$project$View$EventDetailsView$renderEventNotFoundPage = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'Event cannot be found');
};
var $author$project$State$Cache$getPostIdForEvent = F2(
	function (cache, id) {
		return A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.postId;
			},
			A2(
				$elm$core$Dict$get,
				$author$project$Data$Event$toString(id),
				cache.events));
	});
var $author$project$View$EventDetailsView$renderDiscussion = F2(
	function (state, event) {
		var _v0 = A2($author$project$State$Cache$getPostIdForEvent, state.cache, event.id);
		if (_v0.$ === 'Just') {
			var postId = _v0.a;
			return A4($author$project$View$PostRenderer$renderOpenedConversation, state.uiStyle, state.timestamp, state.cache, postId);
		} else {
			return A2($author$project$View$ScreenUtils$emptyScreen, state.uiStyle, 'Couldn\'t find conversation');
		}
	});
var $author$project$View$EventDetailsView$renderEventCapacity = F2(
	function (state, event) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, state.uiStyle, 0),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					'- Event is open to ' + ($elm$core$String$fromInt(event.maxParticipants) + ' participant(s).')),
					$mdgriffith$elm_ui$Element$text(
					'- ' + ($elm$core$String$fromInt(
						A2(
							$elm$core$Maybe$withDefault,
							0,
							A2($author$project$State$Cache$getEventParticipantCount, state.cache, event.id))) + ' is/are participating.')),
					$mdgriffith$elm_ui$Element$text(
					'- ' + ($elm$core$String$fromInt(
						A2(
							$elm$core$Maybe$withDefault,
							0,
							A2(
								$elm$core$Maybe$map,
								function (n) {
									return event.maxParticipants - n;
								},
								A2($author$project$State$Cache$getEventParticipantCount, state.cache, event.id)))) + ' slots are still opened'))
				]));
	});
var $author$project$View$EventDetailsView$renderLocation = F2(
	function (ui, loc) {
		switch (loc.$) {
			case 'Online':
				var url = loc.a.a;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(3)
						]),
					_List_fromArray(
						[
							A3(
							$author$project$View$Style$relSize,
							ui,
							0,
							$mdgriffith$elm_ui$Element$text('The event is located online.')),
							A2(
							$mdgriffith$elm_ui$Element$newTabLink,
							_List_fromArray(
								[
									A2($author$project$View$Style$relFontSize, ui, 0)
								]),
							{
								label: A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$blue)
										]),
									$elm$core$List$singleton(
										$mdgriffith$elm_ui$Element$text(url))),
								url: url
							})
						]));
			case 'MapUrl':
				var url = loc.a.a;
				return A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$blue)
								]),
							$mdgriffith$elm_ui$Element$text('See on maps')),
						url: url
					});
			case 'GeoLocation':
				var geo = loc;
				var _v1 = A2($author$project$Data$Location$toMapUrl, 17, geo);
				var url = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$blue)
								]),
							$mdgriffith$elm_ui$Element$text('See on maps')),
						url: url
					});
			default:
				var address = loc;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(3)
						]),
					_List_fromArray(
						[
							A3(
							$author$project$View$Style$relSize,
							ui,
							0,
							$mdgriffith$elm_ui$Element$text('The event is located at the following address')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$blue),
									A2($author$project$View$Style$relFontSize, ui, 0)
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Data$Location$formatAddress(address)))
						]));
		}
	});
var $author$project$View$Icons$user = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$userOutlined);
var $author$project$View$UserListRenderer$userLogo = function (ui) {
	var render = $mdgriffith$elm_ui$Element$el(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(20)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(20)),
				$mdgriffith$elm_ui$Element$Border$width(2),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY
			]));
	var center = A2(
		$elm$core$Basics$composeR,
		$mdgriffith$elm_ui$Element$el(
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])),
		render);
	return center(
		$author$project$View$Icons$user(ui.tiny));
};
var $author$project$View$UserListRenderer$renderHeader = F2(
	function (ui, user) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$author$project$View$Style$standard,
					ui,
					$author$project$View$UserListRenderer$userLogo(ui)),
					A3(
					$author$project$View$Style$relSize,
					ui,
					0,
					A3(
						$author$project$View$Style$userStyle,
						ui,
						user.pseudo,
						$elm$core$Maybe$Just(user.id))),
					A2(
					$author$project$View$Style$headerDateStyle,
					ui,
					$author$project$View$Style$italic(
						'since ' + $author$project$Utils$DateUtils$formatDate(user.since)))
				]));
	});
var $author$project$View$UserListRenderer$renderUserDesc = F2(
	function (ui, user) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 0),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 40, right: 0, top: 0})
				]),
			A2($author$project$View$Style$multiLineQuotedText, ui, user.introduction));
	});
var $author$project$View$UserListRenderer$renderUser = F3(
	function (ui, _v0, user) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			_List_fromArray(
				[
					A2($author$project$View$UserListRenderer$renderHeader, ui, user),
					A2($author$project$View$Style$horizontalSeparator, 1, ui.theme.background),
					A2($author$project$View$UserListRenderer$renderUserDesc, ui, user)
				]));
	});
var $author$project$View$UserListRenderer$renderUserId = F3(
	function (ui, cache, userId) {
		return A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$text('<Unable to render user info>'),
			A2(
				$elm$core$Maybe$map,
				A2($author$project$View$UserListRenderer$renderUser, ui, cache),
				A2($author$project$State$Cache$getUser, cache, userId)));
	});
var $author$project$View$EventDetailsView$renderEvent = F2(
	function (state, event) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$alignLeft
						]),
					$author$project$View$Icons$event(state.uiStyle.large)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$spacing(20),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A3($author$project$View$Style$titledTextStyle, state.uiStyle, 'Event description', event.description),
							A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'Organized by',
							A3($author$project$View$UserListRenderer$renderUserId, state.uiStyle, state.cache, event.owner)),
							A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'When ?',
							$mdgriffith$elm_ui$Element$text(
								$author$project$Utils$DateUtils$formatDate(
									$author$project$Data$Schedule$start(event.schedule)))),
							A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'Where ?',
							A2($author$project$View$EventDetailsView$renderLocation, state.uiStyle, event.location)),
							A3(
							$author$project$View$Style$titledElementStyle,
							state.uiStyle,
							'How many people are going ?',
							A2($author$project$View$EventDetailsView$renderEventCapacity, state, event))
						]))
				]));
	});
var $author$project$Update$Msg$ChangeEventDetailsPage = F2(
	function (a, b) {
		return {$: 'ChangeEventDetailsPage', a: a, b: b};
	});
var $author$project$State$UserPageCache$getAllUpTo = F2(
	function (page, cache) {
		var sortedKeys = A2(
			$author$project$Utils$ListUtils$takeWhile,
			function (key) {
				return _Utils_cmp(
					key,
					$author$project$Data$Page$number(page)) < 1;
			},
			$elm$core$List$sort(
				$elm$core$Dict$keys(cache.cache)));
		var all = A2(
			$elm$core$List$concatMap,
			function (p) {
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.items;
						},
						A2(
							$author$project$State$PageCache$get,
							$author$project$Data$Page$Page(p),
							cache)));
			},
			sortedKeys);
		return $elm$core$List$isEmpty(sortedKeys) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			{items: all, number: page});
	});
var $author$project$State$EventDetailsState$allUpToCurrentPage = function (state) {
	return A2($author$project$State$UserPageCache$getAllUpTo, state.currentPage, state.userCache);
};
var $author$project$View$UserListRenderer$renderLoadingSingleUser = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$padding(10)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 2, left: 0, right: 0, top: 0}),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{bottom: 2, left: 0, right: 0, top: 0}),
						$mdgriffith$elm_ui$Element$Border$color(ui.theme.background)
					]),
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft]),
					_List_fromArray(
						[
							A3($author$project$View$Style$loadingFixedTextLine, ui, 12, 16),
							A3($author$project$View$Style$loadingFixedTextLine, ui, 12, 100)
						]))),
				A3($author$project$View$Style$loadingTextBlock, ui, 12, 3)
			]));
};
var $author$project$View$UserListRenderer$renderLoadingUserPage = F2(
	function (ui, count) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				function (_v0) {
					return $author$project$View$UserListRenderer$renderLoadingSingleUser(ui);
				},
				A2($elm$core$List$range, 1, count)));
	});
var $author$project$View$EventDetailsView$renderLoadingUsers = function (ui) {
	return A2($author$project$View$UserListRenderer$renderLoadingUserPage, ui, 2);
};
var $author$project$View$EventDetailsView$renderNoUserPage = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'No users');
};
var $author$project$View$EventDetailsView$renderSingleParticipant = F5(
	function (ui, cache, eventId, isOwner, userId) {
		return A3($author$project$View$UserListRenderer$renderUserId, ui, cache, userId);
	});
var $author$project$View$EventDetailsView$renderUserPage = F2(
	function (page, f) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2($elm$core$List$map, f, page.items));
	});
var $author$project$View$EventDetailsView$renderParticipantListTabContent = F3(
	function (state, event, isOwner) {
		var _v0 = $author$project$State$EventDetailsState$allUpToCurrentPage(state.eventDetails);
		if (_v0.$ === 'Nothing') {
			return $author$project$View$EventDetailsView$renderLoadingUsers(state.uiStyle);
		} else {
			var users = _v0.a;
			return ($author$project$State$GenericPage$isEmpty(users) && $author$project$Data$Page$isFirst(users.number)) ? $author$project$View$EventDetailsView$renderNoUserPage(state.uiStyle) : A5(
				$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
				state.uiStyle,
				$author$project$View$UIStyle$isMobile(state.device),
				'event-users',
				A2(
					$author$project$Update$Msg$ChangeEventDetailsPage,
					event.id,
					$author$project$Data$Page$next(state.eventDetails.currentPage)),
				A2(
					$author$project$View$EventDetailsView$renderUserPage,
					users,
					A4($author$project$View$EventDetailsView$renderSingleParticipant, state.uiStyle, state.cache, event.id, isOwner)));
		}
	});
var $author$project$Update$Msg$AcceptUserEventParticipation = F2(
	function (a, b) {
		return {$: 'AcceptUserEventParticipation', a: a, b: b};
	});
var $author$project$View$EventDetailsView$renderAcceptPendingRequestButton = F3(
	function (ui, eventId, userId) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(50))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text('Accept')),
				onPress: $elm$core$Maybe$Just(
					A2($author$project$Update$Msg$AcceptUserEventParticipation, eventId, userId))
			});
	});
var $author$project$Update$Msg$RejectUserEventParticipation = F2(
	function (a, b) {
		return {$: 'RejectUserEventParticipation', a: a, b: b};
	});
var $author$project$View$EventDetailsView$renderRejectedPendingRequestButton = F3(
	function (ui, eventId, userId) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(50))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text('Reject')),
				onPress: $elm$core$Maybe$Just(
					A2($author$project$Update$Msg$RejectUserEventParticipation, eventId, userId))
			});
	});
var $author$project$View$EventDetailsView$renderSingleUserPendingRequest = F4(
	function (state, eventId, isOwner, userId) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A3($author$project$View$UserListRenderer$renderUserId, state.uiStyle, state.cache, userId),
					isOwner ? A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							A3($author$project$View$EventDetailsView$renderAcceptPendingRequestButton, state.uiStyle, eventId, userId),
							A3($author$project$View$EventDetailsView$renderRejectedPendingRequestButton, state.uiStyle, eventId, userId)
						])) : $mdgriffith$elm_ui$Element$none
				]));
	});
var $author$project$View$EventDetailsView$renderPendingRequestUserListTabContent = F3(
	function (state, event, isOwner) {
		var _v0 = $author$project$State$EventDetailsState$allUpToCurrentPage(state.eventDetails);
		if (_v0.$ === 'Nothing') {
			return $author$project$View$EventDetailsView$renderLoadingUsers(state.uiStyle);
		} else {
			var users = _v0.a;
			return ($author$project$State$GenericPage$isEmpty(users) && $author$project$Data$Page$isFirst(users.number)) ? $author$project$View$EventDetailsView$renderNoUserPage(state.uiStyle) : A5(
				$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
				state.uiStyle,
				$author$project$View$UIStyle$isMobile(state.device),
				'event-users',
				A2(
					$author$project$Update$Msg$ChangeEventDetailsPage,
					event.id,
					$author$project$Data$Page$next(state.eventDetails.currentPage)),
				A2(
					$author$project$View$EventDetailsView$renderUserPage,
					users,
					A3($author$project$View$EventDetailsView$renderSingleUserPendingRequest, state, event.id, isOwner)));
		}
	});
var $author$project$View$EventDetailsView$renderSelectedTabContent = F3(
	function (state, event, isOwner) {
		var _v0 = state.eventDetails.currentTab;
		switch (_v0.$) {
			case 'EventDetailsTab':
				return A2($author$project$View$EventDetailsView$renderEvent, state, event);
			case 'PendingRequestsTab':
				return A3($author$project$View$EventDetailsView$renderPendingRequestUserListTabContent, state, event, isOwner);
			case 'ParticipantsTab':
				return A3($author$project$View$EventDetailsView$renderParticipantListTabContent, state, event, isOwner);
			default:
				return A2($author$project$View$EventDetailsView$renderDiscussion, state, event);
		}
	});
var $author$project$View$EventDetailsView$eventDetailsScreen = F2(
	function (state, eventId) {
		var maybeEvent = A2($author$project$State$Cache$getEvent, state.cache, eventId);
		var maybeOwner = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.owner;
			},
			maybeEvent);
		var maybeCurrentUser = $author$project$State$UserState$currentUser(state.user);
		var isEventOwner = $author$project$Utils$MaybeUtils$nonEmpty(maybeCurrentUser) && _Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				maybeCurrentUser),
			maybeOwner);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$padding(20)
				]),
			function () {
				var _v0 = _Utils_Tuple2(maybeEvent, maybeOwner);
				if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
					var event = _v0.a.a;
					return _List_fromArray(
						[
							A3($author$project$View$EventDetailsView$renderEventHeader, state, isEventOwner, event),
							A3($author$project$View$EventDetailsView$renderEventDetailsTabs, state, event, isEventOwner),
							A3($author$project$View$EventDetailsView$renderSelectedTabContent, state, event, isEventOwner)
						]);
				} else {
					return _List_fromArray(
						[
							$author$project$View$EventDetailsView$renderEventNotFoundPage(state.uiStyle)
						]);
				}
			}());
	});
var $author$project$View$AppView$displayEventDetails = $author$project$View$EventDetailsView$eventDetailsScreen;
var $author$project$Update$Msg$ChangeFeedPage = function (a) {
	return {$: 'ChangeFeedPage', a: a};
};
var $author$project$State$FeedState$allUpToCurrentPage = function (state) {
	return A2($author$project$State$PostPageCache$getAllUpTo, state.currentPage, state.postCache);
};
var $author$project$View$FeedScreen$renderLoadingPosts = function (ui) {
	return A2($author$project$View$PostRenderer$renderLoadingPostPage, ui, 2);
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Utils$TextUtils$oneline = A2($elm$core$String$replace, '\n', ' ');
var $author$project$View$Style$titledParagraphStyle = F3(
	function (ui, title, content) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$semiBold,
							A2($author$project$View$Style$relFontSize, ui, 2)
						]),
					A2($author$project$View$Style$quotedText, ui, title)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					A2(
						$elm$core$List$map,
						$author$project$View$Style$multiLineQuotedText(ui),
						content))
				]));
	});
var $author$project$View$WelcomeScreen$titledMultiText = F3(
	function (ui, title, content) {
		return A3(
			$author$project$View$Style$titledParagraphStyle,
			ui,
			title,
			A2($elm$core$List$map, $author$project$Utils$TextUtils$oneline, content));
	});
var $author$project$View$WelcomeScreen$dataPrivacy = function (ui) {
	return A3(
		$author$project$View$WelcomeScreen$titledMultiText,
		ui,
		'Data privacy and protection',
		_List_fromArray(
			['GreenGen\'s main goal is to help people to become more environment friendly.\r\n       We are not a social media to profile you activity - we actually don\'t care who you are.', 'We store on our servers only the data we need for security purpose and to get the website running. We try to make your identification more difficult -\r\n         so we are not an interesting purchase for any big social media companies or target for hackers.', 'You need an email to register, but we just use it to generate a deterministic id from it -\r\n         we don\'t even keep it after your registration is completed. This means we cannot even contact you by email !', 'We don\'t use tracking cookies. Actually, we don\'t use cookies at all.']));
};
var $author$project$Update$Msg$GenerateWelcomeFeed = {$: 'GenerateWelcomeFeed'};
var $author$project$View$WelcomeScreen$generateFeedButton = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					A2($author$project$View$Style$relFontSize, ui, 14),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text('Let\'s get started !')),
				onPress: $elm$core$Maybe$Just($author$project$Update$Msg$GenerateWelcomeFeed)
			}));
};
var $author$project$View$WelcomeScreen$howDoesItWork = function (ui) {
	return A3(
		$author$project$View$WelcomeScreen$titledMultiText,
		ui,
		'How does it work ?',
		_List_fromArray(
			['GreenGen provides you with a number of tools to help you changing your behaviour,\r\n       and with a community to support you with advices and keep you motivated.\r\n       We believe small, sustained, regular steps will work better than introducing big changes in one go.', 'Post tips, challenge yourself and your followers, organize events, poll opinions ... we have the tools for that.']));
};
var $author$project$View$WelcomeScreen$titledText = F3(
	function (ui, title, content) {
		return A3(
			$author$project$View$Style$titledTextStyle,
			ui,
			title,
			$author$project$Utils$TextUtils$oneline(content));
	});
var $author$project$View$WelcomeScreen$startNow = function (ui) {
	return A3($author$project$View$WelcomeScreen$titledText, ui, 'Let\'s start now !', 'Your feed is now empty. We will generate one randomly from recent posts from our users.\r\n       You can also go to the search screen and look for topics you are interested in, follow hashtags and users.\r\n       With time, your feed will improve.\r\n    ');
};
var $author$project$View$WelcomeScreen$bullet = F3(
	function (ui, icon, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(2),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$Border$rounded(2),
							$mdgriffith$elm_ui$Element$alignLeft
						]),
					icon),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 0)
						]),
					$mdgriffith$elm_ui$Element$text(txt))
				]));
	});
var $author$project$View$Icons$calendar = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$calendarOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$GlobalOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M854.4 800.9c.2-.3.5-.6.7-.9C920.6 722.1 960 621.7 960 512s-39.4-210.1-104.8-288c-.2-.3-.5-.5-.7-.8-1.1-1.3-2.1-2.5-3.2-3.7-.4-.5-.8-.9-1.2-1.4l-4.1-4.7-.1-.1c-1.5-1.7-3.1-3.4-4.6-5.1l-.1-.1c-3.2-3.4-6.4-6.8-9.7-10.1l-.1-.1-4.8-4.8-.3-.3c-1.5-1.5-3-2.9-4.5-4.3-.5-.5-1-1-1.6-1.5-1-1-2-1.9-3-2.8-.3-.3-.7-.6-1-1C736.4 109.2 629.5 64 512 64s-224.4 45.2-304.3 119.2c-.3.3-.7.6-1 1-1 .9-2 1.9-3 2.9-.5.5-1 1-1.6 1.5-1.5 1.4-3 2.9-4.5 4.3l-.3.3-4.8 4.8-.1.1c-3.3 3.3-6.5 6.7-9.7 10.1l-.1.1c-1.6 1.7-3.1 3.4-4.6 5.1l-.1.1c-1.4 1.5-2.8 3.1-4.1 4.7-.4.5-.8.9-1.2 1.4-1.1 1.2-2.1 2.5-3.2 3.7-.2.3-.5.5-.7.8C103.4 301.9 64 402.3 64 512s39.4 210.1 104.8 288c.2.3.5.6.7.9l3.1 3.7c.4.5.8.9 1.2 1.4l4.1 4.7c0 .1.1.1.1.2 1.5 1.7 3 3.4 4.6 5l.1.1c3.2 3.4 6.4 6.8 9.6 10.1l.1.1c1.6 1.6 3.1 3.2 4.7 4.7l.3.3c3.3 3.3 6.7 6.5 10.1 9.6 80.1 74 187 119.2 304.5 119.2s224.4-45.2 304.3-119.2a300 300 0 0010-9.6l.3-.3c1.6-1.6 3.2-3.1 4.7-4.7l.1-.1c3.3-3.3 6.5-6.7 9.6-10.1l.1-.1c1.5-1.7 3.1-3.3 4.6-5 0-.1.1-.1.1-.2 1.4-1.5 2.8-3.1 4.1-4.7.4-.5.8-.9 1.2-1.4a99 99 0 003.3-3.7zm4.1-142.6c-13.8 32.6-32 62.8-54.2 90.2a444.07 444.07 0 00-81.5-55.9c11.6-46.9 18.8-98.4 20.7-152.6H887c-3 40.9-12.6 80.6-28.5 118.3zM887 484H743.5c-1.9-54.2-9.1-105.7-20.7-152.6 29.3-15.6 56.6-34.4 81.5-55.9A373.86 373.86 0 01887 484zM658.3 165.5c39.7 16.8 75.8 40 107.6 69.2a394.72 394.72 0 01-59.4 41.8c-15.7-45-35.8-84.1-59.2-115.4 3.7 1.4 7.4 2.9 11 4.4zm-90.6 700.6c-9.2 7.2-18.4 12.7-27.7 16.4V697a389.1 389.1 0 01115.7 26.2c-8.3 24.6-17.9 47.3-29 67.8-17.4 32.4-37.8 58.3-59 75.1zm59-633.1c11 20.6 20.7 43.3 29 67.8A389.1 389.1 0 01540 327V141.6c9.2 3.7 18.5 9.1 27.7 16.4 21.2 16.7 41.6 42.6 59 75zM540 640.9V540h147.5c-1.6 44.2-7.1 87.1-16.3 127.8l-.3 1.2A445.02 445.02 0 00540 640.9zm0-156.9V383.1c45.8-2.8 89.8-12.5 130.9-28.1l.3 1.2c9.2 40.7 14.7 83.5 16.3 127.8H540zm-56 56v100.9c-45.8 2.8-89.8 12.5-130.9 28.1l-.3-1.2c-9.2-40.7-14.7-83.5-16.3-127.8H484zm-147.5-56c1.6-44.2 7.1-87.1 16.3-127.8l.3-1.2c41.1 15.6 85 25.3 130.9 28.1V484H336.5zM484 697v185.4c-9.2-3.7-18.5-9.1-27.7-16.4-21.2-16.7-41.7-42.7-59.1-75.1-11-20.6-20.7-43.3-29-67.8 37.2-14.6 75.9-23.3 115.8-26.1zm0-370a389.1 389.1 0 01-115.7-26.2c8.3-24.6 17.9-47.3 29-67.8 17.4-32.4 37.8-58.4 59.1-75.1 9.2-7.2 18.4-12.7 27.7-16.4V327zM365.7 165.5c3.7-1.5 7.3-3 11-4.4-23.4 31.3-43.5 70.4-59.2 115.4-21-12-40.9-26-59.4-41.8 31.8-29.2 67.9-52.4 107.6-69.2zM165.5 365.7c13.8-32.6 32-62.8 54.2-90.2 24.9 21.5 52.2 40.3 81.5 55.9-11.6 46.9-18.8 98.4-20.7 152.6H137c3-40.9 12.6-80.6 28.5-118.3zM137 540h143.5c1.9 54.2 9.1 105.7 20.7 152.6a444.07 444.07 0 00-81.5 55.9A373.86 373.86 0 01137 540zm228.7 318.5c-39.7-16.8-75.8-40-107.6-69.2 18.5-15.8 38.4-29.7 59.4-41.8 15.7 45 35.8 84.1 59.2 115.4-3.7-1.4-7.4-2.9-11-4.4zm292.6 0c-3.7 1.5-7.3 3-11 4.4 23.4-31.3 43.5-70.4 59.2-115.4 21 12 40.9 26 59.4 41.8a373.81 373.81 0 01-107.6 69.2z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$globalOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$GlobalOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$globalOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$globalOutlined);
};
var $author$project$View$Icons$feed = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$globalOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$BellOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M816 768h-24V428c0-141.1-104.3-257.7-240-277.1V112c0-22.1-17.9-40-40-40s-40 17.9-40 40v38.9c-135.7 19.4-240 136-240 277.1v340h-24c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h216c0 61.8 50.2 112 112 112s112-50.2 112-112h216c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM512 888c-26.5 0-48-21.5-48-48h96c0 26.5-21.5 48-48 48zM304 768V428c0-55.6 21.6-107.8 60.9-147.1S456.4 220 512 220c55.6 0 107.8 21.6 147.1 60.9S720 372.4 720 428v340H304z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$bellOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$BellOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$bellOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$bellOutlined);
};
var $author$project$View$Icons$notifications = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$bellOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$HomeOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M946.5 505L560.1 118.8l-25.9-25.9a31.5 31.5 0 00-44.4 0L77.5 505a63.9 63.9 0 00-18.8 46c.4 35.2 29.7 63.3 64.9 63.3h42.5V940h691.8V614.3h43.4c17.1 0 33.2-6.7 45.3-18.8a63.6 63.6 0 0018.7-45.3c0-17-6.7-33.1-18.8-45.2zM568 868H456V664h112v204zm217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$homeOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$HomeOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$homeOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$homeOutlined);
};
var $author$project$View$Icons$wall = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$homeOutlined);
var $author$project$View$WelcomeScreen$userGuide = function (ui) {
	return A3(
		$author$project$View$Style$titledElementStyle,
		ui,
		'Quick user guide',
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(2)
				]),
			_List_fromArray(
				[
					A3(
					$author$project$View$WelcomeScreen$bullet,
					ui,
					$author$project$View$Icons$wall(ui.small),
					'Your home page. You can see all your posts here.'),
					A3(
					$author$project$View$WelcomeScreen$bullet,
					ui,
					$author$project$View$Icons$feed(ui.small),
					'Your feed. All the new content of people or hashtags you are following should be there'),
					A3(
					$author$project$View$WelcomeScreen$bullet,
					ui,
					$author$project$View$Icons$challenge(ui.small),
					'Challenge page. You can see all your current challenges, and statuses.'),
					A3(
					$author$project$View$WelcomeScreen$bullet,
					ui,
					$author$project$View$Icons$calendar(ui.small),
					'Your event page. This is where you can see your incoming events, or manage events you are organizing.'),
					A3(
					$author$project$View$WelcomeScreen$bullet,
					ui,
					$author$project$View$Icons$notifications(ui.small),
					'Notifications from GreenGen will be there'),
					A3(
					$author$project$View$WelcomeScreen$bullet,
					ui,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(16)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(16)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						$mdgriffith$elm_ui$Element$text('+')),
					'And when you are ready ... go to our wizard page, and post something or even organize an event !')
				])));
};
var $author$project$View$WelcomeScreen$whatIsGreenGen = function (ui) {
	return A3(
		$author$project$View$WelcomeScreen$titledMultiText,
		ui,
		'What is GreenGen ?',
		_List_fromArray(
			['GreenGen is a new social network which aims at helping people to do small efforts to improve environment.', 'This version of GreenGen is a still a proof of concept. Expect bugs and issues.']));
};
var $author$project$View$WelcomeScreen$renderWelcomePage = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_fromArray(
			[
				$author$project$View$WelcomeScreen$whatIsGreenGen(ui),
				$author$project$View$WelcomeScreen$howDoesItWork(ui),
				$author$project$View$WelcomeScreen$userGuide(ui),
				$author$project$View$WelcomeScreen$dataPrivacy(ui),
				$author$project$View$WelcomeScreen$startNow(ui),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX]),
				$author$project$View$WelcomeScreen$generateFeedButton(ui))
			]));
};
var $author$project$View$WelcomeScreen$welcome = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						A2($author$project$View$Style$relFontSize, ui, 22),
						$mdgriffith$elm_ui$Element$Font$semiBold,
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Font$color(ui.theme.background)
					]),
				$mdgriffith$elm_ui$Element$text('Welcome !')),
				A2($author$project$View$Style$horizontalSeparator, 1, ui.theme.background)
			]));
};
var $author$project$View$WelcomeScreen$welcomeScreen = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$padding(5)
			]),
		_List_fromArray(
			[
				$author$project$View$WelcomeScreen$welcome(ui),
				$author$project$View$WelcomeScreen$renderWelcomePage(ui)
			]));
};
var $author$project$View$FeedScreen$renderNoPostPage = $author$project$View$WelcomeScreen$welcomeScreen;
var $author$project$View$FeedScreen$renderSinglePost = $author$project$View$PostRenderer$renderPostId;
var $author$project$View$FeedScreen$renderPostPage = F2(
	function (state, page) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$View$FeedScreen$renderSinglePost, state.uiStyle, state.timestamp, state.cache),
				page.items));
	});
var $author$project$View$FeedScreen$renderFeedState = function (state) {
	var _v0 = $author$project$State$FeedState$allUpToCurrentPage(state.feed);
	if (_v0.$ === 'Just') {
		var page = _v0.a;
		return $author$project$State$GenericPage$isEmpty(page) ? $author$project$View$FeedScreen$renderNoPostPage(state.uiStyle) : A2($author$project$View$FeedScreen$renderPostPage, state, page);
	} else {
		return $author$project$View$FeedScreen$renderLoadingPosts(state.uiStyle);
	}
};
var $author$project$View$FeedScreen$feedScreen = function (state) {
	return A5(
		$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
		state.uiStyle,
		$author$project$View$UIStyle$isMobile(state.device),
		'feed',
		$author$project$Update$Msg$ChangeFeedPage(
			$author$project$Data$Page$next(state.feed.currentPage)),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			_List_fromArray(
				[
					$author$project$View$FeedScreen$renderFeedState(state)
				])));
};
var $author$project$View$AppView$displayFeed = $author$project$View$FeedScreen$feedScreen;
var $author$project$View$LoginScreen$errorMessage = function (err) {
	if (err.$ === 'HttpError') {
		var error = err.a;
		return 'Error Http' + $author$project$Query$QueryUtils$errorToString(error);
	} else {
		return 'Authentication failed';
	}
};
var $author$project$View$Style$errorTextStyle = F2(
	function (ui, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.errorForeground),
					$mdgriffith$elm_ui$Element$Font$italic
				]),
			$mdgriffith$elm_ui$Element$text(txt));
	});
var $author$project$Update$Msg$Logon = F2(
	function (a, b) {
		return {$: 'Logon', a: a, b: b};
	});
var $author$project$View$LoginScreen$attemptLogin = function (state) {
	var _v0 = state.user;
	if (_v0.$ === 'LoggingIn') {
		var email = _v0.a.email;
		var password = _v0.a.password;
		return $elm$core$Maybe$Just(
			A2(
				$author$project$Update$Msg$Logon,
				$author$project$Data$Hash$md5(email),
				$author$project$Data$Hash$md5(password)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$currentPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: $elm$core$Maybe$Just('current-password'),
				spellchecked: false,
				type_: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var $mdgriffith$elm_ui$Element$Input$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnLeft);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$LockOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 10-56 0z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$lockOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$LockOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$lockOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$lockOutlined);
};
var $author$project$View$Icons$password = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$lockOutlined);
var $author$project$View$LoginScreen$readPassword = function (state) {
	var _v0 = state.user;
	if (_v0.$ === 'LoggingIn') {
		var password = _v0.a.password;
		return password;
	} else {
		return '';
	}
};
var $author$project$View$LoginScreen$readUsername = function (state) {
	var _v0 = state.user;
	if (_v0.$ === 'LoggingIn') {
		var email = _v0.a.email;
		return email;
	} else {
		return '@green-gen.org';
	}
};
var $author$project$Update$Msg$EnteringCredentials = F2(
	function (a, b) {
		return {$: 'EnteringCredentials', a: a, b: b};
	});
var $author$project$View$LoginScreen$updatePassword = F2(
	function (state, pw) {
		var _v0 = state.user;
		if (_v0.$ === 'LoggingIn') {
			var email = _v0.a.email;
			return A2($author$project$Update$Msg$EnteringCredentials, email, pw);
		} else {
			return A2($author$project$Update$Msg$EnteringCredentials, '', pw);
		}
	});
var $author$project$View$LoginScreen$updateUsername = F2(
	function (state, user) {
		var _v0 = state.user;
		if (_v0.$ === 'LoggingIn') {
			var password = _v0.a.password;
			return A2($author$project$Update$Msg$EnteringCredentials, user, password);
		} else {
			return A2($author$project$Update$Msg$EnteringCredentials, user, '');
		}
	});
var $mdgriffith$elm_ui$Element$Input$username = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Just('username'),
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$View$LoginScreen$loginComponents = function (state) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$Input$username,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelLeft,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					$author$project$View$Icons$user(state.uiStyle.normal)),
				onChange: $author$project$View$LoginScreen$updateUsername(state),
				placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Username'),
				text: $author$project$View$LoginScreen$readUsername(state)
			}),
			A2(
			$mdgriffith$elm_ui$Element$Input$currentPassword,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelLeft,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					$author$project$View$Icons$password(state.uiStyle.normal)),
				onChange: $author$project$View$LoginScreen$updatePassword(state),
				placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Password'),
				show: false,
				text: $author$project$View$LoginScreen$readPassword(state)
			}),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.appBackground),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Login'),
				onPress: $author$project$View$LoginScreen$attemptLogin(state)
			})
		]);
};
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $author$project$View$LoginScreen$loginFailedScreen = F2(
	function (err, state) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$Border$rounded(20),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
				]),
			A2(
				$elm$core$List$cons,
				A2(
					$author$project$View$Style$errorTextStyle,
					state.uiStyle,
					$author$project$View$LoginScreen$errorMessage(err)),
				$author$project$View$LoginScreen$loginComponents(state)));
	});
var $author$project$View$AppView$displayLoginFailedPage = $author$project$View$LoginScreen$loginFailedScreen;
var $author$project$View$Style$internalPageLinkStyle = F2(
	function (page, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic, $mdgriffith$elm_ui$Element$Font$semiBold]),
			{
				label: $mdgriffith$elm_ui$Element$text(txt),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$DisplayPage(page))
			});
	});
var $author$project$View$LoginScreen$signUpLink = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(5),
				A2($author$project$View$Style$relFontSize, ui, 3),
				$mdgriffith$elm_ui$Element$Font$italic,
				$mdgriffith$elm_ui$Element$Font$color(ui.theme.background)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('If you don\'t have yet an account, please use our '),
				A2($author$project$View$Style$internalPageLinkStyle, $author$project$State$AppState$RegistrationPage, 'Sign-Up'),
				$mdgriffith$elm_ui$Element$text(' page instead.')
			]));
};
var $author$project$View$LoginScreen$loginScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$spacing(30),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$Border$rounded(20),
						$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
						$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
					]),
				$author$project$View$LoginScreen$loginComponents(state)),
				$author$project$View$LoginScreen$signUpLink(state.uiStyle)
			]));
};
var $author$project$View$AppView$displayLoginPage = $author$project$View$LoginScreen$loginScreen;
var $author$project$View$LoggedOffScreen$logoffScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				A2($author$project$View$Style$relFontSize, state.uiStyle, 38),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('You are '),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$Font$italic]),
				$mdgriffith$elm_ui$Element$text('Logged off'))
			]));
};
var $author$project$View$AppView$displayLogoffPage = $author$project$View$LoggedOffScreen$logoffScreen;
var $author$project$State$AppState$WizardNewChallengePage = {$: 'WizardNewChallengePage'};
var $author$project$View$NewPostScreen$wizardButton = F4(
	function (ui, txt, icon, onClick) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$Border$rounded(20)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$spacing(20),
							A2($author$project$View$Style$relFontSize, ui, 10)
						]),
					_List_fromArray(
						[
							icon,
							$mdgriffith$elm_ui$Element$text(txt)
						])),
				onPress: $elm$core$Maybe$Just(onClick)
			});
	});
var $author$project$View$NewPostScreen$newChallengeButton = function (ui) {
	return A4(
		$author$project$View$NewPostScreen$wizardButton,
		ui,
		'Create a new challenge',
		$author$project$View$Icons$challenge(ui.large),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$WizardNewChallengePage));
};
var $author$project$State$AppState$WizardNewEventPage = {$: 'WizardNewEventPage'};
var $author$project$View$NewPostScreen$newEventButton = function (ui) {
	return A4(
		$author$project$View$NewPostScreen$wizardButton,
		ui,
		'Create an event',
		$author$project$View$Icons$event(ui.large),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$WizardNewEventPage));
};
var $author$project$State$AppState$WizardNewFreePostPage = {$: 'WizardNewFreePostPage'};
var $author$project$View$NewPostScreen$newFreeTextButton = function (ui) {
	return A4(
		$author$project$View$NewPostScreen$wizardButton,
		ui,
		'Create a new free text post ',
		$author$project$View$Icons$post(ui.large),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$WizardNewFreePostPage));
};
var $author$project$State$AppState$WizardNewPollPage = {$: 'WizardNewPollPage'};
var $author$project$View$NewPostScreen$newPollButton = function (ui) {
	return A4(
		$author$project$View$NewPostScreen$wizardButton,
		ui,
		'Create a new Poll',
		$author$project$View$Icons$poll(ui.large),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$WizardNewPollPage));
};
var $author$project$State$AppState$WizardNewTipPage = {$: 'WizardNewTipPage'};
var $author$project$View$NewPostScreen$newTipButton = function (ui) {
	return A4(
		$author$project$View$NewPostScreen$wizardButton,
		ui,
		'Create a new Tip',
		$author$project$View$Icons$tip(ui.large),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$WizardNewTipPage));
};
var $author$project$View$NewPostScreen$newPostScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$View$NewPostScreen$newTipButton(state.uiStyle),
				$author$project$View$NewPostScreen$newChallengeButton(state.uiStyle),
				$author$project$View$NewPostScreen$newEventButton(state.uiStyle),
				$author$project$View$NewPostScreen$newPollButton(state.uiStyle),
				$author$project$View$NewPostScreen$newFreeTextButton(state.uiStyle)
			]));
};
var $author$project$View$AppView$displayNewPost = $author$project$View$NewPostScreen$newPostScreen;
var $author$project$Update$Msg$ChangeNotificationPage = function (a) {
	return {$: 'ChangeNotificationPage', a: a};
};
var $author$project$State$PageCache$pageContains = F2(
	function (p, cache) {
		return A2(
			$elm$core$List$any,
			p,
			$elm$core$Dict$values(cache.cache));
	});
var $author$project$State$NotificationState$hasNotifications = function (state) {
	return A2(
		$author$project$State$PageCache$pageContains,
		function (p) {
			return !$elm$core$List$isEmpty(p.notifications);
		},
		state.latest);
};
var $author$project$State$NotificationState$AllTab = {$: 'AllTab'};
var $author$project$Update$Msg$ChangeNotificationTab = function (a) {
	return {$: 'ChangeNotificationTab', a: a};
};
var $author$project$View$NotificationScreen$notifTabButton = F4(
	function (ui, label, msg, selected) {
		return A4($author$project$View$Style$tabButton, ui, label, msg, selected);
	});
var $author$project$View$NotificationScreen$notificationTabs = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(5)
			]),
		_List_fromArray(
			[
				A4(
				$author$project$View$NotificationScreen$notifTabButton,
				state.uiStyle,
				'Unread',
				$author$project$Update$Msg$ChangeNotificationTab($author$project$State$NotificationState$UnreadTab),
				_Utils_eq(state.notifications.currentTab, $author$project$State$NotificationState$UnreadTab)),
				A4(
				$author$project$View$NotificationScreen$notifTabButton,
				state.uiStyle,
				'All',
				$author$project$Update$Msg$ChangeNotificationTab($author$project$State$NotificationState$AllTab),
				_Utils_eq(state.notifications.currentTab, $author$project$State$NotificationState$AllTab))
			]));
};
var $author$project$View$NotificationScreen$renderEmptyNotificationScreen = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'No new notification');
};
var $author$project$State$NotificationState$getAllUpTo = F2(
	function (page, cache) {
		var sortedKeys = A2(
			$author$project$Utils$ListUtils$takeWhile,
			function (key) {
				return _Utils_cmp(
					key,
					$author$project$Data$Page$number(page)) < 1;
			},
			$elm$core$List$sort(
				$elm$core$Dict$keys(cache.cache)));
		var allNotifs = A2(
			$elm$core$List$concatMap,
			function (p) {
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.notifications;
						},
						A2(
							$author$project$State$PageCache$get,
							$author$project$Data$Page$Page(p),
							cache)));
			},
			sortedKeys);
		return $elm$core$List$isEmpty(allNotifs) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			{notifications: allNotifs, number: page});
	});
var $author$project$View$Style$viewEventButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('View event'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$DisplayPage(
						$author$project$State$AppState$EventDetailsPage(id)))
			});
	});
var $author$project$View$NotificationScreen$renderEventCancelledNotification = F2(
	function (ui, eventId) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('You were registered to an event, but it has been ** CANCELLED **'),
					A2($author$project$View$Style$viewEventButtonStyle, ui, eventId)
				]));
	});
var $author$project$View$NotificationScreen$renderEventParticipationAcceptedNotification = F2(
	function (ui, eventId) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('You participation to an event has been accepted'),
					A2($author$project$View$Style$viewEventButtonStyle, ui, eventId)
				]));
	});
var $author$project$View$NotificationScreen$renderEventParticipationRejectedNotification = F2(
	function (ui, eventId) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('You participation to an event has been rejected'),
					A2($author$project$View$Style$viewEventButtonStyle, ui, eventId)
				]));
	});
var $author$project$View$NotificationScreen$renderUserString = F4(
	function (ui, cache, userId, txt) {
		var pseudo = A2(
			$elm$core$Maybe$withDefault,
			'<Unknown>',
			A2($author$project$State$Cache$getUserPseudo, cache, userId));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A3(
					$author$project$View$Style$userStyle,
					ui,
					pseudo,
					$elm$core$Maybe$Just(userId)),
					$mdgriffith$elm_ui$Element$text(txt)
				]));
	});
var $author$project$View$NotificationScreen$renderMaybeUserString = F4(
	function (ui, pseudo, userId, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A3($author$project$View$Style$userStyle, ui, pseudo, userId),
					$mdgriffith$elm_ui$Element$text(txt)
				]));
	});
var $author$project$View$Style$viewChallengeButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('View challenge'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$DisplayPage(
						$author$project$State$AppState$ChallengeDetailsPage(id)))
			});
	});
var $author$project$View$NotificationScreen$renderYouHaveBeenChallengedNotification = F3(
	function (ui, cache, challengeId) {
		var maybeUserId = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.author;
			},
			A2($author$project$State$Cache$getChallenge, cache, challengeId));
		var pseudo = A2(
			$elm$core$Maybe$withDefault,
			'<Unknown>',
			A2(
				$elm$core$Maybe$andThen,
				function (userId) {
					return A2($author$project$State$Cache$getUserPseudo, cache, userId);
				},
				maybeUserId));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A4($author$project$View$NotificationScreen$renderMaybeUserString, ui, pseudo, maybeUserId, ' has challenged you!'),
					A2($author$project$View$Style$viewChallengeButtonStyle, ui, challengeId)
				]));
	});
var $author$project$View$NotificationScreen$renderContent = F3(
	function (ui, cache, notif) {
		var read = _Utils_eq(notif.status, $author$project$Data$Notification$Read);
		var elmt = $mdgriffith$elm_ui$Element$el(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignLeft,
					read ? $mdgriffith$elm_ui$Element$Font$italic : $mdgriffith$elm_ui$Element$Font$semiBold,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]));
		var _v0 = notif.content;
		switch (_v0.$) {
			case 'PlatformMessageNotification':
				var msg = _v0.a;
				return elmt(
					$mdgriffith$elm_ui$Element$text(msg));
			case 'EventModifiedNotification':
				var eventId = _v0.a;
				return elmt(
					$mdgriffith$elm_ui$Element$text('Event has been updated'));
			case 'EventParticipationRequestAcceptedNotification':
				var eventId = _v0.a;
				return elmt(
					A2($author$project$View$NotificationScreen$renderEventParticipationAcceptedNotification, ui, eventId));
			case 'EventParticipationRequestRejectedNotification':
				var eventId = _v0.a;
				return elmt(
					A2($author$project$View$NotificationScreen$renderEventParticipationRejectedNotification, ui, eventId));
			case 'EventCancelledNotification':
				var eventId = _v0.a;
				return elmt(
					A2($author$project$View$NotificationScreen$renderEventCancelledNotification, ui, eventId));
			case 'NewFollowerNotification':
				var userId = _v0.a;
				return elmt(
					A4($author$project$View$NotificationScreen$renderUserString, ui, cache, userId, ' started to follow you'));
			case 'PostLikedNotification':
				var postId = _v0.a;
				var userId = _v0.b;
				return elmt(
					A4($author$project$View$NotificationScreen$renderUserString, ui, cache, userId, ' liked your post'));
			case 'YouHaveBeenChallengedNotification':
				var challengeId = _v0.a;
				return elmt(
					A3($author$project$View$NotificationScreen$renderYouHaveBeenChallengedNotification, ui, cache, challengeId));
			case 'ChallengeAcceptedNotification':
				var challengeId = _v0.a;
				var userId = _v0.b;
				return elmt(
					A4($author$project$View$NotificationScreen$renderUserString, ui, cache, userId, ' has accepted your challenge !'));
			case 'ChallengeRejectedNotification':
				var challengeId = _v0.a;
				var userId = _v0.b;
				return elmt(
					A4($author$project$View$NotificationScreen$renderUserString, ui, cache, userId, ' has rejected your challenge !'));
			default:
				var pollId = _v0.a;
				var userId = _v0.b;
				return elmt(
					A4($author$project$View$NotificationScreen$renderUserString, ui, cache, userId, ' has answered your poll'));
		}
	});
var $author$project$View$Style$notifHeaderStyle = F2(
	function (ui, e) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$Border$rounded(3)
				]),
			e);
	});
var $author$project$Update$Msg$MarkNotificationRead = function (a) {
	return {$: 'MarkNotificationRead', a: a};
};
var $author$project$View$Icons$challengeNotification = $author$project$View$Icons$challenge;
var $author$project$View$Icons$eventNotification = $author$project$View$Icons$event;
var $author$project$Data$Notification$isRead = function (notif) {
	return _Utils_eq(notif.status, $author$project$Data$Notification$Read);
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$UsergroupAddOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M892 772h-80v-80c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v80h-80c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h80v80c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-80h80c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM373.5 498.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 01-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.8-1.7-203.2 89.2-203.2 200 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 008 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.8-1.1 6.4-4.8 5.9-8.8zM824 472c0-109.4-87.9-198.3-196.9-200C516.3 270.3 424 361.2 424 472c0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 00-86.4 60.4C357 742.6 326 814.8 324 891.8a8 8 0 008 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5C505.8 695.7 563 672 624 672c110.4 0 200-89.5 200-200zm-109.5 90.5C690.3 586.7 658.2 600 624 600s-66.3-13.3-90.5-37.5a127.26 127.26 0 01-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4-.1 34.2-13.4 66.3-37.6 90.5z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$usergroupAddOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$UsergroupAddOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$usergroupAddOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$usergroupAddOutlined);
};
var $author$project$View$Icons$newFollowerNotification = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$usergroupAddOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$NotificationFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M880 112c-3.8 0-7.7.7-11.6 2.3L292 345.9H128c-8.8 0-16 7.4-16 16.6v299c0 9.2 7.2 16.6 16 16.6h101.6c-3.7 11.6-5.6 23.9-5.6 36.4 0 65.9 53.8 119.5 120 119.5 55.4 0 102.1-37.6 115.9-88.4l408.6 164.2c3.9 1.5 7.8 2.3 11.6 2.3 16.9 0 32-14.2 32-33.2V145.2C912 126.2 897 112 880 112zM344 762.3c-26.5 0-48-21.4-48-47.8 0-11.2 3.9-21.9 11-30.4l84.9 34.1c-2 24.6-22.7 44.1-47.9 44.1z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$notificationFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$NotificationFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$notificationFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$notificationFilled);
};
var $author$project$View$Icons$platformNotification = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$notificationFilled);
var $author$project$View$Icons$pollNotification = $author$project$View$Icons$challenge;
var $author$project$View$Icons$postNotification = $author$project$View$Icons$like;
var $author$project$View$NotificationScreen$notifLogo = F2(
	function (ui, notif) {
		var logo = function () {
			var _v0 = notif.content;
			switch (_v0.$) {
				case 'PlatformMessageNotification':
					return $author$project$View$Icons$platformNotification(ui.small);
				case 'EventModifiedNotification':
					return $author$project$View$Icons$eventNotification(ui.small);
				case 'EventParticipationRequestAcceptedNotification':
					return $author$project$View$Icons$eventNotification(ui.small);
				case 'EventParticipationRequestRejectedNotification':
					return $author$project$View$Icons$eventNotification(ui.small);
				case 'EventCancelledNotification':
					return $author$project$View$Icons$eventNotification(ui.small);
				case 'NewFollowerNotification':
					return $author$project$View$Icons$newFollowerNotification(ui.small);
				case 'PostLikedNotification':
					return $author$project$View$Icons$postNotification(ui.small);
				case 'YouHaveBeenChallengedNotification':
					return $author$project$View$Icons$challengeNotification(ui.small);
				case 'ChallengeAcceptedNotification':
					return $author$project$View$Icons$challengeNotification(ui.small);
				case 'ChallengeRejectedNotification':
					return $author$project$View$Icons$challengeNotification(ui.small);
				default:
					return $author$project$View$Icons$pollNotification(ui.small);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_Nil,
			{
				label: logo,
				onPress: $author$project$Data$Notification$isRead(notif) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
					$author$project$Update$Msg$MarkNotificationRead(notif.id))
			});
	});
var $author$project$View$NotificationScreen$renderHeader = F2(
	function (state, notif) {
		return A2(
			$author$project$View$Style$notifHeaderStyle,
			state.uiStyle,
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignLeft]),
				A2($author$project$View$NotificationScreen$notifLogo, state.uiStyle, notif)));
	});
var $author$project$View$NotificationScreen$renderTimestamp = F3(
	function (ui, now, notif) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, -2)
				]),
			$mdgriffith$elm_ui$Element$text(
				A2($author$project$Utils$DateUtils$formatRelativeTo, now, notif.created)));
	});
var $author$project$View$NotificationScreen$renderNotification = F2(
	function (state, notif) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2($author$project$View$NotificationScreen$renderHeader, state, notif),
					A3($author$project$View$NotificationScreen$renderTimestamp, state.uiStyle, state.timestamp, notif),
					A3($author$project$View$NotificationScreen$renderContent, state.uiStyle, state.cache, notif)
				]));
	});
var $author$project$View$NotificationScreen$renderNotifications = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$padding(10)
			]),
		A2(
			$elm$core$List$map,
			$author$project$View$NotificationScreen$renderNotification(state),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.notifications;
					},
					A2($author$project$State$NotificationState$getAllUpTo, state.notifications.currentPage, state.notifications.latest)))));
};
var $author$project$View$NotificationScreen$notificationScreen = function (state) {
	return A5(
		$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
		state.uiStyle,
		$author$project$View$UIStyle$isMobile(state.device),
		'notifications',
		$author$project$Update$Msg$ChangeNotificationPage(
			$author$project$Data$Page$next(state.notifications.currentPage)),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			_List_fromArray(
				[
					$author$project$View$NotificationScreen$notificationTabs(state),
					$author$project$State$NotificationState$hasNotifications(state.notifications) ? $author$project$View$NotificationScreen$renderNotifications(state) : $author$project$View$NotificationScreen$renderEmptyNotificationScreen(state.uiStyle)
				])));
};
var $author$project$View$AppView$displayNotification = $author$project$View$NotificationScreen$notificationScreen;
var $author$project$Update$Msg$ChangePinnedPage = function (a) {
	return {$: 'ChangePinnedPage', a: a};
};
var $author$project$State$PinnedState$allUpToCurrentPage = function (state) {
	return A2($author$project$State$PostPageCache$getAllUpTo, state.currentPage, state.postCache);
};
var $author$project$View$PinnedScreen$renderLoadingPosts = function (ui) {
	return A2($author$project$View$PostRenderer$renderLoadingPostPage, ui, 2);
};
var $author$project$View$PinnedScreen$renderNoPinnedPostPage = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'No pinned post');
};
var $author$project$View$PinnedScreen$renderSinglePost = $author$project$View$PostRenderer$renderPostId;
var $author$project$View$PinnedScreen$renderPostPage = F2(
	function (state, page) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$View$PinnedScreen$renderSinglePost, state.uiStyle, state.timestamp, state.cache),
				page.items));
	});
var $author$project$View$PinnedScreen$renderPinnedState = function (state) {
	var _v0 = $author$project$State$PinnedState$allUpToCurrentPage(state.pinned);
	if (_v0.$ === 'Just') {
		var page = _v0.a;
		return $author$project$State$GenericPage$isEmpty(page) ? $author$project$View$PinnedScreen$renderNoPinnedPostPage(state.uiStyle) : A2($author$project$View$PinnedScreen$renderPostPage, state, page);
	} else {
		return $author$project$View$PinnedScreen$renderLoadingPosts(state.uiStyle);
	}
};
var $author$project$View$PinnedScreen$pinnedScreen = function (state) {
	return A5(
		$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
		state.uiStyle,
		$author$project$View$UIStyle$isMobile(state.device),
		'pinned',
		$author$project$Update$Msg$ChangePinnedPage(
			$author$project$Data$Page$next(state.pinned.currentPage)),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			_List_fromArray(
				[
					$author$project$View$PinnedScreen$renderPinnedState(state)
				])));
};
var $author$project$View$AppView$displayPinnedPost = $author$project$View$PinnedScreen$pinnedScreen;
var $author$project$View$RegistrationScreen$fontColor = F2(
	function (ui, b) {
		return $mdgriffith$elm_ui$Element$Font$color(
			b ? ui.theme.enabledButton : ui.theme.disabledButton);
	});
var $author$project$View$RegistrationScreen$createdAccountComponents = function (state) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$text('Congratulations ! You are all set-up !'),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
					A2($author$project$View$RegistrationScreen$fontColor, state.uiStyle, true)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Go to Sign-in page'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$DisplayPage($author$project$State$AppState$LoginPage))
			})
		]);
};
var $author$project$State$FormState$SubmittingRegistration = {$: 'SubmittingRegistration'};
var $author$project$View$RegistrationScreen$isSubmissionPhase = function (state) {
	var submissionState = state.forms.registrationForm.submissionState;
	return _Utils_eq(submissionState, $author$project$State$FormState$FillingNewRegistration) || (_Utils_eq(submissionState, $author$project$State$FormState$SubmittingRegistration) || _Utils_eq(submissionState, $author$project$State$FormState$RegistrationSubmissionFailed));
};
var $author$project$View$RegistrationScreen$isVerificationPhase = function (state) {
	var submissionState = state.forms.registrationForm.submissionState;
	return _Utils_eq(submissionState, $author$project$State$FormState$RegistrationSubmitted) || (_Utils_eq(submissionState, $author$project$State$FormState$SubmittingValidationCode) || _Utils_eq(submissionState, $author$project$State$FormState$ValidationCodeFailed));
};
var $author$project$View$RegistrationScreen$isVerificationSuccessful = function (state) {
	var submissionState = state.forms.registrationForm.submissionState;
	return _Utils_eq(submissionState, $author$project$State$FormState$RegistrationSuccessful);
};
var $author$project$Update$Msg$RegisterNewAccount = {$: 'RegisterNewAccount'};
var $author$project$View$RegistrationScreen$checkEmail = function (state) {
	var _v0 = state.forms.registrationForm.email;
	if (_v0.$ === 'Just') {
		var email = _v0.a;
		return ($elm$core$String$length(email) > 5) && (A2($elm$core$String$contains, '@', email) && (!A2($elm$core$String$contains, ' ', email)));
	} else {
		return true;
	}
};
var $author$project$View$RegistrationScreen$checkIntroduction = function (state) {
	var _v0 = state.forms.registrationForm.introduction;
	if (_v0.$ === 'Just') {
		var intro = _v0.a;
		return ($elm$core$String$length(intro) > 0) && ($elm$core$String$length(intro) <= 5000);
	} else {
		return true;
	}
};
var $author$project$View$RegistrationScreen$checkPassword = function (state) {
	var _v0 = state.forms.registrationForm.password;
	if (_v0.$ === 'Just') {
		var password = _v0.a;
		return $elm$core$String$length(password) > 5;
	} else {
		return true;
	}
};
var $author$project$View$RegistrationScreen$checkPasswordVerification = function (state) {
	var _v0 = state.forms.registrationForm.passwordVerification;
	if (_v0.$ === 'Just') {
		return _Utils_eq(state.forms.registrationForm.password, state.forms.registrationForm.passwordVerification);
	} else {
		return true;
	}
};
var $author$project$View$RegistrationScreen$serverSidePseudoCheck = function (state) {
	var _v0 = state.forms.registrationForm.pseudo;
	if (_v0.$ === 'Just') {
		return state.forms.registrationForm.serverValidatedPseudo;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$View$RegistrationScreen$checkPseudo = function (state) {
	var _v0 = state.forms.registrationForm.pseudo;
	if (_v0.$ === 'Just') {
		var pseudo = _v0.a;
		return ($elm$core$String$length(pseudo) >= 3) && (($elm$core$String$length(pseudo) <= 15) && _Utils_eq(
			$author$project$View$RegistrationScreen$serverSidePseudoCheck(state),
			$elm$core$Maybe$Just(true)));
	} else {
		return true;
	}
};
var $author$project$View$RegistrationScreen$checkRegistrationForm = function (state) {
	return ($author$project$View$RegistrationScreen$checkEmail(state) && $author$project$Utils$MaybeUtils$nonEmpty(state.forms.registrationForm.email)) && (($author$project$View$RegistrationScreen$checkPseudo(state) && ($author$project$Utils$MaybeUtils$nonEmpty(state.forms.registrationForm.pseudo) && _Utils_eq(
		state.forms.registrationForm.serverValidatedPseudo,
		$elm$core$Maybe$Just(true)))) && (($author$project$View$RegistrationScreen$checkPassword(state) && $author$project$Utils$MaybeUtils$nonEmpty(state.forms.registrationForm.password)) && (($author$project$View$RegistrationScreen$checkPasswordVerification(state) && $author$project$Utils$MaybeUtils$nonEmpty(state.forms.registrationForm.passwordVerification)) && ($author$project$View$RegistrationScreen$checkIntroduction(state) && $author$project$Utils$MaybeUtils$nonEmpty(state.forms.registrationForm.introduction)))));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$MailOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 110.8V792H136V270.8l-27.6-21.5 39.3-50.5 42.8 33.3h643.1l42.8-33.3 39.3 50.5-27.7 21.5zM833.6 232L512 482 190.4 232l-42.8-33.3-39.3 50.5 27.6 21.5 341.6 265.6a55.99 55.99 0 0068.7 0L888 270.8l27.6-21.5-39.3-50.5-42.7 33.2z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$mailOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$MailOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$mailOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$mailOutlined);
};
var $author$project$View$Icons$email = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$mailOutlined);
var $author$project$View$RegistrationScreen$isFailedRegistrationSubmission = function (state) {
	var submissionState = state.forms.registrationForm.submissionState;
	return _Utils_eq(submissionState, $author$project$State$FormState$RegistrationSubmissionFailed);
};
var $author$project$View$RegistrationScreen$readEmail = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.forms.registrationForm.email);
};
var $author$project$View$RegistrationScreen$readIntroduction = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.forms.registrationForm.introduction);
};
var $author$project$View$RegistrationScreen$readPassword = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.forms.registrationForm.password);
};
var $author$project$View$RegistrationScreen$readPasswordVerification = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.forms.registrationForm.passwordVerification);
};
var $author$project$View$RegistrationScreen$readPseudo = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.forms.registrationForm.pseudo);
};
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$Update$Msg$FillingRegistrationForm = function (a) {
	return {$: 'FillingRegistrationForm', a: a};
};
var $author$project$View$RegistrationScreen$updateEmail = F2(
	function (state, email) {
		var registrationState = state.forms.registrationForm;
		return $author$project$Update$Msg$FillingRegistrationForm(
			_Utils_update(
				registrationState,
				{
					email: $author$project$Utils$MaybeUtils$maybeString(email)
				}));
	});
var $author$project$View$RegistrationScreen$updateIntroduction = F2(
	function (state, intro) {
		var registrationState = state.forms.registrationForm;
		return $author$project$Update$Msg$FillingRegistrationForm(
			_Utils_update(
				registrationState,
				{
					introduction: $author$project$Utils$MaybeUtils$maybeString(intro)
				}));
	});
var $author$project$View$RegistrationScreen$updatePassword = F2(
	function (state, pw) {
		var registrationState = state.forms.registrationForm;
		return $author$project$Update$Msg$FillingRegistrationForm(
			_Utils_update(
				registrationState,
				{
					password: $author$project$Utils$MaybeUtils$maybeString(pw)
				}));
	});
var $author$project$View$RegistrationScreen$updatePasswordVerification = F2(
	function (state, pw) {
		var registrationState = state.forms.registrationForm;
		return $author$project$Update$Msg$FillingRegistrationForm(
			_Utils_update(
				registrationState,
				{
					passwordVerification: $author$project$Utils$MaybeUtils$maybeString(pw)
				}));
	});
var $author$project$View$RegistrationScreen$updatePseudo = F2(
	function (state, pseudo) {
		var registrationState = state.forms.registrationForm;
		return $author$project$Update$Msg$FillingRegistrationForm(
			_Utils_update(
				registrationState,
				{
					checkingPseudo: $elm$core$Maybe$Just(true),
					pseudo: $author$project$Utils$MaybeUtils$maybeString(pseudo)
				}));
	});
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$CloseCircleOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$closeCircleOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$CloseCircleOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$closeCircleOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$closeCircleOutlined);
};
var $author$project$View$Icons$invalid = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$closeCircleOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$CheckCircleOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$checkCircleOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$CheckCircleOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$checkCircleOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$checkCircleOutlined);
};
var $author$project$View$Icons$valid = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$checkCircleOutlined);
var $author$project$View$RegistrationScreen$validityIcon = F2(
	function (ui, flag) {
		if (flag.$ === 'Just') {
			if (flag.a) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground)
						]),
					$author$project$View$Icons$valid(ui.normal));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground)
						]),
					$author$project$View$Icons$invalid(ui.normal));
			}
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$View$RegistrationScreen$registrationComponents = function (state) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$username,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$color(
							$author$project$View$RegistrationScreen$checkEmail(state) ? state.uiStyle.theme.background : $author$project$View$Theme$darkRed)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
								]),
							$author$project$View$Icons$email(state.uiStyle.normal)),
						onChange: $author$project$View$RegistrationScreen$updateEmail(state),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Email'),
						text: $author$project$View$RegistrationScreen$readEmail(state)
					}),
					A2(
					$author$project$View$RegistrationScreen$validityIcon,
					state.uiStyle,
					A2(
						$elm$core$Maybe$map,
						function (_v0) {
							return $author$project$View$RegistrationScreen$checkEmail(state);
						},
						state.forms.registrationForm.email))
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$color(
							$author$project$View$RegistrationScreen$checkPseudo(state) ? state.uiStyle.theme.background : $author$project$View$Theme$darkRed)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
								]),
							$author$project$View$Icons$user(state.uiStyle.normal)),
						onChange: $author$project$View$RegistrationScreen$updatePseudo(state),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Pseudo'),
						text: $author$project$View$RegistrationScreen$readPseudo(state)
					}),
					A2(
					$author$project$View$RegistrationScreen$validityIcon,
					state.uiStyle,
					$author$project$View$RegistrationScreen$serverSidePseudoCheck(state))
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$currentPassword,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$color(
							$author$project$View$RegistrationScreen$checkPassword(state) ? state.uiStyle.theme.background : $author$project$View$Theme$darkRed)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
								]),
							$author$project$View$Icons$password(state.uiStyle.normal)),
						onChange: $author$project$View$RegistrationScreen$updatePassword(state),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Password'),
						show: false,
						text: $author$project$View$RegistrationScreen$readPassword(state)
					}),
					A2(
					$author$project$View$RegistrationScreen$validityIcon,
					state.uiStyle,
					A2(
						$elm$core$Maybe$map,
						function (_v1) {
							return $author$project$View$RegistrationScreen$checkPassword(state);
						},
						state.forms.registrationForm.password))
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$currentPassword,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$color(
							$author$project$View$RegistrationScreen$checkPasswordVerification(state) ? state.uiStyle.theme.background : $author$project$View$Theme$darkRed)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
								]),
							$author$project$View$Icons$password(state.uiStyle.normal)),
						onChange: $author$project$View$RegistrationScreen$updatePasswordVerification(state),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Retype your password'),
						show: false,
						text: $author$project$View$RegistrationScreen$readPasswordVerification(state)
					}),
					A2(
					$author$project$View$RegistrationScreen$validityIcon,
					state.uiStyle,
					A2(
						$elm$core$Maybe$map,
						function (_v2) {
							return $author$project$View$RegistrationScreen$checkPasswordVerification(state);
						},
						state.forms.registrationForm.passwordVerification))
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
						]),
					$mdgriffith$elm_ui$Element$text('Introduce yourself')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					A2(
						$author$project$View$RegistrationScreen$validityIcon,
						state.uiStyle,
						A2(
							$elm$core$Maybe$map,
							function (_v3) {
								return $author$project$View$RegistrationScreen$checkIntroduction(state);
							},
							state.forms.registrationForm.introduction)))
				])),
			A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(150)),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$color(
					$author$project$View$RegistrationScreen$checkIntroduction(state) ? state.uiStyle.theme.background : $author$project$View$Theme$darkRed)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Introduction'),
				onChange: $author$project$View$RegistrationScreen$updateIntroduction(state),
				placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Tell others who you are ...'),
				spellcheck: true,
				text: $author$project$View$RegistrationScreen$readIntroduction(state)
			}),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					$author$project$View$RegistrationScreen$isFailedRegistrationSubmission(state) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$darkRed),
							$mdgriffith$elm_ui$Element$alignLeft
						]),
					$mdgriffith$elm_ui$Element$text('Registration failed')) : $author$project$View$Style$empty,
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$padding(5),
							A2(
							$author$project$View$RegistrationScreen$fontColor,
							state.uiStyle,
							$author$project$View$RegistrationScreen$checkRegistrationForm(state)),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground)
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('Sign-up now !'),
						onPress: $author$project$View$RegistrationScreen$checkRegistrationForm(state) ? $elm$core$Maybe$Just($author$project$Update$Msg$RegisterNewAccount) : $elm$core$Maybe$Nothing
					})
				]))
		]);
};
var $author$project$View$RegistrationScreen$signIngLink = function (ui) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(5),
				A2($author$project$View$Style$relFontSize, ui, 3),
				$mdgriffith$elm_ui$Element$Font$italic,
				$mdgriffith$elm_ui$Element$Font$color(ui.theme.background)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('If you already have an account with us, please use our '),
				A2($author$project$View$Style$internalPageLinkStyle, $author$project$State$AppState$LoginPage, 'Sign-in'),
				$mdgriffith$elm_ui$Element$text(' page instead.')
			]));
};
var $author$project$Update$Msg$VerifyAccount = {$: 'VerifyAccount'};
var $author$project$View$RegistrationScreen$checkVerificationCodeForm = function (state) {
	var _v0 = state.forms.registrationForm.verification;
	if (_v0.$ === 'Just') {
		var _v1 = _v0.a;
		var s1 = _v1.a;
		var s2 = _v1.b;
		var s3 = _v1.c;
		return (s1 >= 0) && ((s1 <= 9999) && ((s2 >= 0) && ((s2 <= 9999) && ((s3 >= 0) && (s3 <= 9999)))));
	} else {
		return false;
	}
};
var $author$project$View$RegistrationScreen$isFailedVerification = function (state) {
	var submissionState = state.forms.registrationForm.submissionState;
	return _Utils_eq(submissionState, $author$project$State$FormState$ValidationCodeFailed);
};
var $author$project$View$RegistrationScreen$readVerificationCodeSection = F2(
	function (state, section) {
		var _v0 = state.forms.registrationForm.verification;
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var s1 = _v1.a;
			var s2 = _v1.b;
			var s3 = _v1.c;
			return (section === 1) ? $author$project$Utils$TextUtils$format4Digits(s1) : ((section === 2) ? $author$project$Utils$TextUtils$format4Digits(s2) : $author$project$Utils$TextUtils$format4Digits(s3));
		} else {
			return '';
		}
	});
var $author$project$Data$VerificationCode$VerificationCode = F3(
	function (a, b, c) {
		return {$: 'VerificationCode', a: a, b: b, c: c};
	});
var $author$project$Data$VerificationCode$updateSection = F3(
	function (_v0, section, updated) {
		var s1 = _v0.a;
		var s2 = _v0.b;
		var s3 = _v0.c;
		switch (section) {
			case 1:
				return A3($author$project$Data$VerificationCode$VerificationCode, updated, s2, s3);
			case 2:
				return A3($author$project$Data$VerificationCode$VerificationCode, s1, updated, s3);
			case 3:
				return A3($author$project$Data$VerificationCode$VerificationCode, s1, s2, updated);
			default:
				return A3($author$project$Data$VerificationCode$VerificationCode, s1, s2, s3);
		}
	});
var $author$project$View$RegistrationScreen$updateVerificationCode = F3(
	function (state, section, codeStr) {
		var registrationState = state.forms.registrationForm;
		var verifCode = A2(
			$elm$core$Maybe$withDefault,
			A3($author$project$Data$VerificationCode$VerificationCode, 0, 0, 0),
			registrationState.verification);
		var code = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$String$toInt(codeStr));
		return $author$project$Update$Msg$FillingRegistrationForm(
			_Utils_update(
				registrationState,
				{
					verification: $elm$core$Maybe$Just(
						A3($author$project$Data$VerificationCode$updateSection, verifCode, section, code))
				}));
	});
var $author$project$View$RegistrationScreen$verificationComponents = function (state) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Please enter the verification code we just sent you')
				])),
			A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(20)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(100))
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('Section1'),
						onChange: A2($author$project$View$RegistrationScreen$updateVerificationCode, state, 1),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, '0000'),
						text: A2($author$project$View$RegistrationScreen$readVerificationCodeSection, state, 1)
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(100))
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('Section2'),
						onChange: A2($author$project$View$RegistrationScreen$updateVerificationCode, state, 2),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, '0000'),
						text: A2($author$project$View$RegistrationScreen$readVerificationCodeSection, state, 2)
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(100))
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('Section3'),
						onChange: A2($author$project$View$RegistrationScreen$updateVerificationCode, state, 3),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, '0000'),
						text: A2($author$project$View$RegistrationScreen$readVerificationCodeSection, state, 3)
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					$author$project$View$RegistrationScreen$isFailedVerification(state) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$darkRed),
							$mdgriffith$elm_ui$Element$alignLeft
						]),
					$mdgriffith$elm_ui$Element$text('Verification failed. Please try again')) : $author$project$View$Style$empty,
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$padding(5),
							A2(
							$author$project$View$RegistrationScreen$fontColor,
							state.uiStyle,
							$author$project$View$RegistrationScreen$checkVerificationCodeForm(state)),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($author$project$View$RegistrationScreen$fontColor, state.uiStyle, true)
								]),
							$mdgriffith$elm_ui$Element$text('Verify')),
						onPress: $author$project$View$RegistrationScreen$checkVerificationCodeForm(state) ? $elm$core$Maybe$Just($author$project$Update$Msg$VerifyAccount) : $elm$core$Maybe$Nothing
					})
				]))
		]);
};
var $author$project$View$RegistrationScreen$registrationScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$spacing(30),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						A2($author$project$View$Style$relFontSize, state.uiStyle, 15),
						$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background),
						$mdgriffith$elm_ui$Element$Font$semiBold
					]),
				$mdgriffith$elm_ui$Element$text('Create a new account')),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$Border$rounded(20),
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
						$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground)
					]),
				$author$project$View$RegistrationScreen$isSubmissionPhase(state) ? $author$project$View$RegistrationScreen$registrationComponents(state) : ($author$project$View$RegistrationScreen$isVerificationPhase(state) ? $author$project$View$RegistrationScreen$verificationComponents(state) : ($author$project$View$RegistrationScreen$isVerificationSuccessful(state) ? $author$project$View$RegistrationScreen$createdAccountComponents(state) : $author$project$View$RegistrationScreen$registrationComponents(state)))),
				$author$project$View$RegistrationScreen$signIngLink(state.uiStyle)
			]));
};
var $author$project$View$AppView$displayRegistrationPage = $author$project$View$RegistrationScreen$registrationScreen;
var $author$project$View$SearchScreen$above = F2(
	function (el1, el2) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[el1, el2]));
	});
var $author$project$State$Cache$containsFollowingHashtag = F2(
	function (cache, hashtag) {
		return A2(
			$elm$core$Set$member,
			$author$project$Data$Hashtag$toString(hashtag),
			cache.followingHashtags);
	});
var $author$project$Update$Msg$FollowHashtag = function (a) {
	return {$: 'FollowHashtag', a: a};
};
var $author$project$View$Style$followHashtagStyle = F2(
	function (ui, ht) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2($author$project$View$Style$hashtagStyle, ui, ht),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 1),
							A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$rounded(5)
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('Follow'),
						onPress: $elm$core$Maybe$Just(
							$author$project$Update$Msg$FollowHashtag(ht))
					})
				]));
	});
var $author$project$State$SearchState$ChallengePosts = {$: 'ChallengePosts'};
var $author$project$State$SearchState$EventPosts = {$: 'EventPosts'};
var $author$project$State$SearchState$FreeTextPosts = {$: 'FreeTextPosts'};
var $author$project$State$SearchState$PollPosts = {$: 'PollPosts'};
var $author$project$State$SearchState$TipPosts = {$: 'TipPosts'};
var $author$project$State$SearchState$allPostTypes = _List_fromArray(
	[$author$project$State$SearchState$AllPostTypes, $author$project$State$SearchState$TipPosts, $author$project$State$SearchState$ChallengePosts, $author$project$State$SearchState$EventPosts, $author$project$State$SearchState$PollPosts, $author$project$State$SearchState$FreeTextPosts]);
var $author$project$Update$Msg$ChangeSearchPostTypeFilter = function (a) {
	return {$: 'ChangeSearchPostTypeFilter', a: a};
};
var $author$project$View$SearchScreen$renderPostTypeTab = F3(
	function (ui, pt, selected) {
		var renderTabButton = function (label) {
			return A4(
				$author$project$View$Style$tabButton,
				ui,
				label,
				$author$project$Update$Msg$ChangeSearchPostTypeFilter(pt),
				selected);
		};
		switch (pt.$) {
			case 'AllPostTypes':
				return renderTabButton('All');
			case 'TipPosts':
				return renderTabButton('Tips');
			case 'ChallengePosts':
				return renderTabButton('Challenges');
			case 'EventPosts':
				return renderTabButton('Events');
			case 'PollPosts':
				return renderTabButton('Polls');
			default:
				return renderTabButton('Free posts');
		}
	});
var $author$project$View$SearchScreen$renderPostSearchFilterTabs = F2(
	function (ui, filter) {
		var _v0 = $author$project$State$SearchState$postTypeFilter(filter);
		if (_v0.$ === 'Nothing') {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var pt = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$wrappedRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignLeft,
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				A2(
					$elm$core$List$map,
					function (x) {
						return A3(
							$author$project$View$SearchScreen$renderPostTypeTab,
							ui,
							x,
							_Utils_eq(x, pt));
					},
					$author$project$State$SearchState$allPostTypes));
		}
	});
var $author$project$Update$Msg$UnfollowHashtag = function (a) {
	return {$: 'UnfollowHashtag', a: a};
};
var $author$project$View$Style$unfollowHashtagStyle = F2(
	function (ui, ht) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2($author$project$View$Style$hashtagStyle, ui, ht),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 1),
							A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$rounded(5)
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('Unfollow'),
						onPress: $elm$core$Maybe$Just(
							$author$project$Update$Msg$UnfollowHashtag(ht))
					})
				]));
	});
var $author$project$View$SearchScreen$renderSearchFilter = F3(
	function (ui, cache, filter) {
		switch (filter.$) {
			case 'EmptySearch':
				return $author$project$View$Style$empty;
			case 'ByUserPrefix':
				return $author$project$View$Style$empty;
			case 'ByHashtag':
				if (!filter.a.b) {
					return $author$project$View$Style$empty;
				} else {
					var hashtags = filter.a;
					return A2(
						$author$project$View$SearchScreen$above,
						A2($author$project$View$SearchScreen$renderPostSearchFilterTabs, ui, filter),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10),
									$mdgriffith$elm_ui$Element$padding(10)
								]),
							A2(
								$elm$core$List$map,
								function (ht) {
									return A2($author$project$State$Cache$containsFollowingHashtag, cache, ht) ? A2($author$project$View$Style$unfollowHashtagStyle, ui, ht) : A2($author$project$View$Style$followHashtagStyle, ui, ht);
								},
								hashtags)));
				}
			default:
				var userId = filter.a;
				var pseudo = A2(
					$elm$core$Maybe$withDefault,
					$author$project$Data$User$toString(userId),
					A2($author$project$State$Cache$getUserPseudo, cache, userId));
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$italic, $mdgriffith$elm_ui$Element$Font$semiBold]),
							$mdgriffith$elm_ui$Element$text(pseudo))
						]));
		}
	});
var $author$project$Update$Msg$ChangeSearchPostPage = function (a) {
	return {$: 'ChangeSearchPostPage', a: a};
};
var $author$project$State$SearchState$allUpToCurrentPostPage = function (state) {
	return A2($author$project$State$PostPageCache$getAllUpTo, state.currentPage, state.postCache);
};
var $mdgriffith$elm_ui$Element$modular = F3(
	function (normal, ratio, rescale) {
		return (!rescale) ? normal : ((rescale < 0) ? (normal * A2($elm$core$Basics$pow, ratio, rescale)) : (normal * A2($elm$core$Basics$pow, ratio, rescale - 1)));
	});
var $author$project$View$SearchScreen$computeFontFromWindowSize = function (_v0) {
	var width = _v0.width;
	var height = _v0.height;
	var scaled = A2($mdgriffith$elm_ui$Element$modular, 48, 1.25);
	var refWindowWidth = 200;
	return $elm$core$Basics$round(
		scaled((width / refWindowWidth) | 0));
};
var $author$project$View$Style$hashtagCloudStyle = function (ht) {
	var tag = ht.a;
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[$mdgriffith$elm_ui$Element$Font$italic, $mdgriffith$elm_ui$Element$Font$semiBold]),
		{
			label: $mdgriffith$elm_ui$Element$text('#' + tag),
			onPress: $elm$core$Maybe$Just(
				$author$project$Update$Msg$PerformSearchFromHashtag(ht))
		});
};
var $author$project$Utils$ListUtils$rotate = function (xs) {
	if (!xs.b) {
		return _List_Nil;
	} else {
		var x = xs.a;
		var rest = xs.b;
		return _Utils_ap(
			rest,
			_List_fromArray(
				[x]));
	}
};
var $author$project$Utils$ListUtils$rotaten = F2(
	function (n, xs) {
		rotaten:
		while (true) {
			if (n > 0) {
				var $temp$n = n - 1,
					$temp$xs = $author$project$Utils$ListUtils$rotate(xs);
				n = $temp$n;
				xs = $temp$xs;
				continue rotaten;
			} else {
				return xs;
			}
		}
	});
var $author$project$View$Chart$WordCloud$cycle = F2(
	function (n, _v0) {
		var _default = _v0._default;
		var colors = _v0.colors;
		return {
			colors: A2($author$project$Utils$ListUtils$rotaten, n, colors),
			_default: _default
		};
	});
var $author$project$Utils$ListUtils$split2 = function (xs) {
	if (!xs.b) {
		return _Utils_Tuple2(_List_Nil, _List_Nil);
	} else {
		if (!xs.b.b) {
			var x = xs.a;
			return _Utils_Tuple2(
				_List_fromArray(
					[x]),
				_List_Nil);
		} else {
			var x = xs.a;
			var _v1 = xs.b;
			var y = _v1.a;
			var ys = _v1.b;
			var _v2 = $author$project$Utils$ListUtils$split2(ys);
			var left = _v2.a;
			var right = _v2.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, x, left),
				A2($elm$core$List$cons, y, right));
		}
	}
};
var $author$project$View$Chart$WordCloud$split4 = function (xs) {
	var _v0 = $author$project$Utils$ListUtils$split2(xs);
	var first = _v0.a;
	var second = _v0.b;
	var _v1 = _Utils_Tuple2(
		$author$project$Utils$ListUtils$split2(first),
		$author$project$Utils$ListUtils$split2(second));
	var _v2 = _v1.a;
	var s1 = _v2.a;
	var s2 = _v2.b;
	var _v3 = _v1.b;
	var s3 = _v3.a;
	var s4 = _v3.b;
	return {first: s1, fourth: s4, second: s2, third: s3};
};
var $author$project$View$Chart$WordCloud$recWordCloud = F4(
	function (toElement, scheme, maxSize, tags) {
		var size = A2($elm$core$Basics$max, 5, maxSize);
		if (!tags.b) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var _v1 = tags.a;
			var ht = _v1.b;
			var rest = tags.b;
			var _v2 = $author$project$View$Chart$WordCloud$split4(rest);
			var first = _v2.first;
			var second = _v2.second;
			var third = _v2.third;
			var fourth = _v2.fourth;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignLeft, $mdgriffith$elm_ui$Element$alignBottom]),
								A4(
									$author$project$View$Chart$WordCloud$recWordCloud,
									toElement,
									A2($author$project$View$Chart$WordCloud$cycle, 1, scheme),
									((size / 2) | 0) + 1,
									first)),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$alignTop]),
								A4(
									$author$project$View$Chart$WordCloud$recWordCloud,
									toElement,
									A2($author$project$View$Chart$WordCloud$cycle, 4, scheme),
									((size / 2) | 0) - 2,
									fourth))
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$size(size),
										$mdgriffith$elm_ui$Element$Font$color(
										A2($author$project$View$Chart$ColorScheme$colorAt, 1, scheme))
									]),
								toElement(ht))
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignLeft, $mdgriffith$elm_ui$Element$alignTop]),
								A4(
									$author$project$View$Chart$WordCloud$recWordCloud,
									toElement,
									A2($author$project$View$Chart$WordCloud$cycle, 3, scheme),
									((size / 2) | 0) - 2,
									third)),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$alignBottom]),
								A4(
									$author$project$View$Chart$WordCloud$recWordCloud,
									toElement,
									A2($author$project$View$Chart$WordCloud$cycle, 4, scheme),
									((size / 2) | 0) + 1,
									second))
							]))
					]));
		}
	});
var $author$project$View$Chart$WordCloud$wordCloud = F4(
	function (toElement, scheme, maxSize, tags) {
		var desc = $elm$core$List$reverse(
			A2($elm$core$List$sortBy, $elm$core$Tuple$first, tags));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY
				]),
			A4($author$project$View$Chart$WordCloud$recWordCloud, toElement, scheme, maxSize, desc));
	});
var $author$project$View$Chart$WordCloud$hashtagCloud = F3(
	function (scheme, maxSize, tags) {
		return A4(
			$author$project$View$Chart$WordCloud$wordCloud,
			function (ht) {
				return $author$project$View$Style$hashtagCloudStyle(ht);
			},
			scheme,
			maxSize,
			tags);
	});
var $author$project$View$SearchScreen$renderHashtagCloud = function (state) {
	var whiteScheme = {
		colors: _List_fromArray(
			[state.uiStyle.theme.foreground]),
		_default: state.uiStyle.theme.foreground
	};
	var fontSize = $author$project$View$SearchScreen$computeFontFromWindowSize(state.windowSize);
	return A2(
		$elm$core$Maybe$withDefault,
		$mdgriffith$elm_ui$Element$none,
		A2(
			$elm$core$Maybe$map,
			$mdgriffith$elm_ui$Element$el(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$padding(20)
					])),
			A2(
				$elm$core$Maybe$map,
				$mdgriffith$elm_ui$Element$el(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
							$mdgriffith$elm_ui$Element$Border$rounded(20)
						])),
				A2(
					$elm$core$Maybe$map,
					function (trend) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
							A3($author$project$View$Chart$WordCloud$hashtagCloud, whiteScheme, fontSize, trend));
					},
					state.cache.hashtagTrend))));
};
var $author$project$View$SearchScreen$renderLoadingPosts = function (ui) {
	return A2($author$project$View$PostRenderer$renderLoadingPostPage, ui, 2);
};
var $author$project$View$SearchScreen$renderSinglePost = $author$project$View$PostRenderer$renderPostId;
var $author$project$View$SearchScreen$renderPostPage = F2(
	function (state, page) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$View$SearchScreen$renderSinglePost, state.uiStyle, state.timestamp, state.cache),
				page.items));
	});
var $author$project$View$SearchScreen$renderPostSearchState = function (state) {
	var _v0 = $author$project$State$SearchState$allUpToCurrentPostPage(state.search);
	if (_v0.$ === 'Just') {
		var page = _v0.a;
		return $author$project$State$GenericPage$isEmpty(page) ? $author$project$View$SearchScreen$renderHashtagCloud(state) : A5(
			$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
			state.uiStyle,
			$author$project$View$UIStyle$isMobile(state.device),
			'search-posts',
			$author$project$Update$Msg$ChangeSearchPostPage(
				$author$project$Data$Page$next(state.search.currentPage)),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				A2($author$project$View$SearchScreen$renderPostPage, state, page)));
	} else {
		return $author$project$View$SearchScreen$renderLoadingPosts(state.uiStyle);
	}
};
var $author$project$State$SearchState$allUpToCurrentUserPage = function (state) {
	return A2($author$project$State$UserPageCache$getAllUpTo, state.currentPage, state.userCache);
};
var $author$project$View$SearchScreen$renderLoadingUsers = function (ui) {
	return A2($author$project$View$UserListRenderer$renderLoadingUserPage, ui, 2);
};
var $author$project$View$SearchScreen$renderNoResultPage = function (ui) {
	return A2($author$project$View$ScreenUtils$emptyScreen, ui, 'No results');
};
var $author$project$View$SearchScreen$renderSingleUser = function (ui) {
	return $author$project$View$UserListRenderer$renderUserId(ui);
};
var $author$project$View$SearchScreen$renderUserPage = F3(
	function (ui, cache, page) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				A2($author$project$View$SearchScreen$renderSingleUser, ui, cache),
				page.items));
	});
var $author$project$View$SearchScreen$renderUserSearchState = function (state) {
	var _v0 = $author$project$State$SearchState$allUpToCurrentUserPage(state.search);
	if (_v0.$ === 'Just') {
		var page = _v0.a;
		return $author$project$State$GenericPage$isEmpty(page) ? $author$project$View$SearchScreen$renderNoResultPage(state.uiStyle) : A5(
			$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
			state.uiStyle,
			$author$project$View$UIStyle$isMobile(state.device),
			'search-users',
			$author$project$Update$Msg$ChangeSearchPostPage(
				$author$project$Data$Page$next(state.search.currentPage)),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				A3($author$project$View$SearchScreen$renderUserPage, state.uiStyle, state.cache, page)));
	} else {
		return $author$project$View$SearchScreen$renderLoadingUsers(state.uiStyle);
	}
};
var $author$project$View$SearchScreen$renderSearchState = function (state) {
	return $author$project$State$SearchState$isPostSearchFilter(state.search.filter) ? $author$project$View$SearchScreen$renderPostSearchState(state) : $author$project$View$SearchScreen$renderUserSearchState(state);
};
var $author$project$View$SearchScreen$searchScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$padding(5)
			]),
		_List_fromArray(
			[
				A3($author$project$View$SearchScreen$renderSearchFilter, state.uiStyle, state.cache, state.search.filter),
				$author$project$View$SearchScreen$renderSearchState(state)
			]));
};
var $author$project$View$AppView$displaySearch = $author$project$View$SearchScreen$searchScreen;
var $author$project$Update$Msg$ChangeWallPage = function (a) {
	return {$: 'ChangeWallPage', a: a};
};
var $author$project$Data$Rank$emptyBreakdown = {fromEvents: 0, fromFollows: 0, fromLikes: 0, fromPosts: 0};
var $author$project$Data$Rank$BlackBelt = {$: 'BlackBelt'};
var $author$project$Data$Rank$Converted = {$: 'Converted'};
var $author$project$Data$Rank$Evangelist = {$: 'Evangelist'};
var $author$project$Data$Rank$Expert = {$: 'Expert'};
var $author$project$Data$Rank$GaiaFriend = {$: 'GaiaFriend'};
var $author$project$Data$Rank$GreenWood = {$: 'GreenWood'};
var $author$project$Data$Rank$Guru = {$: 'Guru'};
var $author$project$Data$Rank$Hanshi = {$: 'Hanshi'};
var $author$project$Data$Rank$Influencer = {$: 'Influencer'};
var $author$project$Data$Rank$OSensei = {$: 'OSensei'};
var $author$project$Data$Rank$Sensei = {$: 'Sensei'};
var $author$project$Data$Rank$Shihan = {$: 'Shihan'};
var $author$project$Data$Rank$maxScore = function (rank) {
	switch (rank.$) {
		case 'GreenWood':
			return 10;
		case 'GaiaFriend':
			return 100;
		case 'Converted':
			return 250;
		case 'Influencer':
			return 1000;
		case 'Evangelist':
			return 5000;
		case 'Expert':
			return 10000;
		case 'BlackBelt':
			return 25000;
		case 'Sensei':
			return 50000;
		case 'Shihan':
			return 100000;
		case 'Hanshi':
			return 250000;
		case 'OSensei':
			return 500000;
		default:
			return 1000000;
	}
};
var $author$project$Data$Rank$fromScore = function (_v0) {
	var amount = _v0.a;
	return (_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$GreenWood)) < 0) ? $author$project$Data$Rank$GreenWood : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$GaiaFriend)) < 0) ? $author$project$Data$Rank$GaiaFriend : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$Converted)) < 0) ? $author$project$Data$Rank$Converted : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$Influencer)) < 0) ? $author$project$Data$Rank$Influencer : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$Evangelist)) < 0) ? $author$project$Data$Rank$Evangelist : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$Expert)) < 0) ? $author$project$Data$Rank$Expert : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$BlackBelt)) < 0) ? $author$project$Data$Rank$BlackBelt : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$Sensei)) < 0) ? $author$project$Data$Rank$Sensei : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$Shihan)) < 0) ? $author$project$Data$Rank$Shihan : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$Hanshi)) < 0) ? $author$project$Data$Rank$Hanshi : ((_Utils_cmp(
		amount,
		$author$project$Data$Rank$maxScore($author$project$Data$Rank$OSensei)) < 0) ? $author$project$Data$Rank$OSensei : $author$project$Data$Rank$Guru))))))))));
};
var $author$project$State$Cache$getScoreBreakdown = F2(
	function (cache, id) {
		return A2(
			$elm$core$Dict$get,
			$author$project$Data$User$toString(id),
			cache.scores);
	});
var $author$project$State$Cache$isPartner = F2(
	function (cache, userId) {
		return $author$project$Utils$MaybeUtils$nonEmpty(
			A2(
				$author$project$Utils$ListUtils$find,
				function (p) {
					return _Utils_eq(p.userId, userId);
				},
				$elm$core$Dict$values(cache.partners)));
	});
var $author$project$Data$Rank$next = function (rank) {
	switch (rank.$) {
		case 'GreenWood':
			return $author$project$Data$Rank$GaiaFriend;
		case 'GaiaFriend':
			return $author$project$Data$Rank$Converted;
		case 'Converted':
			return $author$project$Data$Rank$Influencer;
		case 'Influencer':
			return $author$project$Data$Rank$Evangelist;
		case 'Evangelist':
			return $author$project$Data$Rank$Expert;
		case 'Expert':
			return $author$project$Data$Rank$BlackBelt;
		case 'BlackBelt':
			return $author$project$Data$Rank$Sensei;
		case 'Sensei':
			return $author$project$Data$Rank$Shihan;
		case 'Shihan':
			return $author$project$Data$Rank$Hanshi;
		case 'Hanshi':
			return $author$project$Data$Rank$OSensei;
		case 'OSensei':
			return $author$project$Data$Rank$Guru;
		default:
			return $author$project$Data$Rank$Guru;
	}
};
var $author$project$Data$Rank$Score = function (a) {
	return {$: 'Score', a: a};
};
var $author$project$Data$Rank$score = function (breakdown) {
	return $author$project$Data$Rank$Score(((breakdown.fromLikes + breakdown.fromPosts) + breakdown.fromFollows) + breakdown.fromEvents);
};
var $author$project$View$WallScreen$renderChart = F2(
	function (ui, breakdown) {
		var score = $author$project$Data$Rank$score(breakdown);
		var remaining = ui.theme.remainingProgressColor;
		var rank = $author$project$Data$Rank$fromScore(score);
		var progress = ui.theme.progressColor;
		var nextRankScore = $author$project$Data$Rank$maxScore(
			$author$project$Data$Rank$next(rank));
		var fromPosts = breakdown.fromPosts;
		var fromLikes = breakdown.fromLikes;
		var fromFollows = breakdown.fromFollows;
		var fromEvents = breakdown.fromEvents;
		var remainder = A2($elm$core$Basics$max, 0.0, nextRankScore - (((fromLikes + fromFollows) + fromPosts) + fromEvents));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$author$project$View$Chart$Donut$smallDonut,
					ui,
					_List_fromArray(
						[
							_Utils_Tuple2(((fromLikes + fromFollows) + fromPosts) + fromEvents, progress),
							_Utils_Tuple2(remainder, remaining)
						])),
					A3(
					$author$project$View$Chart$ChartUtils$legend,
					ui,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, -1)
						]),
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Likes: ' + $elm$core$String$fromFloat(fromLikes),
							progress),
							_Utils_Tuple2(
							'Follow: ' + $elm$core$String$fromFloat(fromFollows),
							progress),
							_Utils_Tuple2(
							'Posts: ' + $elm$core$String$fromFloat(fromPosts),
							progress),
							_Utils_Tuple2(
							'Event: ' + $elm$core$String$fromFloat(fromEvents),
							progress),
							_Utils_Tuple2(
							'Remaining: ' + $elm$core$String$fromFloat(remainder),
							remaining)
						]))
				]));
	});
var $author$project$View$WallScreen$followButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Follow'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$FollowUser(id))
			});
	});
var $author$project$View$WallScreen$unfollowButtonStyle = F2(
	function (ui, id) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($author$project$View$Style$relFontSize, ui, 1),
					A2($mdgriffith$elm_ui$Element$paddingXY, 2, 2),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Unfollow'),
				onPress: $elm$core$Maybe$Just(
					$author$project$Update$Msg$UnfollowUser(id))
			});
	});
var $author$project$View$WallScreen$renderFollowingButton = F3(
	function (ui, cache, maybeUserId) {
		return A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$none,
			A2(
				$elm$core$Maybe$map,
				function (userId) {
					return A2($author$project$State$Cache$containsFollowingUser, cache, userId) ? A2($author$project$View$WallScreen$unfollowButtonStyle, ui, userId) : A2($author$project$View$WallScreen$followButtonStyle, ui, userId);
				},
				maybeUserId));
	});
var $author$project$Data$Rank$toString = $elm$core$Debug$toString;
var $author$project$View$WallScreen$renderMobileUserHeader = function (state) {
	var maybeUser = A2(
		$elm$core$Maybe$andThen,
		$author$project$State$Cache$getUser(state.cache),
		state.wall.user);
	var pseudo = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingFixedTextLine, state.uiStyle, 12, 100),
		A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.pseudo;
				},
				A2(
					$elm$core$Basics$composeR,
					$mdgriffith$elm_ui$Element$text,
					$mdgriffith$elm_ui$Element$el(
						_List_fromArray(
							[
								A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
								$mdgriffith$elm_ui$Element$Font$semiBold
							])))),
			maybeUser));
	var scoreBreakdown = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Data$Rank$emptyBreakdown,
		A2(
			$elm$core$Maybe$andThen,
			$author$project$State$Cache$getScoreBreakdown(state.cache),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				maybeUser)));
	var score = $author$project$Data$Rank$score(scoreBreakdown);
	var rank = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingFixedTextLine, state.uiStyle, 12, 50),
		A2(
			$elm$core$Maybe$map,
			function (_v0) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 0),
							$mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$centerY
						]),
					$mdgriffith$elm_ui$Element$text(
						$author$project$Data$Rank$toString(
							$author$project$Data$Rank$fromScore(score))));
			},
			maybeUser));
	var since = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingFixedTextLine, state.uiStyle, 12, 100),
		A2(
			$elm$core$Maybe$map,
			function (txt) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$centerY
						]),
					$mdgriffith$elm_ui$Element$text('Since ' + txt));
			},
			A2(
				$elm$core$Maybe$map,
				function (x) {
					return $author$project$Utils$DateUtils$formatDate(x.since);
				},
				maybeUser)));
	var isPartner = A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			$author$project$State$Cache$isPartner(state.cache),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				maybeUser)));
	var introduction = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingTextBlock, state.uiStyle, 12, 4),
		A2(
			$elm$core$Maybe$map,
			$mdgriffith$elm_ui$Element$paragraph(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
						$mdgriffith$elm_ui$Element$Font$italic
					])),
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.introduction;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$View$Style$multiLineQuotedText(state.uiStyle),
						$elm$core$List$singleton)),
				maybeUser)));
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground),
								$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
								$mdgriffith$elm_ui$Element$Border$rounded(10)
							]),
						$author$project$View$Icons$user(state.uiStyle.large)),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Border$color(state.uiStyle.theme.background)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5),
										$mdgriffith$elm_ui$Element$centerY
									]),
								_List_fromArray(
									[
										pseudo,
										A3($author$project$View$WallScreen$renderFollowingButton, state.uiStyle, state.cache, state.wall.user)
									])),
								rank,
								since,
								isPartner ? A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$semiBold,
										$mdgriffith$elm_ui$Element$Font$italic,
										$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$darkOrange),
										A2($author$project$View$Style$relFontSize, state.uiStyle, 1)
									]),
								$mdgriffith$elm_ui$Element$text('Partnership')) : $mdgriffith$elm_ui$Element$none
							])),
						A2($author$project$View$Style$verticalSeparator, 1, state.uiStyle.theme.background),
						A2($author$project$View$WallScreen$renderChart, state.uiStyle, scoreBreakdown)
					])),
				A2($author$project$View$Style$horizontalSeparator, 1, state.uiStyle.theme.background),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				introduction),
				A2($author$project$View$Style$horizontalSeparator, 1, state.uiStyle.theme.background)
			]));
};
var $author$project$View$WallScreen$renderUserHeader = function (state) {
	var maybeUser = A2(
		$elm$core$Maybe$andThen,
		$author$project$State$Cache$getUser(state.cache),
		state.wall.user);
	var pseudo = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingFixedTextLine, state.uiStyle, 12, 100),
		A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.pseudo;
				},
				A2(
					$elm$core$Basics$composeR,
					$mdgriffith$elm_ui$Element$text,
					$mdgriffith$elm_ui$Element$el(
						_List_fromArray(
							[
								A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
								$mdgriffith$elm_ui$Element$Font$semiBold
							])))),
			maybeUser));
	var scoreBreakdown = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Data$Rank$emptyBreakdown,
		A2(
			$elm$core$Maybe$andThen,
			$author$project$State$Cache$getScoreBreakdown(state.cache),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				maybeUser)));
	var score = $author$project$Data$Rank$score(scoreBreakdown);
	var rank = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingFixedTextLine, state.uiStyle, 12, 50),
		A2(
			$elm$core$Maybe$map,
			function (_v0) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 0),
							$mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$centerY
						]),
					$mdgriffith$elm_ui$Element$text(
						$author$project$Data$Rank$toString(
							$author$project$Data$Rank$fromScore(score))));
			},
			maybeUser));
	var since = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingFixedTextLine, state.uiStyle, 12, 100),
		A2(
			$elm$core$Maybe$map,
			function (txt) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$centerY
						]),
					$mdgriffith$elm_ui$Element$text('Since ' + txt));
			},
			A2(
				$elm$core$Maybe$map,
				function (x) {
					return $author$project$Utils$DateUtils$formatDate(x.since);
				},
				maybeUser)));
	var isPartner = A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			$author$project$State$Cache$isPartner(state.cache),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				maybeUser)));
	var introduction = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$View$Style$loadingTextBlock, state.uiStyle, 12, 4),
		A2(
			$elm$core$Maybe$map,
			$mdgriffith$elm_ui$Element$paragraph(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
						$mdgriffith$elm_ui$Element$Font$italic
					])),
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.introduction;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$View$Style$multiLineQuotedText(state.uiStyle),
						$elm$core$List$singleton)),
				maybeUser)));
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.foreground),
						$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
						$mdgriffith$elm_ui$Element$Border$rounded(10)
					]),
				$author$project$View$Icons$user(state.uiStyle.extraLarge)),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Border$color(state.uiStyle.theme.background)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(5),
								$mdgriffith$elm_ui$Element$centerY
							]),
						_List_fromArray(
							[
								pseudo,
								A3($author$project$View$WallScreen$renderFollowingButton, state.uiStyle, state.cache, state.wall.user)
							])),
						rank,
						since,
						isPartner ? A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$semiBold,
								$mdgriffith$elm_ui$Element$Font$italic,
								$mdgriffith$elm_ui$Element$Font$color($author$project$View$Theme$darkOrange),
								A2($author$project$View$Style$relFontSize, state.uiStyle, 1)
							]),
						$mdgriffith$elm_ui$Element$text('Partnership')) : $mdgriffith$elm_ui$Element$none
					])),
				A2($author$project$View$Style$verticalSeparator, 1, state.uiStyle.theme.background),
				A2($author$project$View$WallScreen$renderChart, state.uiStyle, scoreBreakdown),
				A2($author$project$View$Style$verticalSeparator, 1, state.uiStyle.theme.background),
				introduction
			]));
};
var $author$project$State$WallState$allUpToCurrentPage = function (state) {
	return A2($author$project$State$PostPageCache$getAllUpTo, state.currentPage, state.postCache);
};
var $author$project$View$WallScreen$renderLoadingPosts = function (ui) {
	return A2($author$project$View$PostRenderer$renderLoadingPostPage, ui, 2);
};
var $author$project$View$WelcomeWallScreen$bullet = F3(
	function (ui, icon, elt) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(2),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$Border$rounded(2),
							$mdgriffith$elm_ui$Element$alignLeft
						]),
					icon),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, ui, 2),
							$mdgriffith$elm_ui$Element$Font$regular
						]),
					elt)
				]));
	});
var $author$project$View$Style$leftGap = F2(
	function (sp, x) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: sp, right: 0, top: 0})
				]),
			x);
	});
var $author$project$View$WelcomeWallScreen$titledMultiText = F3(
	function (ui, title, content) {
		return A3(
			$author$project$View$Style$titledParagraphStyle,
			ui,
			title,
			A2($elm$core$List$map, $author$project$Utils$TextUtils$oneline, content));
	});
var $author$project$View$WelcomeWallScreen$titledText = F3(
	function (ui, title, content) {
		return A3(
			$author$project$View$Style$titledTextStyle,
			ui,
			title,
			$author$project$Utils$TextUtils$oneline(content));
	});
var $author$project$View$Style$topGap = F2(
	function (sp, x) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 0, top: sp})
				]),
			x);
	});
var $author$project$View$WelcomeWallScreen$welcomeWallScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_fromArray(
			[
				A2(
				$author$project$View$Style$topGap,
				15,
				A2($author$project$View$Style$horizontalSeparator, 1, state.uiStyle.theme.background)),
				A3($author$project$View$WelcomeWallScreen$titledText, state.uiStyle, 'There is no post on your wall ...', 'Not a problem! When you are ready, you can easily create a post, a poll, a challenge or an event using one of below wizard.'),
				A3(
				$author$project$View$Style$titledElementStyle,
				state.uiStyle,
				'Create your first post',
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$View$Style$leftGap,
							10,
							A3(
								$author$project$View$WelcomeWallScreen$bullet,
								state.uiStyle,
								$author$project$View$Icons$tip(state.uiStyle.small),
								A2($author$project$View$Style$internalPageLinkStyle, $author$project$State$AppState$WizardNewTipPage, 'Create a new tip for your followers'))),
							A2(
							$author$project$View$Style$leftGap,
							10,
							A3(
								$author$project$View$WelcomeWallScreen$bullet,
								state.uiStyle,
								$author$project$View$Icons$post(state.uiStyle.small),
								A2($author$project$View$Style$internalPageLinkStyle, $author$project$State$AppState$WizardNewFreePostPage, 'Create a blog post'))),
							A2(
							$author$project$View$Style$leftGap,
							10,
							A3(
								$author$project$View$WelcomeWallScreen$bullet,
								state.uiStyle,
								$author$project$View$Icons$challenge(state.uiStyle.small),
								A2($author$project$View$Style$internalPageLinkStyle, $author$project$State$AppState$WizardNewChallengePage, 'Challenge yourself or your followers'))),
							A2(
							$author$project$View$Style$leftGap,
							10,
							A3(
								$author$project$View$WelcomeWallScreen$bullet,
								state.uiStyle,
								$author$project$View$Icons$poll(state.uiStyle.small),
								A2($author$project$View$Style$internalPageLinkStyle, $author$project$State$AppState$WizardNewPollPage, 'Create a new poll'))),
							A2(
							$author$project$View$Style$leftGap,
							10,
							A3(
								$author$project$View$WelcomeWallScreen$bullet,
								state.uiStyle,
								$author$project$View$Icons$event(state.uiStyle.small),
								A2($author$project$View$Style$internalPageLinkStyle, $author$project$State$AppState$WizardNewEventPage, 'Organize a new event'))),
							A2(
							$author$project$View$Style$leftGap,
							10,
							A3(
								$author$project$View$WelcomeWallScreen$bullet,
								state.uiStyle,
								$author$project$View$Icons$repost(state.uiStyle.small),
								$mdgriffith$elm_ui$Element$text('... or you simply share with your followers something interesting you found')))
						]))),
				A3(
				$author$project$View$WelcomeWallScreen$titledMultiText,
				state.uiStyle,
				'User rank',
				_List_fromArray(
					['When a new user is joining GreenGen, it starts at the first rank - GreenWood', 'With time, posts written, challenges taken, followers acquired, events participation or organized, the number of points increases.\r\n                 Your rank will increase, and your actions on GreenGen will have more weight,\r\n                 your posts will become more visible to others and your action cap will go up.\r\n              ', 'Maybe you start being a \'GreenWood\', but with a steady usage of the website\r\n                 you can soon become an \'Influencer\', an \'Evangelist\', or even a \'Sensei\' or a \'Guru\' -\r\n                 and proudly show off the world your dedication to a better future :)']))
			]));
};
var $author$project$View$WallScreen$renderNoPostPage = $author$project$View$WelcomeWallScreen$welcomeWallScreen;
var $author$project$View$WallScreen$renderSinglePost = $author$project$View$PostRenderer$renderPostId;
var $author$project$View$WallScreen$renderPostPage = F2(
	function (state, page) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$View$WallScreen$renderSinglePost, state.uiStyle, state.timestamp, state.cache),
				page.items));
	});
var $author$project$View$WallScreen$renderWallState = function (state) {
	var _v0 = $author$project$State$WallState$allUpToCurrentPage(state.wall);
	if (_v0.$ === 'Just') {
		var page = _v0.a;
		return $author$project$State$GenericPage$isEmpty(page) ? $author$project$View$WallScreen$renderNoPostPage(state) : A2($author$project$View$WallScreen$renderPostPage, state, page);
	} else {
		return $author$project$View$WallScreen$renderLoadingPosts(state.uiStyle);
	}
};
var $author$project$View$WallScreen$wallScreen = function (state) {
	return A5(
		$author$project$View$InfiniteScroll$infiniteScrollWithMoreButton,
		state.uiStyle,
		$author$project$View$UIStyle$isMobile(state.device),
		'wall',
		$author$project$Update$Msg$ChangeWallPage(
			$author$project$Data$Page$next(state.wall.currentPage)),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			_List_fromArray(
				[
					($author$project$View$UIStyle$isMobile(state.device) ? $author$project$View$WallScreen$renderMobileUserHeader : $author$project$View$WallScreen$renderUserHeader)(state),
					$author$project$View$WallScreen$renderWallState(state)
				])));
};
var $author$project$View$AppView$displayUserWall = F2(
	function (state, _v0) {
		return $author$project$View$WallScreen$wallScreen(state);
	});
var $author$project$View$AppView$displayUserWallByPseudo = F2(
	function (state, _v0) {
		return $author$project$View$WallScreen$wallScreen(state);
	});
var $author$project$View$AppView$displayWall = $author$project$View$WallScreen$wallScreen;
var $author$project$Update$Msg$FillingNewChallengeWizard = function (a) {
	return {$: 'FillingNewChallengeWizard', a: a};
};
var $author$project$Update$Msg$PostNewChallenge = function (a) {
	return {$: 'PostNewChallenge', a: a};
};
var $author$project$State$FormState$Specific = function (a) {
	return {$: 'Specific', a: a};
};
var $author$project$State$FormState$Weekly = {$: 'Weekly'};
var $author$project$View$WizardNewChallengePage$getContent = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.content);
};
var $author$project$View$WizardNewChallengePage$hasHashtags = function (state) {
	return !$elm$core$List$isEmpty(
		$author$project$Utils$TextUtils$hashtagsFrom(
			$author$project$View$WizardNewChallengePage$getContent(state)));
};
var $author$project$View$WizardNewChallengePage$check = function (state) {
	return $elm$core$String$isEmpty(
		$author$project$View$WizardNewChallengePage$getContent(state)) ? $elm$core$Result$Err('Please the challenge content') : ((!$author$project$View$WizardNewChallengePage$hasHashtags(state)) ? $elm$core$Result$Err('Enter hashtags to help others to find your challenge') : $elm$core$Result$Ok(_Utils_Tuple0));
};
var $author$project$Data$Schedule$after = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		return _Utils_cmp(a, b) > 0;
	});
var $author$project$Utils$ListUtils$fixLoop = F4(
	function (x, f, stopCondition, acc) {
		fixLoop:
		while (true) {
			var res = f(x);
			if (stopCondition(res)) {
				return acc;
			} else {
				var $temp$x = res,
					$temp$f = f,
					$temp$stopCondition = stopCondition,
					$temp$acc = A2($elm$core$List$cons, res, acc);
				x = $temp$x;
				f = $temp$f;
				stopCondition = $temp$stopCondition;
				acc = $temp$acc;
				continue fixLoop;
			}
		}
	});
var $author$project$Utils$ListUtils$fix = F3(
	function (start, func, stopCondition) {
		return A4($author$project$Utils$ListUtils$fixLoop, start, func, stopCondition, _List_Nil);
	});
var $author$project$Data$Schedule$plus = F2(
	function (_v0, _v1) {
		var time = _v0.a;
		var millis = _v1.a;
		return $author$project$Data$Schedule$UTC(time + millis);
	});
var $author$project$Data$Schedule$dates = function (schedule) {
	if (schedule.$ === 'OneOff') {
		var s = schedule.a;
		var e = schedule.b;
		return _List_fromArray(
			[s, e]);
	} else {
		var s = schedule.a;
		var period = schedule.c;
		var e = schedule.d;
		return $elm$core$List$reverse(
			A3(
				$author$project$Utils$ListUtils$fix,
				s,
				function (x) {
					return A2($author$project$Data$Schedule$plus, x, period);
				},
				function (x) {
					return A2($author$project$Data$Schedule$after, x, e);
				}));
	}
};
var $author$project$View$WizardNewChallengePage$countReports = function (state) {
	var weekly = $author$project$Data$Schedule$Duration((((7 * 24) * 60) * 60) * 1000);
	var daily = $author$project$Data$Schedule$Duration(((24 * 60) * 60) * 1000);
	var maybeSchedule = function () {
		var _v0 = _Utils_Tuple3(state.start, state.end, state.reportPeriod);
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			if (_v0.c.$ === 'Weekly') {
				var start = _v0.a.a;
				var end = _v0.b.a;
				var _v1 = _v0.c;
				return $elm$core$Maybe$Just(
					A4($author$project$Data$Schedule$Recurring, start, weekly, weekly, end));
			} else {
				var start = _v0.a.a;
				var end = _v0.b.a;
				var _v2 = _v0.c;
				return $elm$core$Maybe$Just(
					A4($author$project$Data$Schedule$Recurring, start, daily, daily, end));
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}();
	return A2(
		$elm$core$Maybe$map,
		A2($elm$core$Basics$composeR, $author$project$Data$Schedule$dates, $elm$core$List$length),
		maybeSchedule);
};
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Utils$DateUtils$monthToInt = function (m) {
	switch (m.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $author$project$Utils$DateUtils$toLocalDate = function (_v0) {
	var millis = _v0.a;
	var posix = $elm$time$Time$millisToPosix(millis);
	var year = A2($elm$time$Time$toYear, $elm$time$Time$utc, posix);
	var month = A2($elm$time$Time$toMonth, $elm$time$Time$utc, posix);
	var day = A2($elm$time$Time$toDay, $elm$time$Time$utc, posix);
	return {
		day: day,
		month: $author$project$Utils$DateUtils$monthToInt(month),
		year: year
	};
};
var $author$project$View$Style$dateSpinner = F3(
	function (ui, timestamp, onChange) {
		var spinYear = function (date) {
			return {day: date.day, month: date.month, year: date.year + 1};
		};
		var leapYear = function (yyyy) {
			return ((!A2($elm$core$Basics$modBy, 4, yyyy)) || (!A2($elm$core$Basics$modBy, 100, yyyy))) && (!(!A2($elm$core$Basics$modBy, 400, yyyy)));
		};
		var maxDayOfMonth = function (date) {
			return ((date.month === 2) && leapYear(date.year)) ? 29 : ((date.month === 2) ? 28 : (A2(
				$elm$core$List$member,
				date.month,
				_List_fromArray(
					[1, 3, 5, 7, 8, 10, 12])) ? 31 : 30));
		};
		var spinDay = function (date) {
			var maxDay = maxDayOfMonth(date);
			return {
				day: A2($elm$core$Basics$modBy, maxDay, date.day) + 1,
				month: date.month,
				year: date.year
			};
		};
		var ensureMaxDay = function (date) {
			return {
				day: A2(
					$elm$core$Basics$min,
					date.day,
					maxDayOfMonth(date)),
				month: date.month,
				year: date.year
			};
		};
		var spinMonth = function (date) {
			return ensureMaxDay(
				{
					day: date.day,
					month: A2($elm$core$Basics$modBy, 12, date.month) + 1,
					year: date.year
				});
		};
		var _v0 = $author$project$Utils$DateUtils$toLocalDate(timestamp);
		var day = _v0.day;
		var month = _v0.month;
		var year = _v0.year;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(3),
					$mdgriffith$elm_ui$Element$Border$rounded(3),
					$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$padding(4),
							A2($author$project$View$Style$relFontSize, ui, 4),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(40)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 0, left: 0, right: 1, top: 0})
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Utils$TextUtils$format2Digits(day))),
						onPress: onChange(
							spinDay(
								{day: day, month: month, year: year}))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$padding(4),
							A2($author$project$View$Style$relFontSize, ui, 4),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(40)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 0, left: 0, right: 1, top: 0})
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Utils$TextUtils$format2Digits(month))),
						onPress: onChange(
							spinMonth(
								{day: day, month: month, year: year}))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$padding(4),
							A2($author$project$View$Style$relFontSize, ui, 4),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(60))
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromInt(year))),
						onPress: onChange(
							spinYear(
								{day: day, month: month, year: year}))
					})
				]));
	});
var $author$project$View$Icons$followers = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$usergroupAddOutlined);
var $author$project$View$WizardNewChallengePage$hasError = function (res) {
	if (res.$ === 'Err') {
		return true;
	} else {
		return false;
	}
};
var $author$project$View$Style$intSpinner = F6(
	function (ui, mn, mx, step, value, onChange) {
		var checked = function (v) {
			return A2(
				$elm$core$Basics$max,
				mn,
				A2($elm$core$Basics$min, mx, v));
		};
		var checkedValue = checked(value);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(checkedValue)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									A2($author$project$View$Style$relFontSize, ui, 0)
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('▲'),
								onPress: onChange(
									checked(checkedValue + step))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									A2($author$project$View$Style$relFontSize, ui, 0)
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('▼'),
								onPress: onChange(
									checked(checkedValue - step))
							})
						]))
				]));
	});
var $author$project$View$WizardNewChallengePage$makeHashtagBar = F2(
	function (ui, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						$author$project$View$Style$hashtagStyle(ui),
						A2(
							$elm$core$List$sortBy,
							function (_v0) {
								var x = _v0.a;
								return x;
							},
							$author$project$Utils$TextUtils$hashtagsFrom(
								A2($elm$core$Maybe$withDefault, '', state.content)))))
				]));
	});
var $author$project$State$Cache$getUserByPseudo = F2(
	function (cache, pseudo) {
		return A2(
			$elm$core$Maybe$map,
			function (_v1) {
				var v = _v1.b;
				return v.id;
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var k = _v0.a;
						var v = _v0.b;
						return _Utils_eq(v.pseudo, pseudo);
					},
					$elm$core$Dict$toList(cache.users))));
	});
var $author$project$Utils$TextUtils$userPseudosFrom = function (txt) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$dropLeft(1),
		A2(
			$elm$core$List$filter,
			$author$project$Utils$TextUtils$isUser,
			A2(
				$elm$regex$Regex$split,
				$author$project$Utils$TextUtils$unsafeRegex(' |\t|,|;|-|\\.|\\[|\\]|\\(|\\)|\\{|\\}'),
				txt)));
};
var $author$project$View$WizardNewChallengePage$makeUserBar = F3(
	function (ui, cache, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (pseudo) {
							return A3(
								$author$project$View$Style$userStyle,
								ui,
								pseudo,
								A2($author$project$State$Cache$getUserByPseudo, cache, pseudo));
						},
						$author$project$Utils$TextUtils$userPseudosFrom(
							A2($elm$core$Maybe$withDefault, '', state.content))))
				]));
	});
var $author$project$Utils$DateUtils$max = F2(
	function (_v0, _v1) {
		var t1 = _v0.a;
		var t2 = _v1.a;
		return (_Utils_cmp(t1, t2) > 0) ? $author$project$Data$Schedule$UTC(t1) : $author$project$Data$Schedule$UTC(t2);
	});
var $author$project$View$Style$Mid = {$: 'Mid'};
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.topLeft;
	var topRight = _v0.topRight;
	var bottomLeft = _v0.bottomLeft;
	var bottomRight = _v0.bottomRight;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $author$project$View$Style$button = F4(
	function (ui, position, label, state) {
		var corners = function () {
			switch (position.$) {
				case 'First':
					return {bottomLeft: 6, bottomRight: 0, topLeft: 6, topRight: 0};
				case 'Mid':
					return {bottomLeft: 0, bottomRight: 0, topLeft: 0, topRight: 0};
				default:
					return {bottomLeft: 0, bottomRight: 6, topLeft: 0, topRight: 6};
			}
		}();
		var borders = function () {
			switch (position.$) {
				case 'First':
					return {bottom: 2, left: 2, right: 2, top: 2};
				case 'Mid':
					return {bottom: 2, left: 0, right: 2, top: 2};
				default:
					return {bottom: 2, left: 0, right: 2, top: 2};
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 3, left: 3, right: 3, top: 3}),
					$mdgriffith$elm_ui$Element$Border$roundEach(corners),
					$mdgriffith$elm_ui$Element$Border$widthEach(borders),
					$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$Font$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? ui.theme.foreground : ui.theme.background),
					$mdgriffith$elm_ui$Element$Background$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? ui.theme.background : ui.theme.foreground)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						A2($author$project$View$Style$relFontSize, ui, 4)
					]),
				$mdgriffith$elm_ui$Element$text(label)));
	});
var $mdgriffith$elm_ui$Element$Input$optionWith = F2(
	function (val, view) {
		return A2($mdgriffith$elm_ui$Element$Input$Option, val, view);
	});
var $mdgriffith$elm_ui$Element$Input$Row = {$: 'Row'};
var $mdgriffith$elm_ui$Element$Input$radioRow = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Row);
var $author$project$View$Style$options = F4(
	function (ui, opts, selected, onChange) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
				onChange: onChange,
				options: A2(
					$elm$core$List$map,
					function (_v0) {
						var label = _v0.a;
						var opt = _v0.b;
						return A2(
							$mdgriffith$elm_ui$Element$Input$optionWith,
							opt,
							A3($author$project$View$Style$button, ui, $author$project$View$Style$Mid, label));
					},
					opts),
				selected: $elm$core$Maybe$Just(selected)
			});
	});
var $author$project$Utils$DateUtils$plusDays = F2(
	function (days, _v0) {
		var millis = _v0.a;
		return $author$project$Data$Schedule$UTC(millis + ((((days * 24) * 60) * 60) * 1000));
	});
var $author$project$View$Icons$report = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$pieChartOutlined);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$SlidersOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M320 224h-66v-56c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v56h-66c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8h66v56c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-56h66c4.4 0 8-3.6 8-8V232c0-4.4-3.6-8-8-8zm-60 508h-80V292h80v440zm644-436h-66v-96c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v96h-66c-4.4 0-8 3.6-8 8v416c0 4.4 3.6 8 8 8h66v96c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-96h66c4.4 0 8-3.6 8-8V304c0-4.4-3.6-8-8-8zm-60 364h-80V364h80v296zM612 404h-66V232c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v172h-66c-4.4 0-8 3.6-8 8v200c0 4.4 3.6 8 8 8h66v172c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V620h66c4.4 0 8-3.6 8-8V412c0-4.4-3.6-8-8-8zm-60 145a3 3 0 01-3 3h-74a3 3 0 01-3-3v-74a3 3 0 013-3h74a3 3 0 013 3v74z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$slidersOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$SlidersOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$slidersOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$slidersOutlined);
};
var $author$project$View$Icons$successMeasure = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$slidersOutlined);
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$InternalDateTime = F2(
	function (date, time) {
		return {date: date, time: time};
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$isLeapYear = function (_v0) {
	var _int = _v0.a;
	return (!A2($elm$core$Basics$modBy, 4, _int)) && ((!A2($elm$core$Basics$modBy, 400, _int)) || (!(!A2($elm$core$Basics$modBy, 100, _int))));
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$lastDayOf = F2(
	function (year, month) {
		switch (month.$) {
			case 'Jan':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(31);
			case 'Feb':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$isLeapYear(year) ? $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(29) : $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(28);
			case 'Mar':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(31);
			case 'Apr':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(30);
			case 'May':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(31);
			case 'Jun':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(30);
			case 'Jul':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(31);
			case 'Aug':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(31);
			case 'Sep':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(30);
			case 'Oct':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(31);
			case 'Nov':
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(30);
			default:
				return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(31);
		}
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayFromInt = F3(
	function (year, month, day) {
		var maxValidDay = $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayToInt(
			A2($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$lastDayOf, year, month));
		return ((day > 0) && (!_Utils_eq(
			A2($elm$core$Basics$compare, day, maxValidDay),
			$elm$core$Basics$GT))) ? $elm$core$Maybe$Just(
			$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Day(day)) : $elm$core$Maybe$Nothing;
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$compareDays = F2(
	function (lhs, rhs) {
		return A2(
			$elm$core$Basics$compare,
			$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayToInt(lhs),
			$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayToInt(rhs));
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromYearMonthDay = F3(
	function (y, m, d) {
		var maxDay = A2($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$lastDayOf, y, m);
		var _v0 = A2($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$compareDays, d, maxDay);
		if (_v0.$ === 'GT') {
			return $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Just(
				$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Date(
					{day: d, month: m, year: y}));
		}
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromRawDay = F3(
	function (year, month, day) {
		return A2(
			$elm$core$Maybe$andThen,
			A2($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromYearMonthDay, year, month),
			A3($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayFromInt, year, month, day));
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$yearFromInt = function (year) {
	return (year > 0) ? $elm$core$Maybe$Just(
		$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$Year(year)) : $elm$core$Maybe$Nothing;
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromRawParts = function (_v0) {
	var year = _v0.year;
	var month = _v0.month;
	var day = _v0.day;
	return A2(
		$elm$core$Maybe$andThen,
		function (y) {
			return A3($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromRawDay, y, month, day);
		},
		$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$yearFromInt(year));
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$fromRawParts = $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$fromRawParts;
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$InternalTime = F4(
	function (hours, minutes, seconds, milliseconds) {
		return {hours: hours, milliseconds: milliseconds, minutes: minutes, seconds: seconds};
	});
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$hoursFromInt = function (hours) {
	return ((hours >= 0) && (hours < 24)) ? $elm$core$Maybe$Just(
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Hour(hours)) : $elm$core$Maybe$Nothing;
};
var $elm$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$millisecondsFromInt = function (millis) {
	return ((millis >= 0) && (millis < 1000)) ? $elm$core$Maybe$Just(
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Millisecond(millis)) : $elm$core$Maybe$Nothing;
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$minutesFromInt = function (minutes) {
	return ((minutes >= 0) && (minutes < 60)) ? $elm$core$Maybe$Just(
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Minute(minutes)) : $elm$core$Maybe$Nothing;
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$secondsFromInt = function (seconds) {
	return ((seconds >= 0) && (seconds < 60)) ? $elm$core$Maybe$Just(
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Second(seconds)) : $elm$core$Maybe$Nothing;
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$fromRawParts = function (_v0) {
	var hours = _v0.hours;
	var minutes = _v0.minutes;
	var seconds = _v0.seconds;
	var milliseconds = _v0.milliseconds;
	return A5(
		$elm$core$Maybe$map4,
		F4(
			function (h, m, s, mm) {
				return $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$Time(
					A4($PanagiotisGeorgiadis$elm_datetime$Clock$Internal$InternalTime, h, m, s, mm));
			}),
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$hoursFromInt(hours),
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$minutesFromInt(minutes),
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$secondsFromInt(seconds),
		$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$millisecondsFromInt(milliseconds));
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$fromRawParts = $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$fromRawParts;
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$fromRawParts = F2(
	function (rawDate, rawTime) {
		return A3(
			$elm$core$Maybe$map2,
			F2(
				function (date, time) {
					return $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$DateTime(
						A2($PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$InternalDateTime, date, time));
				}),
			$PanagiotisGeorgiadis$elm_datetime$Calendar$fromRawParts(rawDate),
			$PanagiotisGeorgiadis$elm_datetime$Clock$fromRawParts(rawTime));
	});
var $PanagiotisGeorgiadis$elm_datetime$DateTime$fromRawParts = F2(
	function (rawDate, rawTime) {
		return A2($PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$fromRawParts, rawDate, rawTime);
	});
var $author$project$Utils$DateUtils$intToMonth = function (month) {
	switch (month) {
		case 1:
			return $elm$core$Maybe$Just($elm$time$Time$Jan);
		case 2:
			return $elm$core$Maybe$Just($elm$time$Time$Feb);
		case 3:
			return $elm$core$Maybe$Just($elm$time$Time$Mar);
		case 4:
			return $elm$core$Maybe$Just($elm$time$Time$Apr);
		case 5:
			return $elm$core$Maybe$Just($elm$time$Time$May);
		case 6:
			return $elm$core$Maybe$Just($elm$time$Time$Jun);
		case 7:
			return $elm$core$Maybe$Just($elm$time$Time$Jul);
		case 8:
			return $elm$core$Maybe$Just($elm$time$Time$Aug);
		case 9:
			return $elm$core$Maybe$Just($elm$time$Time$Sep);
		case 10:
			return $elm$core$Maybe$Just($elm$time$Time$Oct);
		case 11:
			return $elm$core$Maybe$Just($elm$time$Time$Nov);
		case 12:
			return $elm$core$Maybe$Just($elm$time$Time$Dec);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisInADay = ((1000 * 60) * 60) * 24;
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisInYear = function (year) {
	return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$isLeapYear(year) ? ($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisInADay * 366) : ($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisInADay * 365);
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisSinceEpoch = function (_v0) {
	var year = _v0.a;
	var getTotalMillis = A2(
		$elm$core$Basics$composeL,
		A2(
			$elm$core$Basics$composeL,
			$elm$core$List$sum,
			$elm$core$List$map($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisInYear)),
		$elm$core$List$filterMap($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$yearFromInt));
	var epochYear = 1970;
	return (year >= 1970) ? getTotalMillis(
		A2($elm$core$List$range, epochYear, year - 1)) : (-getTotalMillis(
		A2($elm$core$List$range, year, epochYear - 1)));
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisSinceStartOfTheMonth = function (day) {
	return $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisInADay * ($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayToInt(day) - 1);
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$monthToInt = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$months = $elm$core$Array$fromList(
	_List_fromArray(
		[$elm$time$Time$Jan, $elm$time$Time$Feb, $elm$time$Time$Mar, $elm$time$Time$Apr, $elm$time$Time$May, $elm$time$Time$Jun, $elm$time$Time$Jul, $elm$time$Time$Aug, $elm$time$Time$Sep, $elm$time$Time$Oct, $elm$time$Time$Nov, $elm$time$Time$Dec]));
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getPrecedingMonths = function (month) {
	return $elm$core$Array$toList(
		A3(
			$elm$core$Array$slice,
			0,
			$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$monthToInt(month) - 1,
			$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$months));
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisSinceStartOfTheYear = F2(
	function (year, month) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (m, res) {
					return res + ($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisInADay * $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$dayToInt(
						A2($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$lastDayOf, year, m)));
				}),
			0,
			$PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$getPrecedingMonths(month));
	});
var $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$toMillis = function (_v0) {
	var year = _v0.a.year;
	var month = _v0.a.month;
	var day = _v0.a.day;
	return ($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisSinceEpoch(year) + A2($PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisSinceStartOfTheYear, year, month)) + $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$millisSinceStartOfTheMonth(day);
};
var $PanagiotisGeorgiadis$elm_datetime$Calendar$toMillis = $PanagiotisGeorgiadis$elm_datetime$Calendar$Internal$toMillis;
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$hoursToInt = function (_v0) {
	var hours = _v0.a;
	return hours;
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$millisecondsToInt = function (_v0) {
	var milliseconds = _v0.a;
	return milliseconds;
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$minutesToInt = function (_v0) {
	var minutes = _v0.a;
	return minutes;
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$secondsToInt = function (_v0) {
	var seconds = _v0.a;
	return seconds;
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$toMillis = function (_v0) {
	var hours = _v0.a.hours;
	var minutes = _v0.a.minutes;
	var seconds = _v0.a.seconds;
	var milliseconds = _v0.a.milliseconds;
	return $elm$core$List$sum(
		_List_fromArray(
			[
				$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$hoursToInt(hours) * 3600000,
				$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$minutesToInt(minutes) * 60000,
				$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$secondsToInt(seconds) * 1000,
				$PanagiotisGeorgiadis$elm_datetime$Clock$Internal$millisecondsToInt(milliseconds)
			]));
};
var $PanagiotisGeorgiadis$elm_datetime$Clock$toMillis = $PanagiotisGeorgiadis$elm_datetime$Clock$Internal$toMillis;
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$toMillis = function (_v0) {
	var date = _v0.a.date;
	var time = _v0.a.time;
	return $PanagiotisGeorgiadis$elm_datetime$Calendar$toMillis(date) + $PanagiotisGeorgiadis$elm_datetime$Clock$toMillis(time);
};
var $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$toPosix = A2($elm$core$Basics$composeL, $elm$time$Time$millisToPosix, $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$toMillis);
var $PanagiotisGeorgiadis$elm_datetime$DateTime$toPosix = $PanagiotisGeorgiadis$elm_datetime$DateTime$Internal$toPosix;
var $author$project$Utils$DateUtils$toUTCTimestamp = function (_v0) {
	var day = _v0.day;
	var month = _v0.month;
	var year = _v0.year;
	return A2(
		$elm$core$Maybe$map,
		$author$project$Data$Schedule$UTC,
		A2(
			$elm$core$Maybe$map,
			$elm$time$Time$posixToMillis,
			A2(
				$elm$core$Maybe$map,
				$PanagiotisGeorgiadis$elm_datetime$DateTime$toPosix,
				A2(
					$elm$core$Maybe$andThen,
					function (m) {
						return A2(
							$PanagiotisGeorgiadis$elm_datetime$DateTime$fromRawParts,
							{day: day, month: m, year: year},
							{hours: 0, milliseconds: 0, minutes: 0, seconds: 0});
					},
					$author$project$Utils$DateUtils$intToMonth(month)))));
};
var $author$project$View$WizardNewChallengePage$updateContent = F2(
	function (state, content) {
		return $author$project$Update$Msg$FillingNewChallengeWizard(
			_Utils_update(
				state,
				{
					content: $elm$core$Maybe$Just(content)
				}));
	});
var $author$project$View$WizardNewChallengePage$updateTitle = F2(
	function (state, title) {
		return $author$project$Update$Msg$FillingNewChallengeWizard(
			_Utils_update(
				state,
				{
					title: $elm$core$Maybe$Just(title)
				}));
	});
var $author$project$View$WizardNewChallengePage$wizardDescription = 'You can use the # symbol in your text to provide hashtags, the @ symbol to reference a user pseudo.\r\n    Your post must contain at least one hashtag.';
var $author$project$View$WizardNewChallengePage$form = function (state) {
	var wizardStateMaybeDates = state.forms.newChallengeWizard;
	var startDate = A2(
		$elm$core$Maybe$withDefault,
		A2($author$project$Utils$DateUtils$plusDays, 1, state.timestamp),
		wizardStateMaybeDates.start);
	var endDate = A2(
		$author$project$Utils$DateUtils$max,
		A2($author$project$Utils$DateUtils$plusDays, 1, startDate),
		A2(
			$elm$core$Maybe$withDefault,
			A2($author$project$Utils$DateUtils$plusDays, 8, state.timestamp),
			wizardStateMaybeDates.end));
	var wizardState = _Utils_update(
		wizardStateMaybeDates,
		{
			end: $elm$core$Maybe$Just(endDate),
			start: $elm$core$Maybe$Just(startDate)
		});
	var isCorrect = !$author$project$View$WizardNewChallengePage$hasError(
		$author$project$View$WizardNewChallengePage$check(wizardState));
	var postButtonColor = isCorrect ? state.uiStyle.theme.enabledButton : state.uiStyle.theme.disabledButton;
	var posting = wizardState.posting;
	var reportCount = $author$project$View$WizardNewChallengePage$countReports(wizardState);
	var successMeasure = wizardState.successMeasure;
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton)
						]),
					$author$project$View$Icons$challenge(state.uiStyle.large)),
					A3($author$project$View$Style$titledTextStyle, state.uiStyle, 'Create a new Challenge', $author$project$View$WizardNewChallengePage$wizardDescription)
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$calendar(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Starts on')),
					A3(
					$author$project$View$Style$dateSpinner,
					state.uiStyle,
					startDate,
					function (localDate) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewChallengeWizard(
								_Utils_update(
									wizardState,
									{
										start: $author$project$Utils$DateUtils$toUTCTimestamp(localDate)
									})));
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$calendar(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Ends on')),
					A3(
					$author$project$View$Style$dateSpinner,
					state.uiStyle,
					endDate,
					function (localDate) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewChallengeWizard(
								_Utils_update(
									wizardState,
									{
										end: $author$project$Utils$DateUtils$toUTCTimestamp(localDate)
									})));
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$report(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Report')),
					A4(
					$author$project$View$Style$options,
					state.uiStyle,
					_List_fromArray(
						[
							_Utils_Tuple2('Daily', $author$project$State$FormState$Daily),
							_Utils_Tuple2('Weekly', $author$project$State$FormState$Weekly)
						]),
					wizardState.reportPeriod,
					function (opt) {
						return $author$project$Update$Msg$FillingNewChallengeWizard(
							_Utils_update(
								wizardState,
								{reportPeriod: opt}));
					}),
					A2(
					$elm$core$Maybe$withDefault,
					$mdgriffith$elm_ui$Element$none,
					A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							$mdgriffith$elm_ui$Element$text,
							$mdgriffith$elm_ui$Element$el(
								_List_fromArray(
									[
										A2($author$project$View$Style$relFontSize, state.uiStyle, 2)
									]))),
						A2(
							$elm$core$Maybe$map,
							function (n) {
								return ' - ' + ($elm$core$String$fromInt(n) + ' report(s)');
							},
							reportCount)))
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$followers(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Audience')),
					A4(
					$author$project$View$Style$options,
					state.uiStyle,
					_List_fromArray(
						[
							_Utils_Tuple2('Followers', $author$project$State$FormState$Followers),
							_Utils_Tuple2(
							'Me only',
							$author$project$State$FormState$Specific(_List_Nil))
						]),
					_Utils_eq(wizardState.audience, $author$project$State$FormState$Followers) ? $author$project$State$FormState$Followers : $author$project$State$FormState$Specific(_List_Nil),
					function (opt) {
						return $author$project$Update$Msg$FillingNewChallengeWizard(
							_Utils_update(
								wizardState,
								{audience: opt}));
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$successMeasure(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Evaluation')),
					A6(
					$author$project$View$Style$intSpinner,
					state.uiStyle,
					0,
					A2($elm$core$Maybe$withDefault, 0, reportCount),
					1,
					wizardState.successMeasure.maxFailure,
					function (val) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewChallengeWizard(
								_Utils_update(
									wizardState,
									{
										successMeasure: _Utils_update(
											successMeasure,
											{maxFailure: val})
									})));
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2)
						]),
					$mdgriffith$elm_ui$Element$text('failure(s), ')),
					A6(
					$author$project$View$Style$intSpinner,
					state.uiStyle,
					0,
					A2($elm$core$Maybe$withDefault, 0, reportCount),
					1,
					wizardState.successMeasure.maxSkip,
					function (val) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewChallengeWizard(
								_Utils_update(
									wizardState,
									{
										successMeasure: _Utils_update(
											successMeasure,
											{maxSkip: val})
									})));
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2)
						]),
					$mdgriffith$elm_ui$Element$text('reports skipping')),
					A6(
					$author$project$View$Style$intSpinner,
					state.uiStyle,
					0,
					A2($elm$core$Maybe$withDefault, 0, reportCount),
					1,
					wizardState.successMeasure.maxPartial,
					function (val) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewChallengeWizard(
								_Utils_update(
									wizardState,
									{
										successMeasure: _Utils_update(
											successMeasure,
											{maxPartial: val})
									})));
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2)
						]),
					$mdgriffith$elm_ui$Element$text('partial success(es)'))
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$challenge(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Title')),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground)
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('Challenge title'),
						onChange: $author$project$View$WizardNewChallengePage$updateTitle(state.forms.newChallengeWizard),
						placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Challenge title'),
						text: A2($elm$core$Maybe$withDefault, '', state.forms.newChallengeWizard.title)
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Challenge content'),
				onChange: $author$project$View$WizardNewChallengePage$updateContent(state.forms.newChallengeWizard),
				placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Enter your Challenge description !'),
				spellcheck: true,
				text: A2($elm$core$Maybe$withDefault, '', state.forms.newChallengeWizard.content)
			}),
			A2($author$project$View$WizardNewChallengePage$makeHashtagBar, state.uiStyle, state.forms.newChallengeWizard),
			A3($author$project$View$WizardNewChallengePage$makeUserBar, state.uiStyle, state.cache, state.forms.newChallengeWizard),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Font$color(postButtonColor)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(
					posting ? 'Posting ...' : 'Post your challenge !'),
				onPress: isCorrect ? $elm$core$Maybe$Just(
					$author$project$Update$Msg$PostNewChallenge(wizardState)) : $elm$core$Maybe$Nothing
			})
		]);
};
var $author$project$View$WizardNewChallengePage$newWizardNewChallengeScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		$author$project$View$WizardNewChallengePage$form(state));
};
var $author$project$View$AppView$displayWizardNewChallengePost = $author$project$View$WizardNewChallengePage$newWizardNewChallengeScreen;
var $author$project$Update$Msg$FillingNewEventWizard = function (a) {
	return {$: 'FillingNewEventWizard', a: a};
};
var $author$project$State$FormState$MapLink = {$: 'MapLink'};
var $author$project$State$FormState$Physical = {$: 'Physical'};
var $author$project$Update$Msg$PostNewEvent = function (a) {
	return {$: 'PostNewEvent', a: a};
};
var $author$project$View$WizardNewEventPage$checkDates = function (state) {
	var _v0 = _Utils_Tuple2(state.end, state.start);
	if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
		var a = _v0.a.a;
		var b = _v0.b.a;
		return A2($author$project$Data$Schedule$after, a, b);
	} else {
		return false;
	}
};
var $author$project$View$WizardNewEventPage$getDescription = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.description);
};
var $author$project$View$WizardNewEventPage$hasHashtags = function (state) {
	return !$elm$core$List$isEmpty(
		$author$project$Utils$TextUtils$hashtagsFrom(
			$author$project$View$WizardNewEventPage$getDescription(state)));
};
var $author$project$View$WizardNewEventPage$check = function (state) {
	return $elm$core$String$isEmpty(
		$author$project$View$WizardNewEventPage$getDescription(state)) ? $elm$core$Result$Err('Please describe the event precisely') : ((!$author$project$View$WizardNewEventPage$hasHashtags(state)) ? $elm$core$Result$Err('Enter hashtags to help others to find your challenge') : ($author$project$Utils$MaybeUtils$isEmpty(state.location) ? $elm$core$Result$Err('You need to enter a location for your event') : ($author$project$Utils$MaybeUtils$isEmpty(state.start) ? $elm$core$Result$Err('You need a start date/time for your event') : ($author$project$Utils$MaybeUtils$isEmpty(state.end) ? $elm$core$Result$Err('You need an end date/time for your event') : ((!$author$project$View$WizardNewEventPage$checkDates(state)) ? $elm$core$Result$Err('The event should end after the start date') : $elm$core$Result$Ok(_Utils_Tuple0))))));
};
var $author$project$View$WizardNewEventPage$hasError = function (res) {
	if (res.$ === 'Err') {
		return true;
	} else {
		return false;
	}
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$EnvironmentOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M854.6 289.1a362.49 362.49 0 00-79.9-115.7 370.83 370.83 0 00-118.2-77.8C610.7 76.6 562.1 67 512 67c-50.1 0-98.7 9.6-144.5 28.5-44.3 18.3-84 44.5-118.2 77.8A363.6 363.6 0 00169.4 289c-19.5 45-29.4 92.8-29.4 142 0 70.6 16.9 140.9 50.1 208.7 26.7 54.5 64 107.6 111 158.1 80.3 86.2 164.5 138.9 188.4 153a43.9 43.9 0 0022.4 6.1c7.8 0 15.5-2 22.4-6.1 23.9-14.1 108.1-66.8 188.4-153 47-50.4 84.3-103.6 111-158.1C867.1 572 884 501.8 884 431.1c0-49.2-9.9-97-29.4-142zM512 880.2c-65.9-41.9-300-207.8-300-449.1 0-77.9 31.1-151.1 87.6-206.3C356.3 169.5 431.7 139 512 139s155.7 30.5 212.4 85.9C780.9 280 812 353.2 812 431.1c0 241.3-234.1 407.2-300 449.1zm0-617.2c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm79.2 255.2A111.6 111.6 0 01512 551c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 01400 439c0-29.9 11.7-58 32.8-79.2C454 338.6 482.1 327 512 327c29.9 0 58 11.6 79.2 32.8C612.4 381 624 409.1 624 439c0 29.9-11.6 58-32.8 79.2z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$environmentOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$EnvironmentOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$environmentOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$environmentOutlined);
};
var $author$project$View$Icons$location = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$environmentOutlined);
var $author$project$View$WizardNewEventPage$makeHashtagBar = F2(
	function (ui, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						$author$project$View$Style$hashtagStyle(ui),
						A2(
							$elm$core$List$sortBy,
							function (_v0) {
								var x = _v0.a;
								return x;
							},
							$author$project$Utils$TextUtils$hashtagsFrom(
								A2($elm$core$Maybe$withDefault, '', state.description)))))
				]));
	});
var $author$project$View$WizardNewEventPage$makeUserBar = F3(
	function (ui, cache, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (pseudo) {
							return A3(
								$author$project$View$Style$userStyle,
								ui,
								pseudo,
								A2($author$project$State$Cache$getUserByPseudo, cache, pseudo));
						},
						$author$project$Utils$TextUtils$userPseudosFrom(
							A2($elm$core$Maybe$withDefault, '', state.description))))
				]));
	});
var $author$project$Utils$DateUtils$plusHours = F2(
	function (hours, _v0) {
		var millis = _v0.a;
		return $author$project$Data$Schedule$UTC(millis + (((hours * 60) * 60) * 1000));
	});
var $author$project$View$WizardNewEventPage$updateLocation = F2(
	function (state, location) {
		return $author$project$Update$Msg$FillingNewEventWizard(
			_Utils_update(
				state,
				{
					location: $elm$core$Maybe$Just(location)
				}));
	});
var $author$project$View$WizardNewEventPage$renderAddressLocationForm = F2(
	function (ui, state) {
		var _v0 = function () {
			var _v1 = state.location;
			if ((_v1.$ === 'Just') && (_v1.a.$ === 'Address')) {
				var _v2 = _v1.a;
				var strt = _v2.a;
				var zp = _v2.b;
				var cntry = _v2.c.a;
				return _Utils_Tuple3(strt, zp, cntry);
			} else {
				return _Utils_Tuple3($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, 'World');
			}
		}();
		var street = _v0.a;
		var zip = _v0.b;
		var country = _v0.c;
		var zipStr = function () {
			if (zip.$ === 'Just') {
				var zp = zip.a.a;
				return zp;
			} else {
				return '';
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					A3($author$project$View$Style$titledTextStyle, ui, 'Event Address', 'Enter the address of your event, with street, zip/post code and country'),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(70)),
									A2($author$project$View$Style$relFontSize, ui, 0)
								]),
							$mdgriffith$elm_ui$Element$text('Street')),
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Background$color(ui.theme.textFieldBackground),
									$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldForeground),
									A2($author$project$View$Style$relFontSize, ui, 0)
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Event street'),
								onChange: function (txt) {
									return A2(
										$author$project$View$WizardNewEventPage$updateLocation,
										state,
										A3(
											$author$project$Data$Location$Address,
											$author$project$Utils$MaybeUtils$maybeString(txt),
											zip,
											$author$project$Data$Location$Country(country)));
								},
								placeholder: A2($author$project$View$Style$placeholderStyle, ui, 'Full street name'),
								text: A2($elm$core$Maybe$withDefault, '', street)
							})
						])),
					A3(
					$author$project$View$Style$relSize,
					ui,
					0,
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(70))
									]),
								$mdgriffith$elm_ui$Element$text('Zip/Post code')),
								A3(
								$author$project$View$Style$relSize,
								ui,
								0,
								A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(100)),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$color(ui.theme.textFieldBackground),
											$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldForeground)
										]),
									{
										label: $mdgriffith$elm_ui$Element$Input$labelHidden('Event zip code'),
										onChange: function (txt) {
											return A2(
												$author$project$View$WizardNewEventPage$updateLocation,
												state,
												A3(
													$author$project$Data$Location$Address,
													street,
													A2(
														$elm$core$Maybe$map,
														$author$project$Data$Location$ZipCode,
														$author$project$Utils$MaybeUtils$maybeString(txt)),
													$author$project$Data$Location$Country(country)));
										},
										placeholder: A2($author$project$View$Style$placeholderStyle, ui, 'Zip code'),
										text: zipStr
									})),
								$mdgriffith$elm_ui$Element$text('Country'),
								A2(
								$mdgriffith$elm_ui$Element$Input$text,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(100)),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color(ui.theme.textFieldBackground),
										$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldForeground)
									]),
								{
									label: $mdgriffith$elm_ui$Element$Input$labelHidden('Event country'),
									onChange: function (txt) {
										return A2(
											$author$project$View$WizardNewEventPage$updateLocation,
											state,
											A3(
												$author$project$Data$Location$Address,
												street,
												zip,
												$author$project$Data$Location$Country(txt)));
									},
									placeholder: A2($author$project$View$Style$placeholderStyle, ui, 'Country'),
									text: country
								})
							])))
				]));
	});
var $author$project$View$WizardNewEventPage$renderMapUrlLocationForm = F2(
	function (ui, state) {
		var loc = function () {
			var _v0 = state.location;
			if ((_v0.$ === 'Just') && (_v0.a.$ === 'MapUrl')) {
				var url = _v0.a.a.a;
				return url;
			} else {
				return '';
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					A3($author$project$View$Style$titledTextStyle, ui, 'Map link', 'Enter the google map or open street map URL '),
					A3(
					$author$project$View$Style$relSize,
					ui,
					0,
					A2(
						$mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(450)),
								$mdgriffith$elm_ui$Element$Background$color(ui.theme.textFieldBackground),
								$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldForeground)
							]),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('Event map link'),
							onChange: function (txt) {
								return A2(
									$author$project$View$WizardNewEventPage$updateLocation,
									state,
									$author$project$Data$Location$MapUrl(
										$author$project$Data$Url$Url(txt)));
							},
							placeholder: A2($author$project$View$Style$placeholderStyle, ui, 'Map Url for the event'),
							text: loc
						}))
				]));
	});
var $author$project$View$WizardNewEventPage$renderOnLineLocationForm = F2(
	function (ui, state) {
		var loc = function () {
			var _v0 = state.location;
			if ((_v0.$ === 'Just') && (_v0.a.$ === 'Online')) {
				var url = _v0.a.a.a;
				return url;
			} else {
				return '';
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					A3($author$project$View$Style$titledTextStyle, ui, 'Event URL', 'Enter the URL for your event'),
					A3(
					$author$project$View$Style$relSize,
					ui,
					0,
					A2(
						$mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(450)),
								$mdgriffith$elm_ui$Element$Background$color(ui.theme.textFieldBackground),
								$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldForeground)
							]),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('Event online location'),
							onChange: function (txt) {
								return A2(
									$author$project$View$WizardNewEventPage$updateLocation,
									state,
									$author$project$Data$Location$Online(
										$author$project$Data$Url$Url(txt)));
							},
							placeholder: A2($author$project$View$Style$placeholderStyle, ui, 'Url for the event'),
							text: loc
						}))
				]));
	});
var $author$project$View$WizardNewEventPage$renderLocationForm = F2(
	function (ui, state) {
		var _v0 = state.selectedLocationType;
		switch (_v0.$) {
			case 'LocatedOnline':
				return A2($author$project$View$WizardNewEventPage$renderOnLineLocationForm, ui, state);
			case 'MapLink':
				return A2($author$project$View$WizardNewEventPage$renderMapUrlLocationForm, ui, state);
			default:
				return A2($author$project$View$WizardNewEventPage$renderAddressLocationForm, ui, state);
		}
	});
var $author$project$Utils$DateUtils$toLocalTime = function (_v0) {
	var millis = _v0.a;
	var posix = $elm$time$Time$millisToPosix(millis);
	var minutes = A2($elm$time$Time$toMinute, $elm$time$Time$utc, posix);
	var hours = A2($elm$time$Time$toHour, $elm$time$Time$utc, posix);
	return {hour: hours, minute: minutes};
};
var $author$project$View$Style$timeSpinner = F3(
	function (ui, timestamp, onChange) {
		var spinMinute = function (time) {
			return {
				hour: time.hour,
				minute: A2($elm$core$Basics$modBy, 60, time.minute)
			};
		};
		var spinHour = function (time) {
			return {
				hour: A2($elm$core$Basics$modBy, 24, time.hour),
				minute: time.minute
			};
		};
		var _v0 = $author$project$Utils$DateUtils$toLocalTime(timestamp);
		var hour = _v0.hour;
		var minute = _v0.minute;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(3),
					$mdgriffith$elm_ui$Element$Border$rounded(3),
					$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$padding(4),
							A2($author$project$View$Style$relFontSize, ui, 4),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(40)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 0, left: 0, right: 1, top: 0})
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Utils$TextUtils$format2Digits(hour))),
						onPress: onChange(
							spinHour(
								{hour: hour + 1, minute: minute}))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$padding(4),
							A2($author$project$View$Style$relFontSize, ui, 4),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(40)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$color(ui.theme.background),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 0, left: 0, right: 1, top: 0})
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Utils$TextUtils$format2Digits(minute))),
						onPress: onChange(
							spinMinute(
								{hour: hour, minute: minute + 1}))
					})
				]));
	});
var $author$project$Utils$DateUtils$toUTCTimestampFromTime = F2(
	function (_v0, _v1) {
		var day = _v0.day;
		var month = _v0.month;
		var year = _v0.year;
		var hour = _v1.hour;
		var minute = _v1.minute;
		return A2(
			$elm$core$Maybe$map,
			$author$project$Data$Schedule$UTC,
			A2(
				$elm$core$Maybe$map,
				$elm$time$Time$posixToMillis,
				A2(
					$elm$core$Maybe$map,
					$PanagiotisGeorgiadis$elm_datetime$DateTime$toPosix,
					A2(
						$elm$core$Maybe$andThen,
						function (m) {
							return A2(
								$PanagiotisGeorgiadis$elm_datetime$DateTime$fromRawParts,
								{day: day, month: m, year: year},
								{hours: hour, milliseconds: 0, minutes: minute, seconds: 0});
						},
						$author$project$Utils$DateUtils$intToMonth(month)))));
	});
var $author$project$View$WizardNewEventPage$updateDescription = F2(
	function (state, desc) {
		return $author$project$Update$Msg$FillingNewEventWizard(
			_Utils_update(
				state,
				{
					description: $elm$core$Maybe$Just(desc)
				}));
	});
var $author$project$View$WizardNewEventPage$wizardDescription = 'You can use the # symbol in your text to provide hashtags, the @ symbol to reference a user pseudo.\r\n    Your post must contain at least one hashtag.';
var $author$project$View$WizardNewEventPage$form = function (state) {
	var wizardStateMaybeDates = state.forms.newEventWizard;
	var startDate = A2(
		$elm$core$Maybe$withDefault,
		A2($author$project$Utils$DateUtils$plusDays, 7, state.timestamp),
		wizardStateMaybeDates.start);
	var endDate = A2(
		$author$project$Utils$DateUtils$max,
		A2($author$project$Utils$DateUtils$plusHours, 1, startDate),
		A2(
			$elm$core$Maybe$withDefault,
			A2($author$project$Utils$DateUtils$plusHours, 3, startDate),
			wizardStateMaybeDates.end));
	var wizardState = _Utils_update(
		wizardStateMaybeDates,
		{
			end: $elm$core$Maybe$Just(endDate),
			start: $elm$core$Maybe$Just(startDate)
		});
	var isCorrect = !$author$project$View$WizardNewEventPage$hasError(
		$author$project$View$WizardNewEventPage$check(wizardState));
	var postButtonColor = isCorrect ? state.uiStyle.theme.enabledButton : state.uiStyle.theme.disabledButton;
	var maxParticipants = wizardState.maxParticipants;
	var posting = wizardState.posting;
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton)
						]),
					$author$project$View$Icons$event(state.uiStyle.large)),
					A3($author$project$View$Style$titledTextStyle, state.uiStyle, 'Create a new Event', $author$project$View$WizardNewEventPage$wizardDescription)
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$calendar(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Starts on')),
					A3(
					$author$project$View$Style$dateSpinner,
					state.uiStyle,
					startDate,
					function (localDate) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewEventWizard(
								_Utils_update(
									wizardState,
									{
										start: A2(
											$author$project$Utils$DateUtils$toUTCTimestampFromTime,
											localDate,
											$author$project$Utils$DateUtils$toLocalTime(startDate))
									})));
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2)
						]),
					$mdgriffith$elm_ui$Element$text('at')),
					A3(
					$author$project$View$Style$timeSpinner,
					state.uiStyle,
					startDate,
					function (localTime) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewEventWizard(
								_Utils_update(
									wizardState,
									{
										start: A2(
											$author$project$Utils$DateUtils$toUTCTimestampFromTime,
											$author$project$Utils$DateUtils$toLocalDate(startDate),
											localTime)
									})));
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$calendar(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Ends on')),
					A3(
					$author$project$View$Style$dateSpinner,
					state.uiStyle,
					endDate,
					function (localDate) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewEventWizard(
								_Utils_update(
									wizardState,
									{
										end: A2(
											$author$project$Utils$DateUtils$toUTCTimestampFromTime,
											localDate,
											$author$project$Utils$DateUtils$toLocalTime(endDate))
									})));
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2)
						]),
					$mdgriffith$elm_ui$Element$text('at')),
					A3(
					$author$project$View$Style$timeSpinner,
					state.uiStyle,
					endDate,
					function (localTime) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewEventWizard(
								_Utils_update(
									wizardState,
									{
										end: A2(
											$author$project$Utils$DateUtils$toUTCTimestampFromTime,
											$author$project$Utils$DateUtils$toLocalDate(endDate),
											localTime)
									})));
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$user(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Participants')),
					A6(
					$author$project$View$Style$intSpinner,
					state.uiStyle,
					0,
					100,
					1,
					maxParticipants,
					function (n) {
						return $elm$core$Maybe$Just(
							$author$project$Update$Msg$FillingNewEventWizard(
								_Utils_update(
									wizardState,
									{maxParticipants: n})));
					})
				])),
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.background)
						]),
					$author$project$View$Icons$location(state.uiStyle.normal)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$View$Style$relFontSize, state.uiStyle, 2),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(75))
						]),
					$mdgriffith$elm_ui$Element$text('Location')),
					A4(
					$author$project$View$Style$options,
					state.uiStyle,
					_List_fromArray(
						[
							_Utils_Tuple2('Online', $author$project$State$FormState$LocatedOnline),
							_Utils_Tuple2('Map link', $author$project$State$FormState$MapLink),
							_Utils_Tuple2('Address', $author$project$State$FormState$Physical)
						]),
					wizardState.selectedLocationType,
					function (opt) {
						return $author$project$Update$Msg$FillingNewEventWizard(
							_Utils_update(
								wizardState,
								{selectedLocationType: opt}));
					})
				])),
			A2(
			$author$project$View$Style$leftGap,
			115,
			A2($author$project$View$WizardNewEventPage$renderLocationForm, state.uiStyle, wizardState)),
			A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Event description'),
				onChange: $author$project$View$WizardNewEventPage$updateDescription(state.forms.newEventWizard),
				placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Enter your Event description. Be precise and concise !'),
				spellcheck: true,
				text: A2($elm$core$Maybe$withDefault, '', state.forms.newEventWizard.description)
			}),
			A2($author$project$View$WizardNewEventPage$makeHashtagBar, state.uiStyle, state.forms.newEventWizard),
			A3($author$project$View$WizardNewEventPage$makeUserBar, state.uiStyle, state.cache, state.forms.newEventWizard),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Font$color(postButtonColor)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(
					posting ? 'Posting ...' : 'Post your event !'),
				onPress: isCorrect ? $elm$core$Maybe$Just(
					$author$project$Update$Msg$PostNewEvent(wizardState)) : $elm$core$Maybe$Nothing
			})
		]);
};
var $author$project$View$WizardNewEventPage$newWizardNewEventScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		$author$project$View$WizardNewEventPage$form(state));
};
var $author$project$View$AppView$displayWizardNewEvent = $author$project$View$WizardNewEventPage$newWizardNewEventScreen;
var $author$project$Update$Msg$PostNewFreeText = {$: 'PostNewFreeText'};
var $author$project$View$WizardNewFreeTextPage$getContent = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.content);
};
var $author$project$View$WizardNewFreeTextPage$hasHashtags = function (state) {
	return !$elm$core$List$isEmpty(
		$author$project$Utils$TextUtils$hashtagsFrom(
			$author$project$View$WizardNewFreeTextPage$getContent(state)));
};
var $author$project$View$WizardNewFreeTextPage$check = function (state) {
	return $elm$core$String$isEmpty(
		$author$project$View$WizardNewFreeTextPage$getContent(state)) ? $elm$core$Result$Err('Please enter some content') : ((!$author$project$View$WizardNewFreeTextPage$hasHashtags(state)) ? $elm$core$Result$Err('Enter hashtags to help others to find your tip') : $elm$core$Result$Ok(_Utils_Tuple0));
};
var $author$project$View$WizardNewFreeTextPage$hasError = function (res) {
	if (res.$ === 'Err') {
		return true;
	} else {
		return false;
	}
};
var $author$project$View$WizardNewFreeTextPage$makeHashtagBar = F2(
	function (ui, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						$author$project$View$Style$hashtagStyle(ui),
						A2(
							$elm$core$List$sortBy,
							function (_v0) {
								var x = _v0.a;
								return x;
							},
							$author$project$Utils$TextUtils$hashtagsFrom(
								A2($elm$core$Maybe$withDefault, '', state.content)))))
				]));
	});
var $author$project$View$WizardNewFreeTextPage$makeUserBar = F3(
	function (ui, cache, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (pseudo) {
							return A3(
								$author$project$View$Style$userStyle,
								ui,
								pseudo,
								A2($author$project$State$Cache$getUserByPseudo, cache, pseudo));
						},
						$author$project$Utils$TextUtils$userPseudosFrom(
							A2($elm$core$Maybe$withDefault, '', state.content))))
				]));
	});
var $author$project$Update$Msg$FillingNewFreeTextWizard = function (a) {
	return {$: 'FillingNewFreeTextWizard', a: a};
};
var $author$project$View$WizardNewFreeTextPage$updateContent = F2(
	function (state, content) {
		return $author$project$Update$Msg$FillingNewFreeTextWizard(
			_Utils_update(
				state,
				{
					content: $elm$core$Maybe$Just(content)
				}));
	});
var $author$project$View$WizardNewFreeTextPage$wizardDescription = 'You can use the # symbol in your text to provide hashtags, the @ symbol to reference a user pseudo.\r\n    Source references are enclosed between curly braces. {}.\r\n    Your post must contain at least one hashtag.';
var $author$project$View$WizardNewFreeTextPage$form = function (state) {
	var posting = state.forms.newTipWizard.posting;
	var isCorrect = !$author$project$View$WizardNewFreeTextPage$hasError(
		$author$project$View$WizardNewFreeTextPage$check(state.forms.newFreeTextWizard));
	var postButtonColor = isCorrect ? state.uiStyle.theme.enabledButton : state.uiStyle.theme.disabledButton;
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton)
						]),
					$author$project$View$Icons$post(state.uiStyle.large)),
					A3($author$project$View$Style$titledTextStyle, state.uiStyle, 'Say what you want ...', $author$project$View$WizardNewFreeTextPage$wizardDescription)
				])),
			A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('FreeText content'),
				onChange: $author$project$View$WizardNewFreeTextPage$updateContent(state.forms.newFreeTextWizard),
				placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Unleash here ...'),
				spellcheck: true,
				text: A2($elm$core$Maybe$withDefault, '', state.forms.newFreeTextWizard.content)
			}),
			A2($author$project$View$WizardNewFreeTextPage$makeHashtagBar, state.uiStyle, state.forms.newFreeTextWizard),
			A3($author$project$View$WizardNewFreeTextPage$makeUserBar, state.uiStyle, state.cache, state.forms.newFreeTextWizard),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Font$color(postButtonColor)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(
					posting ? 'Posting ...' : 'Post it !'),
				onPress: isCorrect ? $elm$core$Maybe$Just($author$project$Update$Msg$PostNewFreeText) : $elm$core$Maybe$Nothing
			})
		]);
};
var $author$project$View$WizardNewFreeTextPage$newWizardNewFreeTextScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		$author$project$View$WizardNewFreeTextPage$form(state));
};
var $author$project$View$AppView$displayWizardNewFreeTextPost = $author$project$View$WizardNewFreeTextPage$newWizardNewFreeTextScreen;
var $author$project$Update$Msg$PostNewPoll = function (a) {
	return {$: 'PostNewPoll', a: a};
};
var $author$project$View$WizardNewPollPage$getPollOptionCount = function (state) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		A2($elm$core$Maybe$map, $elm$core$List$length, state.options));
};
var $author$project$View$WizardNewPollPage$getQuestion = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.question);
};
var $author$project$View$WizardNewPollPage$hasHashtags = function (state) {
	return !$elm$core$List$isEmpty(
		$author$project$Utils$TextUtils$hashtagsFrom(
			$author$project$View$WizardNewPollPage$getQuestion(state)));
};
var $author$project$View$WizardNewPollPage$check = function (state) {
	return $elm$core$String$isEmpty(
		$author$project$View$WizardNewPollPage$getQuestion(state)) ? $elm$core$Result$Err('Please the poll question') : ((!$author$project$View$WizardNewPollPage$hasHashtags(state)) ? $elm$core$Result$Err('Enter hashtags to help others to find your poll') : (($author$project$View$WizardNewPollPage$getPollOptionCount(state) <= 1) ? $elm$core$Result$Err('A Poll needs to have more than one answer') : $elm$core$Result$Ok(_Utils_Tuple0)));
};
var $author$project$View$WizardNewPollPage$hasError = function (res) {
	if (res.$ === 'Err') {
		return true;
	} else {
		return false;
	}
};
var $author$project$View$WizardNewPollPage$makeHashtagBar = F2(
	function (ui, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						$author$project$View$Style$hashtagStyle(ui),
						A2(
							$elm$core$List$sortBy,
							function (_v0) {
								var x = _v0.a;
								return x;
							},
							$author$project$Utils$TextUtils$hashtagsFrom(
								A2($elm$core$Maybe$withDefault, '', state.question)))))
				]));
	});
var $author$project$View$WizardNewPollPage$makeUserBar = F3(
	function (ui, cache, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (pseudo) {
							return A3(
								$author$project$View$Style$userStyle,
								ui,
								pseudo,
								A2($author$project$State$Cache$getUserByPseudo, cache, pseudo));
						},
						$author$project$Utils$TextUtils$userPseudosFrom(
							A2($elm$core$Maybe$withDefault, '', state.question))))
				]));
	});
var $author$project$Update$Msg$FillingNewPollWizard = function (a) {
	return {$: 'FillingNewPollWizard', a: a};
};
var $author$project$View$WizardNewPollPage$addNewPollOption = function (state) {
	return $author$project$Update$Msg$FillingNewPollWizard(
		_Utils_update(
			state,
			{
				options: A2(
					$elm$core$Maybe$map,
					function (xs) {
						return _Utils_ap(
							xs,
							_List_fromArray(
								[
									$author$project$Data$Poll$PollOption('')
								]));
					},
					state.options)
			}));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$MinusCircleFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm192 472c0 4.4-3.6 8-8 8H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h368c4.4 0 8 3.6 8 8v48z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$minusCircleFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$MinusCircleFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$minusCircleFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$minusCircleFilled);
};
var $author$project$View$Icons$minus = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$minusCircleFilled);
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$PlusCircleFilled$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm192 472c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$plusCircleFilled = $lemol$ant_design_icons_elm$Ant$Icons$Svg$PlusCircleFilled$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$plusCircleFilled = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$plusCircleFilled);
};
var $author$project$View$Icons$plus = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$plusCircleFilled);
var $author$project$Utils$ListUtils$delete = F2(
	function (index, xs) {
		return _Utils_ap(
			A2($elm$core$List$take, index, xs),
			A2($elm$core$List$drop, index + 1, xs));
	});
var $author$project$Utils$ListUtils$nonEmptyToMaybe = function (xs) {
	return $elm$core$List$isEmpty(xs) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(xs);
};
var $author$project$View$WizardNewPollPage$removePollOption = F2(
	function (state, index) {
		return $author$project$Update$Msg$FillingNewPollWizard(
			_Utils_update(
				state,
				{
					options: A2(
						$elm$core$Maybe$andThen,
						function (xs) {
							return $author$project$Utils$ListUtils$nonEmptyToMaybe(
								A2($author$project$Utils$ListUtils$delete, index, xs));
						},
						state.options)
				}));
	});
var $author$project$Utils$ListUtils$replace = F3(
	function (elt, index, xs) {
		return _Utils_ap(
			A2($elm$core$List$take, index, xs),
			_Utils_ap(
				_List_fromArray(
					[elt]),
				A2($elm$core$List$drop, index + 1, xs)));
	});
var $author$project$View$WizardNewPollPage$updatePollOption = F3(
	function (state, index, opt) {
		var updated = A3(
			$author$project$Utils$ListUtils$replace,
			$author$project$Data$Poll$PollOption(opt),
			index,
			A2($elm$core$Maybe$withDefault, _List_Nil, state.options));
		return $author$project$Update$Msg$FillingNewPollWizard(
			_Utils_update(
				state,
				{
					options: $elm$core$Maybe$Just(updated)
				}));
	});
var $author$project$View$WizardNewPollPage$renderPollOptionRow = F4(
	function (ui, state, index, _v0) {
		var opt = _v0.a;
		var lastIndex = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2($elm$core$Maybe$map, $elm$core$List$length, state.options));
		var isLast = _Utils_eq(index + 1, lastIndex);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.textFieldForeground),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.textFieldBackground)
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('hidden option'),
						onChange: A2($author$project$View$WizardNewPollPage$updatePollOption, state, index),
						placeholder: A2(
							$author$project$View$Style$placeholderStyle,
							ui,
							$elm$core$String$fromInt(index + 1) + '- Enter another option'),
						text: opt
					}),
					isLast ? A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.background)
						]),
					{
						label: $author$project$View$Icons$plus(ui.normal),
						onPress: $elm$core$Maybe$Just(
							$author$project$View$WizardNewPollPage$addNewPollOption(state))
					}) : A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.background)
						]),
					{
						label: $author$project$View$Icons$minus(ui.normal),
						onPress: $elm$core$Maybe$Just(
							A2($author$project$View$WizardNewPollPage$removePollOption, state, index))
					})
				]));
	});
var $author$project$View$WizardNewPollPage$updateQuestion = F2(
	function (state, question) {
		return $author$project$Update$Msg$FillingNewPollWizard(
			_Utils_update(
				state,
				{
					question: $elm$core$Maybe$Just(question)
				}));
	});
var $author$project$View$WizardNewPollPage$wizardDescription = 'You can use the # symbol in your text to provide hashtags, the @ symbol to reference a user pseudo.\r\n    Your post must contain at least one hashtag.';
var $author$project$View$WizardNewPollPage$form = function (state) {
	var pollState = state.forms.newPollWizard;
	var posting = pollState.posting;
	var isCorrect = !$author$project$View$WizardNewPollPage$hasError(
		$author$project$View$WizardNewPollPage$check(pollState));
	var postButtonColor = isCorrect ? state.uiStyle.theme.enabledButton : state.uiStyle.theme.disabledButton;
	return _Utils_ap(
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton)
							]),
						$author$project$View$Icons$poll(state.uiStyle.large)),
						A3($author$project$View$Style$titledTextStyle, state.uiStyle, 'Create a new Poll', $author$project$View$WizardNewPollPage$wizardDescription)
					])),
				A2(
				$mdgriffith$elm_ui$Element$Input$multiline,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, 100, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
						$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground)
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Question'),
					onChange: $author$project$View$WizardNewPollPage$updateQuestion(state.forms.newPollWizard),
					placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Enter your Poll question !'),
					spellcheck: true,
					text: A2($elm$core$Maybe$withDefault, '', state.forms.newPollWizard.question)
				}),
				A2($author$project$View$WizardNewPollPage$makeHashtagBar, state.uiStyle, pollState),
				A3($author$project$View$WizardNewPollPage$makeUserBar, state.uiStyle, state.cache, pollState)
			]),
		_Utils_ap(
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, opt) {
						return A4($author$project$View$WizardNewPollPage$renderPollOptionRow, state.uiStyle, pollState, index, opt);
					}),
				A2(
					$elm$core$Maybe$withDefault,
					_List_fromArray(
						[
							$author$project$Data$Poll$PollOption('')
						]),
					pollState.options)),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$Font$color(postButtonColor)
						]),
					{
						label: $mdgriffith$elm_ui$Element$text(
							posting ? 'Posting ...' : 'Post your poll !'),
						onPress: isCorrect ? $elm$core$Maybe$Just(
							$author$project$Update$Msg$PostNewPoll(pollState)) : $elm$core$Maybe$Nothing
					})
				])));
};
var $author$project$View$WizardNewPollPage$newWizardNewPollScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		$author$project$View$WizardNewPollPage$form(state));
};
var $author$project$View$AppView$displayWizardNewPollPost = $author$project$View$WizardNewPollPage$newWizardNewPollScreen;
var $author$project$Update$Msg$PostNewRepost = {$: 'PostNewRepost'};
var $author$project$View$WizardRepostPage$check = function (state) {
	return $author$project$Utils$MaybeUtils$isEmpty(state.repost) ? $elm$core$Result$Err('No post has been selected') : $elm$core$Result$Ok(_Utils_Tuple0);
};
var $author$project$View$WizardRepostPage$hasError = function (res) {
	if (res.$ === 'Err') {
		return true;
	} else {
		return false;
	}
};
var $author$project$View$WizardRepostPage$wizardDescription = 'Reposting allow you to share the content created by other users with your followers.';
var $author$project$View$WizardRepostPage$form = function (state) {
	var posting = state.forms.newRepostWizard.posting;
	var postId = state.forms.newRepostWizard.repost;
	var isCorrect = !$author$project$View$WizardRepostPage$hasError(
		$author$project$View$WizardRepostPage$check(state.forms.newRepostWizard));
	var postButtonColor = isCorrect ? state.uiStyle.theme.enabledButton : state.uiStyle.theme.disabledButton;
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton)
						]),
					$author$project$View$Icons$repost(state.uiStyle.large)),
					A3($author$project$View$Style$titledTextStyle, state.uiStyle, 'Repost', $author$project$View$WizardRepostPage$wizardDescription)
				])),
			A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$none,
			A2(
				$elm$core$Maybe$map,
				A3($author$project$View$PostRenderer$renderPostId, state.uiStyle, state.timestamp, state.cache),
				postId)),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Font$color(postButtonColor)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(
					posting ? 'Reposting ...' : 'Repost'),
				onPress: isCorrect ? $elm$core$Maybe$Just($author$project$Update$Msg$PostNewRepost) : $elm$core$Maybe$Nothing
			})
		]);
};
var $author$project$View$WizardRepostPage$newWizardRepostScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		$author$project$View$WizardRepostPage$form(state));
};
var $author$project$View$AppView$displayWizardNewRepost = $author$project$View$WizardRepostPage$newWizardRepostScreen;
var $author$project$Update$Msg$PostNewTip = {$: 'PostNewTip'};
var $author$project$View$WizardNewTipPage$getContent = function (state) {
	return A2($elm$core$Maybe$withDefault, '', state.content);
};
var $author$project$View$WizardNewTipPage$hasHashtags = function (state) {
	return !$elm$core$List$isEmpty(
		$author$project$Utils$TextUtils$hashtagsFrom(
			$author$project$View$WizardNewTipPage$getContent(state)));
};
var $author$project$View$WizardNewTipPage$check = function (state) {
	return $elm$core$String$isEmpty(
		$author$project$View$WizardNewTipPage$getContent(state)) ? $elm$core$Result$Err('Please enter some content') : ((!$author$project$View$WizardNewTipPage$hasHashtags(state)) ? $elm$core$Result$Err('Enter hashtags to help others to find your tip') : $elm$core$Result$Ok(_Utils_Tuple0));
};
var $author$project$View$WizardNewTipPage$hasError = function (res) {
	if (res.$ === 'Err') {
		return true;
	} else {
		return false;
	}
};
var $author$project$View$WizardNewTipPage$makeHashtagBar = F2(
	function (ui, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						$author$project$View$Style$hashtagStyle(ui),
						A2(
							$elm$core$List$sortBy,
							function (_v0) {
								var x = _v0.a;
								return x;
							},
							$author$project$Utils$TextUtils$hashtagsFrom(
								A2($elm$core$Maybe$withDefault, '', state.content)))))
				]));
	});
var $author$project$View$WizardNewTipPage$makeUserBar = F3(
	function (ui, cache, state) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Font$italic,
					A2($author$project$View$Style$relFontSize, ui, 2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (pseudo) {
							return A3(
								$author$project$View$Style$userStyle,
								ui,
								pseudo,
								A2($author$project$State$Cache$getUserByPseudo, cache, pseudo));
						},
						$author$project$Utils$TextUtils$userPseudosFrom(
							A2($elm$core$Maybe$withDefault, '', state.content))))
				]));
	});
var $author$project$Update$Msg$FillingNewTipWizard = function (a) {
	return {$: 'FillingNewTipWizard', a: a};
};
var $author$project$View$WizardNewTipPage$updateContent = F2(
	function (state, content) {
		return $author$project$Update$Msg$FillingNewTipWizard(
			_Utils_update(
				state,
				{
					content: $elm$core$Maybe$Just(content)
				}));
	});
var $author$project$View$WizardNewTipPage$wizardDescription = 'You can use the # symbol in your text to provide hashtags, the @ symbol to reference a user pseudo.\r\n    Source references are enclosed between curly braces. {}.\r\n    Your post must contain at least one hashtag.';
var $author$project$View$WizardNewTipPage$form = function (state) {
	var posting = state.forms.newTipWizard.posting;
	var isCorrect = !$author$project$View$WizardNewTipPage$hasError(
		$author$project$View$WizardNewTipPage$check(state.forms.newTipWizard));
	var postButtonColor = isCorrect ? state.uiStyle.theme.enabledButton : state.uiStyle.theme.disabledButton;
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.enabledButton)
						]),
					$author$project$View$Icons$tip(state.uiStyle.large)),
					A3($author$project$View$Style$titledTextStyle, state.uiStyle, 'Enter your tip', $author$project$View$WizardNewTipPage$wizardDescription)
				])),
			A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Tip content'),
				onChange: $author$project$View$WizardNewTipPage$updateContent(state.forms.newTipWizard),
				placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Enter your Tip !'),
				spellcheck: true,
				text: A2($elm$core$Maybe$withDefault, '', state.forms.newTipWizard.content)
			}),
			A2($author$project$View$WizardNewTipPage$makeHashtagBar, state.uiStyle, state.forms.newTipWizard),
			A3($author$project$View$WizardNewTipPage$makeUserBar, state.uiStyle, state.cache, state.forms.newTipWizard),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Font$color(postButtonColor)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(
					posting ? 'Posting ...' : 'Post your tip !'),
				onPress: isCorrect ? $elm$core$Maybe$Just($author$project$Update$Msg$PostNewTip) : $elm$core$Maybe$Nothing
			})
		]);
};
var $author$project$View$WizardNewTipPage$newWizardNewTipScreen = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		$author$project$View$WizardNewTipPage$form(state));
};
var $author$project$View$AppView$displayWizardNewTipPost = $author$project$View$WizardNewTipPage$newWizardNewTipScreen;
var $author$project$View$AppView$displayCurrentPage = function (state) {
	var _v0 = state.display;
	switch (_v0.$) {
		case 'LoginPage':
			return $author$project$View$AppView$displayLoginPage(state);
		case 'LoginFailedPage':
			var err = _v0.a;
			return A2($author$project$View$AppView$displayLoginFailedPage, err, state);
		case 'RegistrationPage':
			return $author$project$View$AppView$displayRegistrationPage(state);
		case 'LoggedOffPage':
			return $author$project$View$AppView$displayLogoffPage(state);
		case 'BlockedPage':
			return $author$project$View$AppView$displayBlocked(state);
		case 'WallPage':
			return $author$project$View$AppView$displayWall(state);
		case 'UserPage':
			var userId = _v0.a;
			return A2($author$project$View$AppView$displayUserWall, state, userId);
		case 'PseudoPage':
			var pseudo = _v0.a;
			return A2($author$project$View$AppView$displayUserWallByPseudo, state, pseudo);
		case 'FeedPage':
			return $author$project$View$AppView$displayFeed(state);
		case 'EventPage':
			return $author$project$View$AppView$displayEvent(state);
		case 'PinnedPostPage':
			return $author$project$View$AppView$displayPinnedPost(state);
		case 'SearchPage':
			return $author$project$View$AppView$displaySearch(state);
		case 'NotificationPage':
			return $author$project$View$AppView$displayNotification(state);
		case 'NewPostPage':
			return $author$project$View$AppView$displayNewPost(state);
		case 'WizardNewChallengePage':
			return $author$project$View$AppView$displayWizardNewChallengePost(state);
		case 'WizardNewEventPage':
			return $author$project$View$AppView$displayWizardNewEvent(state);
		case 'WizardNewPollPage':
			return $author$project$View$AppView$displayWizardNewPollPost(state);
		case 'WizardNewTipPage':
			return $author$project$View$AppView$displayWizardNewTipPost(state);
		case 'WizardRepostPage':
			return $author$project$View$AppView$displayWizardNewRepost(state);
		case 'WizardNewFreePostPage':
			return $author$project$View$AppView$displayWizardNewFreeTextPost(state);
		case 'ChallengePage':
			return $author$project$View$AppView$displayChallenge(state);
		case 'ChallengeDetailsPage':
			var id = _v0.a;
			return A2($author$project$View$AppView$displayChallengeDetails, state, id);
		default:
			var id = _v0.a;
			return A2($author$project$View$AppView$displayEventDetails, state, id);
	}
};
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{options: _List_Nil});
var $author$project$State$AppState$BlockedPage = {$: 'BlockedPage'};
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Element$Font$sansSerif = $mdgriffith$elm_ui$Internal$Model$SansSerif;
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$View$AppView$appTitle = function (state) {
	if ($author$project$View$UIStyle$isMobile(state.device)) {
		return $mdgriffith$elm_ui$Element$none;
	} else {
		var ui = state.uiStyle;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(ui.theme.background)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(20))
						]),
					A2($author$project$View$Style$horizontalSeparator, 1, ui.theme.foreground)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$Border$color(ui.theme.appBackground),
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$Background$color(ui.theme.appBackground),
							$mdgriffith$elm_ui$Element$Font$color(ui.theme.appTitleForeground),
							$mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$Font$family(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$typeface('Open Sans'),
									$mdgriffith$elm_ui$Element$Font$sansSerif
								]))
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignLeft]),
						$mdgriffith$elm_ui$Element$text('GreenGen >>'))),
					A2($author$project$View$Style$horizontalSeparator, 1, ui.theme.foreground)
				]));
	}
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$ArrowLeftOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 000 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$arrowLeftOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$ArrowLeftOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$arrowLeftOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$arrowLeftOutlined);
};
var $author$project$View$Icons$back = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$arrowLeftOutlined);
var $author$project$View$Style$tabIconButton = F3(
	function (ui, icon, msg) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(ui.theme.background),
					$mdgriffith$elm_ui$Element$Font$color(ui.theme.foreground),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			{
				label: icon,
				onPress: $elm$core$Maybe$Just(msg)
			});
	});
var $author$project$View$AppView$backButton = function (state) {
	return A3(
		$author$project$View$Style$tabIconButton,
		state.uiStyle,
		$author$project$View$Icons$back(state.uiStyle.normal),
		$author$project$Update$Msg$Back);
};
var $author$project$State$AppState$ChallengePage = {$: 'ChallengePage'};
var $author$project$View$Style$screenTabIcon = F4(
	function (state, display, icon, msg) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					_Utils_eq(state.display, display) ? state.uiStyle.theme.foreground : state.uiStyle.theme.background),
					$mdgriffith$elm_ui$Element$Font$color(
					_Utils_eq(state.display, display) ? state.uiStyle.theme.background : state.uiStyle.theme.foreground),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			{
				label: icon,
				onPress: $elm$core$Maybe$Just(msg)
			});
	});
var $author$project$View$AppView$challengeTab = function (state) {
	return A4(
		$author$project$View$Style$screenTabIcon,
		state,
		$author$project$State$AppState$ChallengePage,
		$author$project$View$Icons$challenge(state.uiStyle.normal),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$ChallengePage));
};
var $author$project$State$AppState$EventPage = {$: 'EventPage'};
var $author$project$View$AppView$eventTab = function (state) {
	return A4(
		$author$project$View$Style$screenTabIcon,
		state,
		$author$project$State$AppState$EventPage,
		$author$project$View$Icons$event(state.uiStyle.normal),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$EventPage));
};
var $author$project$View$Style$screenTabIconWithRefresh = F5(
	function (state, display, needsRefresh, icon, msg) {
		var refreshColor = needsRefresh ? state.uiStyle.theme.alertColor : state.uiStyle.theme.background;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					_Utils_eq(state.display, display) ? state.uiStyle.theme.foreground : refreshColor),
					$mdgriffith$elm_ui$Element$Font$color(
					_Utils_eq(state.display, display) ? refreshColor : state.uiStyle.theme.foreground),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			{
				label: icon,
				onPress: $elm$core$Maybe$Just(msg)
			});
	});
var $author$project$View$AppView$feedTab = function (state) {
	return A5(
		$author$project$View$Style$screenTabIconWithRefresh,
		state,
		$author$project$State$AppState$FeedPage,
		state.feed.newPostsAvailable,
		$author$project$View$Icons$feed(state.uiStyle.normal),
		$author$project$Update$Msg$RefreshFeed);
};
var $author$project$View$Style$screenTabButton = F4(
	function (state, display, txt, msg) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					_Utils_eq(state.display, display) ? state.uiStyle.theme.foreground : state.uiStyle.theme.background),
					$mdgriffith$elm_ui$Element$Font$color(
					_Utils_eq(state.display, display) ? state.uiStyle.theme.background : state.uiStyle.theme.foreground),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text(txt),
				onPress: $elm$core$Maybe$Just(msg)
			});
	});
var $author$project$View$AppView$newTab = function (state) {
	return A4(
		$author$project$View$Style$screenTabButton,
		state,
		$author$project$State$AppState$NewPostPage,
		'+',
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$NewPostPage));
};
var $author$project$Update$Msg$RefreshNotifications = {$: 'RefreshNotifications'};
var $author$project$View$AppView$notificationTab = function (state) {
	return A5(
		$author$project$View$Style$screenTabIconWithRefresh,
		state,
		$author$project$State$AppState$NotificationPage,
		state.notifications.unread,
		$author$project$View$Icons$notifications(state.uiStyle.normal),
		$author$project$Update$Msg$RefreshNotifications);
};
var $author$project$Update$Msg$RefreshPinnedPosts = {$: 'RefreshPinnedPosts'};
var $author$project$View$AppView$pinnedTab = function (state) {
	return A4(
		$author$project$View$Style$screenTabIcon,
		state,
		$author$project$State$AppState$PinnedPostPage,
		$author$project$View$Icons$pinned(state.uiStyle.normal),
		$author$project$Update$Msg$RefreshPinnedPosts);
};
var $author$project$Update$Msg$EnteringSearch = function (a) {
	return {$: 'EnteringSearch', a: a};
};
var $author$project$Update$Msg$PerformSearchFromField = {$: 'PerformSearchFromField'};
var $mdgriffith$elm_ui$Element$Input$search = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('search')
	});
var $author$project$View$Style$searchField = function (state) {
	var onEnter = function (msg) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2(
				$elm$html$Html$Events$on,
				'keyup',
				A2(
					$elm$json$Json$Decode$andThen,
					function (key) {
						return (key === 'Enter') ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
					},
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))));
	};
	return A2(
		$mdgriffith$elm_ui$Element$Input$search,
		_List_fromArray(
			[
				A2($author$project$View$Style$relFontSize, state.uiStyle, 1),
				$mdgriffith$elm_ui$Element$Border$color(state.uiStyle.theme.background),
				$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.textFieldBackground),
				$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.textFieldForeground),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				onEnter($author$project$Update$Msg$PerformSearchFromField)
			]),
		{
			label: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
			onChange: function (txt) {
				return $author$project$Update$Msg$EnteringSearch(txt);
			},
			placeholder: A2($author$project$View$Style$placeholderStyle, state.uiStyle, 'Search...'),
			text: state.search.field
		});
};
var $author$project$View$Style$searchBar = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.foreground),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Border$width(0),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				$author$project$View$Style$searchField(state)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$SearchOutlined$viewWithAttributes = function (attributes) {
	return A2(
		$elm$svg$Svg$svg,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('64 64 896 896')
				]),
			attributes),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z')
					]),
				_List_Nil)
			]));
};
var $lemol$ant_design_icons_elm$Ant$Icons$Svg$searchOutlined = $lemol$ant_design_icons_elm$Ant$Icons$Svg$SearchOutlined$viewWithAttributes;
var $lemol$ant_design_icons_elm_ui$Ant$Icons$searchOutlined = function (attrs) {
	return A2($lemol$ant_design_icons_elm_ui$Ant$Icon$icon, attrs, $lemol$ant_design_icons_elm$Ant$Icons$Svg$searchOutlined);
};
var $author$project$View$Icons$search = A2($elm$core$Basics$composeR, $author$project$View$Icons$toWidthHeight, $lemol$ant_design_icons_elm_ui$Ant$Icons$searchOutlined);
var $author$project$View$AppView$searchTab = function (state) {
	return A4(
		$author$project$View$Style$screenTabIcon,
		state,
		$author$project$State$AppState$SearchPage,
		$author$project$View$Icons$search(state.uiStyle.normal),
		$author$project$Update$Msg$DisplayPage($author$project$State$AppState$SearchPage));
};
var $author$project$Update$Msg$RefreshWall = {$: 'RefreshWall'};
var $author$project$View$AppView$wallTab = function (state) {
	return A4(
		$author$project$View$Style$screenTabIcon,
		state,
		$author$project$State$AppState$WallPage,
		$author$project$View$Icons$wall(state.uiStyle.normal),
		$author$project$Update$Msg$RefreshWall);
};
var $author$project$View$AppView$menuBar = function (state) {
	var isUnloggedScreen = A2(
		$elm$core$List$member,
		state.display,
		_List_fromArray(
			[$author$project$State$AppState$LoginPage, $author$project$State$AppState$RegistrationPage, $author$project$State$AppState$LoggedOffPage, $author$project$State$AppState$BlockedPage]));
	var isSearch = _Utils_eq(state.display, $author$project$State$AppState$SearchPage);
	var isMobile = $author$project$View$UIStyle$isMobile(state.device);
	var show = function (el) {
		return (isSearch && isMobile) ? $mdgriffith$elm_ui$Element$none : el;
	};
	return isUnloggedScreen ? A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		$author$project$View$AppView$appTitle(state)) : A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.background),
				$mdgriffith$elm_ui$Element$Border$rounded(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignLeft]),
				$author$project$View$AppView$backButton(state)),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				isSearch ? $author$project$View$Style$searchBar(state) : $author$project$View$AppView$appTitle(state)),
				show(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$AppView$wallTab(state))),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignRight]),
				$author$project$View$AppView$feedTab(state)),
				show(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$AppView$challengeTab(state))),
				show(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$AppView$eventTab(state))),
				show(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$AppView$pinnedTab(state))),
				show(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$AppView$searchTab(state))),
				show(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$AppView$notificationTab(state))),
				show(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					$author$project$View$AppView$newTab(state)))
			]));
};
var $author$project$View$AppView$viewApp = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$color(state.uiStyle.theme.appForeground),
					$mdgriffith$elm_ui$Element$Background$color(state.uiStyle.theme.appBackground)
				]),
			_List_fromArray(
				[
					$author$project$View$AppView$menuBar(state),
					$author$project$View$AppView$displayCurrentPage(state)
				])));
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{init: $author$project$Main$initState, subscriptions: $author$project$Main$subscriptions, update: $author$project$Update$Logic$update, view: $author$project$View$AppView$viewApp});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));